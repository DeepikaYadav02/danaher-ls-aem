import{r as t,h as i,g as s,H as e}from"./p-591772f1.js";import{i as r}from"./p-3eb3e1ff.js";import{U as n,m as o}from"./p-d2151deb.js";import{g as h}from"./p-85aa182a.js";import{I as a}from"./p-a096f4ab.js";import{g as f}from"./p-0901e53b.js";import{R as c}from"./p-0c1fa2de.js";import"./p-92adf573.js";import"./p-a5540571.js";import"./p-eab67c09.js";var l=function(t,i,e,s){var r,o=arguments.length,l=o<3?i:null===s?s=Object.getOwnPropertyDescriptor(i,e):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(t,i,e,s);else for(var h=t.length-1;h>=0;h--)(r=t[h])&&(l=(o<3?r(l):o>3?r(i,e,l):r(i,e))||l);return o>3&&l&&Object.defineProperty(i,e,l),l};const p=class{constructor(i){t(this,i),this.shouldHighlight=!0,this.error=void 0,this.field=void 0,this.shouldHighlight=!0,this.default=void 0}renderWithHighlights(t,s){try{const r="_openingDelimiter_",o="_closingDelimiter_",l=n.highlightString({content:t,openingDelimiter:r,closingDelimiter:o,highlights:s}).replace(new RegExp(r,"g"),"<b>").replace(new RegExp(o,"g"),"</b>");return i(e,{innerHTML:l})}catch(t){this.error=t}}possiblyWarnOnBadFieldType(){const t=o.getResultProperty(this.result,this.field);r(t)&&this.bindings.engine.logger.error(`atomic-result-text cannot be used with multi value field "${this.field}" with values "${t}". Use atomic-result-multi-value-text instead.`,this)}render(){const t=f(this.result,this.field);if(!t&&!this.default)return this.possiblyWarnOnBadFieldType(),void this.host.remove();if(!t&&this.default)return this.possiblyWarnOnBadFieldType(),i("atomic-text",{value:h(this.field,this.default,this.bindings.i18n)});const e=`${t}`,s=o.getResultProperty(this.result,`${this.field}Highlights`);return this.shouldHighlight&&s?this.renderWithHighlights(e,s):h(this.field,e,this.bindings.i18n)}get host(){return s(this)}};l([a()],p.prototype,"bindings",void 0),l([c()],p.prototype,"result",void 0);export{p as atomic_result_text};