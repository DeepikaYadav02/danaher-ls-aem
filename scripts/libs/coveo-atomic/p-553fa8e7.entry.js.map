{"version":3,"names":["getAnalyticsConfig","recsConfig","enabled","analyticsClientMiddleware","event","payload","augmentAnalytics","defaultAnalyticsConfig","augmentAnalyticsConfigWithDocument","analytics","result","augmentWithExternalMiddleware","augmentAnalyticsWithAtomicVersion","createAtomicRecsStore","commonStore","createAtomicCommonStore","loadingFlags","facets","numericFacets","dateFacets","categoryFacets","iconAssetsPath","facetElements","fieldsToInclude","getUniqueIDFromEngine","engine","state","recommendation","searchUid","FirstRecommendationExecutedFlag","AtomicRecsInterface","constructor","hostRef","this","store","initialized","i18n","i18next","createInstance","localizationCompatibilityVersion","language","languageAssetsPath","commonInterfaceHelper","CommonAtomicInterfaceHelper","bindings","interfaceElement","host","connectedCallback","setLoadingFlag","initialize","options","internalInitialization","initEngine","initializeWithRecommendationEngine","pipeline","console","warn","mismatchedInterfaceAndEnginePropError","searchHub","getRecommendations","engineIsCreated","error","dispatch","loadRecommendationActions","getOrganizationEndpoints","organizationId","env","getOrganizationEndpointsHeadless","updateIconAssetsPath","set","handleInitialization","onComponentInitializing","updateLanguage","updateSearchConfiguration","loadSearchConfigurationActions","locale","onLanguageChange","toggleAnalytics","onAnalyticsChange","registerFieldsToInclude","fields","EcommerceDefaultFieldsToInclude","concat","filter","field","loadFieldActions","onInitialization","unsetLoadingFlag","analyticsConfig","buildRecommendationEngine","configuration","_a","timezone","loggerOptions","level","logLevel","render","h","__decorate","ArrayProp"],"sources":["src/components/recommendations/atomic-recs-interface/analytics-config.ts","src/components/recommendations/atomic-recs-interface/store.ts","src/components/recommendations/atomic-recs-interface/atomic-recs-interface.tsx"],"sourcesContent":["import {\n  AnalyticsConfiguration,\n  RecommendationEngineConfiguration,\n} from '@coveo/headless/recommendation';\nimport {\n  AnalyticsPayload,\n  augmentAnalyticsWithAtomicVersion,\n  augmentWithExternalMiddleware,\n  augmentAnalyticsConfigWithDocument,\n} from '../../common/interface/analytics-config';\n\nexport function getAnalyticsConfig(\n  recsConfig: RecommendationEngineConfiguration,\n  enabled: boolean\n): AnalyticsConfiguration {\n  const analyticsClientMiddleware = (\n    event: string,\n    payload: AnalyticsPayload\n  ) => augmentAnalytics(event, payload, recsConfig);\n\n  const defaultAnalyticsConfig: AnalyticsConfiguration = {\n    analyticsClientMiddleware,\n    enabled,\n    ...augmentAnalyticsConfigWithDocument(),\n  };\n\n  if (recsConfig.analytics) {\n    return {\n      ...defaultAnalyticsConfig,\n      ...recsConfig.analytics,\n      analyticsClientMiddleware,\n    };\n  }\n  return defaultAnalyticsConfig;\n}\n\nfunction augmentAnalytics(\n  event: string,\n  payload: AnalyticsPayload,\n  recsConfig: RecommendationEngineConfiguration\n) {\n  let result = augmentWithExternalMiddleware(event, payload, recsConfig);\n  result = augmentAnalyticsWithAtomicVersion(result);\n  return result;\n}\n","import {RecommendationEngine} from '@coveo/headless/recommendation';\nimport {\n  AtomicCommonStore,\n  AtomicCommonStoreData,\n  createAtomicCommonStore,\n} from '../../common/interface/store';\n\nexport interface AtomicRecsStoreData extends AtomicCommonStoreData {}\nexport interface AtomicRecsStore\n  extends AtomicCommonStore<AtomicRecsStoreData> {}\n\nexport function createAtomicRecsStore(): AtomicRecsStore {\n  const commonStore = createAtomicCommonStore<AtomicRecsStoreData>({\n    loadingFlags: [],\n    facets: {},\n    numericFacets: {},\n    dateFacets: {},\n    categoryFacets: {},\n    iconAssetsPath: '',\n    facetElements: [],\n    fieldsToInclude: [],\n  });\n  return {\n    ...commonStore,\n    getUniqueIDFromEngine(engine: RecommendationEngine): string {\n      return engine.state.recommendation.searchUid;\n    },\n  };\n}\n","import {\n  RecommendationEngine,\n  RecommendationEngineConfiguration,\n  loadFieldActions,\n  EcommerceDefaultFieldsToInclude,\n  buildRecommendationEngine,\n  loadRecommendationActions,\n  loadSearchConfigurationActions,\n  getOrganizationEndpoints as getOrganizationEndpointsHeadless,\n  PlatformEnvironment,\n} from '@coveo/headless/recommendation';\nimport {\n  Component,\n  Element,\n  h,\n  Listen,\n  Method,\n  Prop,\n  Watch,\n  State,\n} from '@stencil/core';\nimport i18next, {i18n} from 'i18next';\nimport {RecsLogLevel} from '..';\nimport {i18nCompatibilityVersion} from '../../../components';\nimport {InitializeEvent} from '../../../utils/initialization-utils';\nimport {ArrayProp} from '../../../utils/props-utils';\nimport {CommonBindings} from '../../common/interface/bindings';\nimport {\n  BaseAtomicInterface,\n  CommonAtomicInterfaceHelper,\n  mismatchedInterfaceAndEnginePropError,\n} from '../../common/interface/interface-common';\nimport {getAnalyticsConfig} from './analytics-config';\nimport {createAtomicRecsStore, AtomicRecsStore} from './store';\n\nconst FirstRecommendationExecutedFlag = 'firstRecommendationExecuted';\nexport type RecsInitializationOptions = RecommendationEngineConfiguration;\nexport type RecsBindings = CommonBindings<\n  RecommendationEngine,\n  AtomicRecsStore,\n  HTMLAtomicRecsInterfaceElement\n>;\n\n/**\n * The `atomic-recs-interface` component is the parent to all other atomic components in a recommendation interface. It handles the headless recommendation engine and localization configurations.\n */\n@Component({\n  tag: 'atomic-recs-interface',\n  shadow: true,\n})\nexport class AtomicRecsInterface\n  implements BaseAtomicInterface<RecommendationEngine>\n{\n  private store = createAtomicRecsStore();\n  private commonInterfaceHelper: CommonAtomicInterfaceHelper<RecommendationEngine>;\n  private initialized = false;\n\n  @Element() public host!: HTMLAtomicRecsInterfaceElement;\n\n  @State() public error?: Error;\n\n  /**\n   * The recommendation interface [query pipeline](https://docs.coveo.com/en/180/).\n   *\n   * If the recommendation interface is initialized using [`initializeWithRecommendationEngine`](https://docs.coveo.com/en/atomic/latest/reference/recommendation-components/atomic-recs-interface/#initializewithrecommendationengine), the query pipeline should instead be configured in the target engine.\n   */\n  @Prop({reflect: true, mutable: true}) public pipeline?: string;\n\n  /**\n   * The recommendation interface [search hub](https://docs.coveo.com/en/1342/).\n   *\n   * If the recommendation interface is initialized using [`initializeWithRecommendationEngine`](https://docs.coveo.com/en/atomic/latest/reference/recommendation-components/atomic-recs-interface/#initializewithrecommendationengine), the search hub should instead be configured in the target engine.\n   */\n  @Prop({reflect: true, mutable: true}) public searchHub?: string;\n\n  /**\n   * The [tz database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) identifier of the time zone to use to correctly interpret dates in the query expression, facets, and result items.\n   * By default, the timezone will be [guessed](https://day.js.org/docs/en/timezone/guessing-user-timezone).\n   *\n   * Example: \"America/Montreal\"\n   */\n  @Prop({reflect: true}) public timezone?: string;\n\n  /**\n   * The recommendation interface headless engine.\n   */\n  @Prop({mutable: true}) public engine?: RecommendationEngine;\n\n  /**\n   * Whether analytics should be enabled.\n   */\n  @Prop({reflect: true}) public analytics = true;\n\n  /**\n   * The recommendation interface i18next instance.\n   */\n  @Prop() public i18n: i18n = i18next.createInstance();\n\n  /**\n   * The severity level of the messages to log in the console.\n   */\n  @Prop({reflect: true}) public logLevel?: RecsLogLevel;\n\n  /**\n   * The compatibility JSON version for i18next to use (see [i18next Migration Guide](https://www.i18next.com/misc/migration-guide#v20.x.x-to-v21.0.0)).\n   */\n  @Prop() public localizationCompatibilityVersion: i18nCompatibilityVersion =\n    'v3';\n\n  /**\n   * The recommendation interface language.\n   */\n  @Prop({reflect: true}) public language = 'en';\n\n  /**\n   * A list of non-default fields to include in the query results.\n   *\n   * Specify the property as an array using a JSON string representation:\n   * ```html\n   * <atomic-recs-interface fields-to-include='[\"fieldA\", \"fieldB\"]'></atomic-recs-interface>\n   * ```\n   */\n  @ArrayProp()\n  @Prop({mutable: true})\n  public fieldsToInclude: string[] | string = '[]';\n\n  /**\n   * The language assets path. By default, this will be a relative URL pointing to `./lang`.\n   *\n   * Example: \"/mypublicpath/languages\"\n   *\n   */\n  @Prop({reflect: true}) public languageAssetsPath = './lang';\n\n  /**\n   * The icon assets path. By default, this will be a relative URL pointing to `./assets`.\n   *\n   * Example: \"/mypublicpath/icons\"\n   *\n   */\n  @Prop({reflect: true}) public iconAssetsPath = './assets';\n\n  public constructor() {\n    this.commonInterfaceHelper = new CommonAtomicInterfaceHelper(\n      this,\n      'CoveoAtomicRecs'\n    );\n  }\n\n  public get bindings(): RecsBindings {\n    return {\n      engine: this.engine!,\n      i18n: this.i18n,\n      store: this.store,\n      interfaceElement: this.host,\n    };\n  }\n\n  public connectedCallback() {\n    this.store.setLoadingFlag(FirstRecommendationExecutedFlag);\n  }\n\n  /**\n   * Initializes the connection with the headless recommendation engine using options for `accessToken` (required), `organizationId` (required), `renewAccessToken`, and `platformUrl`.\n   */\n  @Method() public initialize(options: RecsInitializationOptions) {\n    return this.internalInitialization(() => this.initEngine(options));\n  }\n\n  /**\n   * Initializes the connection with an already preconfigured headless recommendation engine.\n   * This bypasses the properties set on the component, such as analytics, recommendation, searchHub, language, timezone & logLevel.\n   */\n  @Method() public initializeWithRecommendationEngine(\n    engine: RecommendationEngine\n  ) {\n    if (this.pipeline && this.pipeline !== engine.state.pipeline) {\n      console.warn(\n        mismatchedInterfaceAndEnginePropError(\n          'recommendation',\n          'query pipeline'\n        )\n      );\n    }\n    if (this.searchHub && this.searchHub !== engine.state.searchHub) {\n      console.warn(\n        mismatchedInterfaceAndEnginePropError('recommendation', 'search hub')\n      );\n    }\n    return this.internalInitialization(() => (this.engine = engine));\n  }\n\n  /**\n   *\n   * Fetches new recommendations.\n   */\n  @Method() public async getRecommendations() {\n    if (!this.commonInterfaceHelper.engineIsCreated(this.engine)) {\n      return;\n    }\n\n    if (!this.initialized) {\n      console.error(\n        'You have to wait until the \"initialize\" promise is fulfilled before executing a search.',\n        this.host\n      );\n      return;\n    }\n\n    this.engine!.dispatch(\n      loadRecommendationActions(this.engine!).getRecommendations()\n    );\n  }\n\n  @Method() public async getOrganizationEndpoints(\n    organizationId: string,\n    env: PlatformEnvironment = 'prod'\n  ) {\n    return getOrganizationEndpointsHeadless(organizationId, env);\n  }\n\n  @Watch('iconAssetsPath')\n  public updateIconAssetsPath() {\n    this.store.set('iconAssetsPath', this.iconAssetsPath);\n  }\n\n  @Listen('atomic/initializeComponent')\n  public handleInitialization(event: InitializeEvent) {\n    this.commonInterfaceHelper.onComponentInitializing(event);\n  }\n\n  @Watch('language')\n  public updateLanguage() {\n    if (!this.commonInterfaceHelper.engineIsCreated(this.engine)) {\n      return;\n    }\n\n    const {updateSearchConfiguration} = loadSearchConfigurationActions(\n      this.engine\n    );\n    this.engine.dispatch(\n      updateSearchConfiguration({\n        locale: this.language,\n      })\n    );\n    this.commonInterfaceHelper.onLanguageChange();\n  }\n\n  @Watch('analytics')\n  public toggleAnalytics() {\n    if (!this.commonInterfaceHelper.engineIsCreated(this.engine)) {\n      return;\n    }\n\n    this.commonInterfaceHelper.onAnalyticsChange();\n  }\n\n  public registerFieldsToInclude() {\n    const fields = EcommerceDefaultFieldsToInclude.concat(\n      [...this.fieldsToInclude].filter((field) => !!field)\n    );\n    this.engine!.dispatch(\n      loadFieldActions(this.engine!).registerFieldsToInclude(fields)\n    );\n  }\n\n  private async internalInitialization(initEngine: () => void) {\n    await this.commonInterfaceHelper.onInitialization(initEngine);\n    this.pipeline = this.engine!.state.pipeline;\n    this.searchHub = this.engine!.state.searchHub;\n    this.store.unsetLoadingFlag(FirstRecommendationExecutedFlag);\n    this.initialized = true;\n  }\n\n  private initEngine(options: RecsInitializationOptions) {\n    const analyticsConfig = getAnalyticsConfig(options, this.analytics);\n    try {\n      this.engine = buildRecommendationEngine({\n        configuration: {\n          pipeline: this.pipeline,\n          searchHub: this.searchHub ?? 'default',\n          locale: this.language,\n          timezone: this.timezone,\n          ...options,\n          analytics: analyticsConfig,\n        },\n        loggerOptions: {\n          level: this.logLevel,\n        },\n      });\n    } catch (error) {\n      this.error = error as Error;\n      throw error;\n    }\n  }\n\n  public render() {\n    return this.engine && <slot></slot>;\n  }\n}\n"],"mappings":"oYAWgBA,EACdC,EACAC,GAEA,MAAMC,EAA4B,CAChCC,EACAC,IACGC,EAAiBF,EAAOC,EAASJ,GAEtC,MAAMM,EAAiD,CACrDJ,4BACAD,aACGM,KAGL,GAAIP,EAAWQ,UAAW,CACxB,MAAO,IACFF,KACAN,EAAWQ,UACdN,4B,CAGJ,OAAOI,CACT,CAEA,SAASD,EACPF,EACAC,EACAJ,GAEA,IAAIS,EAASC,EAA8BP,EAAOC,EAASJ,GAC3DS,EAASE,EAAkCF,GAC3C,OAAOA,CACT,C,SCjCgBG,IACd,MAAMC,EAAcC,EAA6C,CAC/DC,aAAc,GACdC,OAAQ,GACRC,cAAe,GACfC,WAAY,GACZC,eAAgB,GAChBC,eAAgB,GAChBC,cAAe,GACfC,gBAAiB,KAEnB,MAAO,IACFT,EACH,qBAAAU,CAAsBC,GACpB,OAAOA,EAAOC,MAAMC,eAAeC,S,EAGzC,C,2WCOA,MAAMC,EAAkC,8B,MAe3BC,EAAmB,MA4F9B,WAAAC,CAAAC,G,UAzFQC,KAAAC,MAAQrB,IAERoB,KAAAE,YAAc,MAoCQF,KAAAxB,UAAY,KAK3BwB,KAAAG,KAAaC,EAAQC,iBAUrBL,KAAAM,iCACb,KAK4BN,KAAAO,SAAW,KAYlCP,KAAAV,gBAAqC,KAQdU,KAAAQ,mBAAqB,SAQrBR,KAAAZ,eAAiB,W,mIAjDL,K,UAKdgB,EAAQC,iB,8DAWlC,K,cAKuC,K,qBAYG,K,wBAQO,S,oBAQJ,WAG7CL,KAAKS,sBAAwB,IAAIC,EAC/BV,KACA,kB,CAIJ,YAAWW,GACT,MAAO,CACLnB,OAAQQ,KAAKR,OACbW,KAAMH,KAAKG,KACXF,MAAOD,KAAKC,MACZW,iBAAkBZ,KAAKa,K,CAIpB,iBAAAC,GACLd,KAAKC,MAAMc,eAAenB,E,CAMX,UAAAoB,CAAWC,GAC1B,OAAOjB,KAAKkB,wBAAuB,IAAMlB,KAAKmB,WAAWF,I,CAO1C,kCAAAG,CACf5B,GAEA,GAAIQ,KAAKqB,UAAYrB,KAAKqB,WAAa7B,EAAOC,MAAM4B,SAAU,CAC5DC,QAAQC,KACNC,EACE,iBACA,kB,CAIN,GAAIxB,KAAKyB,WAAazB,KAAKyB,YAAcjC,EAAOC,MAAMgC,UAAW,CAC/DH,QAAQC,KACNC,EAAsC,iBAAkB,c,CAG5D,OAAOxB,KAAKkB,wBAAuB,IAAOlB,KAAKR,OAASA,G,CAOzC,wBAAMkC,GACrB,IAAK1B,KAAKS,sBAAsBkB,gBAAgB3B,KAAKR,QAAS,CAC5D,M,CAGF,IAAKQ,KAAKE,YAAa,CACrBoB,QAAQM,MACN,0FACA5B,KAAKa,MAEP,M,CAGFb,KAAKR,OAAQqC,SACXC,EAA0B9B,KAAKR,QAASkC,qB,CAI3B,8BAAMK,CACrBC,EACAC,EAA2B,QAE3B,OAAOC,EAAiCF,EAAgBC,E,CAInD,oBAAAE,GACLnC,KAAKC,MAAMmC,IAAI,iBAAkBpC,KAAKZ,e,CAIjC,oBAAAiD,CAAqBlE,GAC1B6B,KAAKS,sBAAsB6B,wBAAwBnE,E,CAI9C,cAAAoE,GACL,IAAKvC,KAAKS,sBAAsBkB,gBAAgB3B,KAAKR,QAAS,CAC5D,M,CAGF,MAAMgD,0BAACA,GAA6BC,EAClCzC,KAAKR,QAEPQ,KAAKR,OAAOqC,SACVW,EAA0B,CACxBE,OAAQ1C,KAAKO,YAGjBP,KAAKS,sBAAsBkC,kB,CAItB,eAAAC,GACL,IAAK5C,KAAKS,sBAAsBkB,gBAAgB3B,KAAKR,QAAS,CAC5D,M,CAGFQ,KAAKS,sBAAsBoC,mB,CAGtB,uBAAAC,GACL,MAAMC,EAASC,EAAgCC,OAC7C,IAAIjD,KAAKV,iBAAiB4D,QAAQC,KAAYA,KAEhDnD,KAAKR,OAAQqC,SACXuB,EAAiBpD,KAAKR,QAASsD,wBAAwBC,G,CAInD,4BAAM7B,CAAuBC,SAC7BnB,KAAKS,sBAAsB4C,iBAAiBlC,GAClDnB,KAAKqB,SAAWrB,KAAKR,OAAQC,MAAM4B,SACnCrB,KAAKyB,UAAYzB,KAAKR,OAAQC,MAAMgC,UACpCzB,KAAKC,MAAMqD,iBAAiB1D,GAC5BI,KAAKE,YAAc,I,CAGb,UAAAiB,CAAWF,G,MACjB,MAAMsC,EAAkBxF,EAAmBkD,EAASjB,KAAKxB,WACzD,IACEwB,KAAKR,OAASgE,EAA0B,CACtCC,cAAe,CACbpC,SAAUrB,KAAKqB,SACfI,WAAWiC,EAAA1D,KAAKyB,aAAS,MAAAiC,SAAA,EAAAA,EAAI,UAC7BhB,OAAQ1C,KAAKO,SACboD,SAAU3D,KAAK2D,YACZ1C,EACHzC,UAAW+E,GAEbK,cAAe,CACbC,MAAO7D,KAAK8D,W,CAGhB,MAAOlC,GACP5B,KAAK4B,MAAQA,EACb,MAAMA,C,EAIH,MAAAmC,GACL,OAAO/D,KAAKR,QAAUwE,EAAA,Y,6JA7KjBC,EAAA,CAFNC,K"}