{"version":3,"names":["atomicResultListCss","AtomicResultList","this","loadingFlag","randomID","resultTemplateRegistered","templateHasError","display","density","gridCellLinkTarget","imageSize","setRenderFunction","resultRenderingFunction","focusTarget","nextNewResultTarget","FocusTargetController","initialize","host","innerHTML","includes","console","warn","resultList","buildResultList","bindings","engine","resultsPerPage","buildResultsPerPage","resultTemplateProvider","ResultTemplateProvider","includeDefaultTemplate","templateElements","Array","from","querySelectorAll","getResultTemplateRegistered","getTemplateHasError","setResultTemplateRegistered","value","setTemplateHasError","resultListCommon","ResultListCommon","getNumberOfPlaceholders","resultsPerPageState","numberOfResults","getDensity","getResultDisplay","getLayoutDisplay","getImageSize","getResultListState","resultListState","getResultRenderingFunction","renderResult","props","h","getInteractiveResult","result","buildInteractiveResult","options","render","__decorate","InitializeBindings","BindStateToController"],"sources":["src/components/search/result-lists/atomic-result-list/atomic-result-list.pcss?tag=atomic-result-list&encapsulation=shadow","src/components/search/result-lists/atomic-result-list/atomic-result-list.tsx"],"sourcesContent":["@import '../../../common/result-list/styles/placeholders.pcss';\n@import '../../../common/result-list/styles/table-display.pcss';\n@import '../../../common/result-list/styles/list-display.pcss';\n@import '../../../common/result-list/styles/grid-display.pcss';\n","import {\n  ResultList,\n  ResultListState,\n  buildResultList,\n  ResultsPerPageState,\n  ResultsPerPage,\n  buildResultsPerPage,\n  Result,\n  buildInteractiveResult,\n} from '@coveo/headless';\nimport {Component, Element, State, Prop, Method, h} from '@stencil/core';\nimport {FocusTargetController} from '../../../../utils/accessibility-utils';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../../utils/initialization-utils';\nimport {randomID} from '../../../../utils/utils';\nimport {\n  ResultDisplayDensity,\n  ResultDisplayImageSize,\n  ResultDisplayLayout,\n  ResultTarget,\n} from '../../../common/layout/display-options';\nimport {ResultListCommon} from '../../../common/result-list/result-list-common';\nimport {ResultRenderingFunction} from '../../../common/result-list/result-list-common-interface';\nimport {ResultTemplateProvider} from '../../../common/result-list/result-template-provider';\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\n\n/**\n * The `atomic-result-list` component is responsible for displaying query results by applying one or more result templates.\n *\n * @part result-list - The element containing every result of a result list\n * @part outline - The element displaying an outline or a divider around a result\n * @part result-list-grid-clickable-container - The parent of the result & the clickable link encompassing it, when results are displayed as a grid\n * @part result-list-grid-clickable - The clickable link encompassing the result when results are displayed as a grid\n * @part result-table - The element of the result table containing a heading and a body\n * @part result-table-heading - The element containing the row of cells in the result table's heading\n * @part result-table-heading-row - The element containing cells of the result table's heading\n * @part result-table-heading-cell - The element representing a cell of the result table's heading\n * @part result-table-body - The element containing the rows of the result table's body\n * @part result-table-row - The element containing the cells of a row in the result table's body\n * @part result-table-row-odd - The element containing the cells of an odd row in the result table's body\n * @part result-table-row-even - The element containing the cells of an even row in the result table's body\n * @part result-table-cell - The element representing a cell of the result table's body\n */\n@Component({\n  tag: 'atomic-result-list',\n  styleUrl: 'atomic-result-list.pcss',\n  shadow: true,\n})\nexport class AtomicResultList implements InitializableComponent {\n  @InitializeBindings() public bindings!: Bindings;\n  public resultList!: ResultList;\n  public resultsPerPage!: ResultsPerPage;\n  private resultListCommon!: ResultListCommon;\n  private loadingFlag = randomID('firstResultLoaded-');\n  private resultRenderingFunction: ResultRenderingFunction;\n\n  @Element() public host!: HTMLDivElement;\n\n  @BindStateToController('resultList')\n  @State()\n  private resultListState!: ResultListState;\n  @BindStateToController('resultsPerPage')\n  @State()\n  private resultsPerPageState!: ResultsPerPageState;\n  @State() private resultTemplateRegistered = false;\n  @State() public error!: Error;\n  @State() private templateHasError = false;\n\n  private nextNewResultTarget?: FocusTargetController;\n\n  /**\n   * The desired layout to use when displaying results. Layouts affect how many results to display per row and how visually distinct they are from each other.\n   */\n  @Prop({reflect: true}) public display: ResultDisplayLayout = 'list';\n  /**\n   * The spacing of various elements in the result list, including the gap between results, the gap between parts of a result, and the font sizes of different parts in a result.\n   */\n  @Prop({reflect: true}) public density: ResultDisplayDensity = 'normal';\n\n  /**\n   * The target location to open the result link (see [target](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#target)).\n   * This property is only leveraged when `display` is `grid`.\n   * @defaultValue `_self`\n   */\n  @Prop() gridCellLinkTarget: ResultTarget = '_self';\n\n  /**\n   * The expected size of the image displayed in the results.\n   */\n  @Prop({reflect: true, mutable: true})\n  public imageSize: ResultDisplayImageSize = 'icon';\n\n  /**\n   * Sets a rendering function to bypass the standard HTML template mechanism for rendering results.\n   * You can use this function while working with web frameworks that don't use plain HTML syntax, e.g., React, Angular or Vue.\n   *\n   * Do not use this method if you integrate Atomic in a plain HTML deployment.\n   *\n   * @param resultRenderingFunction\n   */\n  @Method() public async setRenderFunction(\n    resultRenderingFunction: ResultRenderingFunction\n  ) {\n    this.resultRenderingFunction = resultRenderingFunction;\n  }\n\n  public get focusTarget() {\n    if (!this.nextNewResultTarget) {\n      this.nextNewResultTarget = new FocusTargetController(this);\n    }\n    return this.nextNewResultTarget;\n  }\n\n  public initialize() {\n    if (this.host.innerHTML.includes('<atomic-result-children')) {\n      console.warn(\n        'Folded results will not render any children for the \"atomic-result-list\". Please use \"atomic-folded-result-list\" instead.'\n      );\n    }\n    this.resultList = buildResultList(this.bindings.engine);\n    this.resultsPerPage = buildResultsPerPage(this.bindings.engine);\n    const resultTemplateProvider = new ResultTemplateProvider({\n      includeDefaultTemplate: true,\n      templateElements: Array.from(\n        this.host.querySelectorAll('atomic-result-template')\n      ),\n      getResultTemplateRegistered: () => this.resultTemplateRegistered,\n      getTemplateHasError: () => this.templateHasError,\n      setResultTemplateRegistered: (value: boolean) => {\n        this.resultTemplateRegistered = value;\n      },\n      setTemplateHasError: (value: boolean) => {\n        this.templateHasError = value;\n      },\n      bindings: this.bindings,\n    });\n\n    this.resultListCommon = new ResultListCommon({\n      resultTemplateProvider,\n      getNumberOfPlaceholders: () => this.resultsPerPageState.numberOfResults,\n      gridCellLinkTarget: this.gridCellLinkTarget,\n      host: this.host,\n      bindings: this.bindings,\n      getDensity: () => this.density,\n      getResultDisplay: () => this.display,\n      getLayoutDisplay: () => this.display,\n      getImageSize: () => this.imageSize,\n      nextNewResultTarget: this.focusTarget,\n      loadingFlag: this.loadingFlag,\n      getResultListState: () => this.resultListState,\n      getResultRenderingFunction: () => this.resultRenderingFunction,\n      renderResult: (props) => <atomic-result {...props}></atomic-result>,\n      getInteractiveResult: (result: Result) =>\n        buildInteractiveResult(this.bindings.engine, {\n          options: {result},\n        }),\n    });\n  }\n\n  public render() {\n    return this.resultListCommon.render();\n  }\n}\n"],"mappings":"+gBAAA,MAAMA,EAAsB,gkR,iXCmDfC,EAAgB,M,yBAKnBC,KAAAC,YAAcC,EAAS,sBAWdF,KAAAG,yBAA2B,MAE3BH,KAAAI,iBAAmB,MAONJ,KAAAK,QAA+B,OAI/BL,KAAAM,QAAgC,SAOtDN,KAAAO,mBAAmC,QAMpCP,KAAAQ,UAAoC,O,gGA1BC,M,2CAER,M,aAOyB,O,aAIC,S,wBAOnB,Q,eAMA,M,CAU1B,uBAAMC,CACrBC,GAEAV,KAAKU,wBAA0BA,C,CAGjC,eAAWC,GACT,IAAKX,KAAKY,oBAAqB,CAC7BZ,KAAKY,oBAAsB,IAAIC,EAAsBb,K,CAEvD,OAAOA,KAAKY,mB,CAGP,UAAAE,GACL,GAAId,KAAKe,KAAKC,UAAUC,SAAS,2BAA4B,CAC3DC,QAAQC,KACN,4H,CAGJnB,KAAKoB,WAAaC,EAAgBrB,KAAKsB,SAASC,QAChDvB,KAAKwB,eAAiBC,EAAoBzB,KAAKsB,SAASC,QACxD,MAAMG,EAAyB,IAAIC,EAAuB,CACxDC,uBAAwB,KACxBC,iBAAkBC,MAAMC,KACtB/B,KAAKe,KAAKiB,iBAAiB,2BAE7BC,4BAA6B,IAAMjC,KAAKG,yBACxC+B,oBAAqB,IAAMlC,KAAKI,iBAChC+B,4BAA8BC,IAC5BpC,KAAKG,yBAA2BiC,CAAK,EAEvCC,oBAAsBD,IACpBpC,KAAKI,iBAAmBgC,CAAK,EAE/Bd,SAAUtB,KAAKsB,WAGjBtB,KAAKsC,iBAAmB,IAAIC,EAAiB,CAC3Cb,yBACAc,wBAAyB,IAAMxC,KAAKyC,oBAAoBC,gBACxDnC,mBAAoBP,KAAKO,mBACzBQ,KAAMf,KAAKe,KACXO,SAAUtB,KAAKsB,SACfqB,WAAY,IAAM3C,KAAKM,QACvBsC,iBAAkB,IAAM5C,KAAKK,QAC7BwC,iBAAkB,IAAM7C,KAAKK,QAC7ByC,aAAc,IAAM9C,KAAKQ,UACzBI,oBAAqBZ,KAAKW,YAC1BV,YAAaD,KAAKC,YAClB8C,mBAAoB,IAAM/C,KAAKgD,gBAC/BC,2BAA4B,IAAMjD,KAAKU,wBACvCwC,aAAeC,GAAUC,EAAA,oBAAmBD,IAC5CE,qBAAuBC,GACrBC,EAAuBvD,KAAKsB,SAASC,OAAQ,CAC3CiC,QAAS,CAACF,a,CAKX,MAAAG,GACL,OAAOzD,KAAKsC,iBAAiBmB,Q,6BA/GFC,EAAA,CAA5BC,K,+BAWOD,EAAA,CAFPE,EAAsB,e,sCAKfF,EAAA,CAFPE,EAAsB,mB"}