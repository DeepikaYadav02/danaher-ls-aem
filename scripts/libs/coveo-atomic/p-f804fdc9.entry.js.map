{"version":3,"names":["atomicIpxButtonCss","numberOrPixelValuePattern","RegExp","AtomicIPXButton","this","closeIcon","CloseIcon","openIcon","SearchIcon","isModalOpen","onClick","close","open","render","renderIPXButton","h","Button","style","part","class","icon","getIcon","label","displayedIcon","hiddenIcon","Fragment","ipxModal","bindings","interfaceElement","querySelector","host","classList","add","setAttribute","remove","initialDiv","document","createElement","innerHTML","iconElement","iconWidth","getIconWidth","iconHeight","getIconHeight","cleanupSVGStyles","removeAttribute","width","_a","getAttribute","test","height","__decorate","InitializeBindings"],"sources":["src/components/ipx/atomic-ipx-button/atomic-ipx-button.pcss?tag=atomic-ipx-button&encapsulation=shadow","src/components/ipx/atomic-ipx-button/atomic-ipx-button.tsx"],"sourcesContent":["@import '../../../global/global.pcss';\n\n/**\n * @prop --atomic-ipx-button-height: height of the IPX button.\n */\n:host {\n  &::part(ipx-button) {\n    @apply btn-primary fixed bottom-1 right-12 block px-3 whitespace-nowrap;\n    height: var(--atomic-ipx-button-height, 2.75rem);\n    background-color: var(--atomic-primary);\n  }\n\n  &::part(button-icon) {\n    @apply p-0 inline-block mr-2 w-4 h-4 align-middle relative;\n    font-size: 100%;\n  }\n\n  &::part(button-text) {\n    @apply overflow-hidden;\n  }\n\n  &::part(ipx-close-icon),\n  &::part(ipx-open-icon) {\n    @apply absolute left-0;\n    transition: transform 500ms;\n  }\n}\n","import {Component, Element, Fragment, h, Prop, State} from '@stencil/core';\nimport CloseIcon from '../../../images/close.svg';\nimport SearchIcon from '../../../images/search.svg';\nimport {\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../utils/initialization-utils';\nimport {Button} from '../../common/button';\nimport {Bindings} from '../../search/atomic-search-interface/atomic-search-interface';\n\nconst numberOrPixelValuePattern = new RegExp(/^(?=.*(?:\\d+|px)$).*$/);\n\n/**\n * @internal\n */\n@Component({\n  tag: 'atomic-ipx-button',\n  styleUrl: './atomic-ipx-button.pcss',\n  shadow: true,\n})\nexport class AtomicIPXButton implements InitializableComponent {\n  @InitializeBindings() public bindings!: Bindings;\n\n  @State() public error!: Error;\n\n  @Element() public host!: HTMLElement;\n\n  /**\n   * The label that will be shown to the user.\n   */\n  @Prop({reflect: true}) public label?: string;\n\n  /**\n   * The close icon of the button.\n   */\n  @Prop({reflect: true}) public closeIcon = CloseIcon;\n\n  /**\n   * The open icon of the button.\n   */\n  @Prop({reflect: true}) public openIcon = SearchIcon;\n\n  /**\n   * Whether the IPX modal is open.\n   */\n  @Prop({mutable: true, reflect: true}) public isModalOpen = false;\n\n  private async onClick() {\n    this.isModalOpen ? this.close() : this.open();\n    this.render();\n  }\n\n  private renderIPXButton() {\n    return (\n      <Button\n        style=\"primary\"\n        part=\"ipx-button\"\n        class=\"my-2\"\n        onClick={() => this.onClick()}\n      >\n        <span part=\"button-icon\">\n          <atomic-icon\n            part=\"ipx-close-icon\"\n            icon={this.getIcon(this.closeIcon)}\n          ></atomic-icon>\n          <atomic-icon\n            part=\"ipx-open-icon\"\n            icon={this.getIcon(this.openIcon)}\n          ></atomic-icon>\n        </span>\n        <span part=\"button-text\">{this.label}</span>\n      </Button>\n    );\n  }\n\n  public render() {\n    const [displayedIcon, hiddenIcon] = this.isModalOpen\n      ? ['ipx-close-icon', 'ipx-open-icon']\n      : ['ipx-open-icon', 'ipx-close-icon'];\n\n    return (\n      <Fragment>\n        {\n          <style>\n            {`\n              [part=${displayedIcon}] {\n                transform: translateY(0rem);\n              }\n\n              [part=${hiddenIcon}] {\n                transform: translateY(3rem);\n              }\n                \n              .btn-open {\n                [part=${displayedIcon}] {\n                  transform: translateY(3rem);\n                }\n              \n                [part=${hiddenIcon}] {\n                  transform: translateY(0rem);\n                }\n              }`}\n          </style>\n        }\n        <div class=\"flex flex-col items-center\" part=\"container\">\n          {this.renderIPXButton()}\n        </div>\n      </Fragment>\n    );\n  }\n\n  private get ipxModal() {\n    return this.bindings.interfaceElement.querySelector('atomic-ipx-modal')!;\n  }\n\n  private open() {\n    this.isModalOpen = true;\n    this.host.classList.add('btn-open');\n    this.ipxModal.setAttribute('is-open', 'true');\n  }\n\n  private close() {\n    this.isModalOpen = false;\n    this.host.classList.remove('btn-open');\n    this.ipxModal.setAttribute('is-open', 'false');\n  }\n\n  private getIcon(icon: string) {\n    const initialDiv = document.createElement('div')!;\n    initialDiv.innerHTML = icon;\n    const iconElement = initialDiv.querySelector('svg');\n    if (!iconElement) {\n      return initialDiv.innerHTML;\n    }\n    // here, we grab the icon width and height to set a viewbox (which keeps the svg looking normal), then remove styles from the icon to let the icon stretch into the space it is given.\n    const iconWidth = this.getIconWidth(iconElement);\n    const iconHeight = this.getIconHeight(iconElement);\n    this.cleanupSVGStyles(iconElement);\n    if (iconWidth && iconHeight) {\n      iconElement.setAttribute('viewBox', `0 0 ${iconWidth} ${iconHeight}`);\n    }\n    return initialDiv.innerHTML;\n  }\n\n  private cleanupSVGStyles(iconElement: SVGSVGElement) {\n    iconElement.removeAttribute('style');\n    iconElement.removeAttribute('width');\n    iconElement.removeAttribute('height');\n  }\n\n  private getIconWidth(icon: SVGSVGElement) {\n    const width = icon.getAttribute('width') ?? '';\n    if (numberOrPixelValuePattern.test(width)) {\n      return width;\n    }\n    return null;\n  }\n\n  private getIconHeight(icon: SVGSVGElement) {\n    const height = icon.getAttribute('height') ?? '';\n    if (numberOrPixelValuePattern.test(height)) {\n      return height;\n    }\n    return null;\n  }\n}\n"],"mappings":"4TAAA,MAAMA,EAAqB,mzkC,2WCU3B,MAAMC,EAA4B,IAAIC,OAAO,yB,MAUhCC,EAAe,M,yBAeIC,KAAAC,UAAYC,EAKZF,KAAAG,SAAWC,EAKIJ,KAAAK,YAAc,M,yDAVjBH,E,cAKDE,E,iBAKkB,K,CAEnD,aAAME,GACZN,KAAKK,YAAcL,KAAKO,QAAUP,KAAKQ,OACvCR,KAAKS,Q,CAGC,eAAAC,GACN,OACEC,EAACC,EAAM,CACLC,MAAM,UACNC,KAAK,aACLC,MAAM,OACNT,QAAS,IAAMN,KAAKM,WAEpBK,EAAA,QAAMG,KAAK,eACTH,EAAA,eACEG,KAAK,iBACLE,KAAMhB,KAAKiB,QAAQjB,KAAKC,aAE1BU,EAAA,eACEG,KAAK,gBACLE,KAAMhB,KAAKiB,QAAQjB,KAAKG,aAG5BQ,EAAA,QAAMG,KAAK,eAAed,KAAKkB,O,CAK9B,MAAAT,GACL,MAAOU,EAAeC,GAAcpB,KAAKK,YACrC,CAAC,iBAAkB,iBACnB,CAAC,gBAAiB,kBAEtB,OACEM,EAACU,EAAQ,KAELV,EAAA,aACG,yBACSQ,8FAIAC,2IAKED,kHAIAC,4FAMhBT,EAAA,OAAKI,MAAM,6BAA6BD,KAAK,aAC1Cd,KAAKU,mB,CAMd,YAAYY,GACV,OAAOtB,KAAKuB,SAASC,iBAAiBC,cAAc,mB,CAG9C,IAAAjB,GACNR,KAAKK,YAAc,KACnBL,KAAK0B,KAAKC,UAAUC,IAAI,YACxB5B,KAAKsB,SAASO,aAAa,UAAW,O,CAGhC,KAAAtB,GACNP,KAAKK,YAAc,MACnBL,KAAK0B,KAAKC,UAAUG,OAAO,YAC3B9B,KAAKsB,SAASO,aAAa,UAAW,Q,CAGhC,OAAAZ,CAAQD,GACd,MAAMe,EAAaC,SAASC,cAAc,OAC1CF,EAAWG,UAAYlB,EACvB,MAAMmB,EAAcJ,EAAWN,cAAc,OAC7C,IAAKU,EAAa,CAChB,OAAOJ,EAAWG,S,CAGpB,MAAME,EAAYpC,KAAKqC,aAAaF,GACpC,MAAMG,EAAatC,KAAKuC,cAAcJ,GACtCnC,KAAKwC,iBAAiBL,GACtB,GAAIC,GAAaE,EAAY,CAC3BH,EAAYN,aAAa,UAAW,OAAOO,KAAaE,I,CAE1D,OAAOP,EAAWG,S,CAGZ,gBAAAM,CAAiBL,GACvBA,EAAYM,gBAAgB,SAC5BN,EAAYM,gBAAgB,SAC5BN,EAAYM,gBAAgB,S,CAGtB,YAAAJ,CAAarB,G,MACnB,MAAM0B,GAAQC,EAAA3B,EAAK4B,aAAa,YAAQ,MAAAD,SAAA,EAAAA,EAAI,GAC5C,GAAI9C,EAA0BgD,KAAKH,GAAQ,CACzC,OAAOA,C,CAET,OAAO,I,CAGD,aAAAH,CAAcvB,G,MACpB,MAAM8B,GAASH,EAAA3B,EAAK4B,aAAa,aAAS,MAAAD,SAAA,EAAAA,EAAI,GAC9C,GAAI9C,EAA0BgD,KAAKC,GAAS,CAC1C,OAAOA,C,CAET,OAAO,I,6BA9IoBC,EAAA,CAA5BC,K"}