{"version":3,"names":["NumericFacetCommon","constructor","props","this","manualRanges","validateProps","facetId","determineFacetId","setFacetId","numberOfValues","setManualRanges","Array","from","host","querySelectorAll","map","start","end","endInclusive","label","buildNumericRange","facetForRange","initializeFacetForRange","withInput","facetForInput","initializeFacetForInput","filter","initializeFilter","dependenciesManager","buildDependenciesManager","registerFacetToStore","bindings","store","get","field","randomID","formatter","getFormatter","enabled","_d","_b","_a","state","_c","hasValues","values","length","valuesToRender","numberOfSelectedValues","range","hasInputRange","shouldRenderFacet","shouldRenderInput","shouldRenderValues","searchStatusState","getSearchStatusState","shouldDisplayInputForFacetRange","facetValues","hasInput","Schema","displayValuesAs","StringValue","constrainTo","validate","validateDependsOn","dependsOn","disconnectedCallback","isConnected","stopWatching","isHidden","facetInfo","i18n","t","element","registerFacet","format","value","formatFacetValue","initializePopover","numericFacets","facetValue","manualRangeLabel","find","areRangesEqual","getFieldValueCaption","formatValue","languages","error","engine","logger","firstRange","secondRange","renderValue","onClick","displayValue","isSelected","h","FacetValueCheckbox","numberOfResults","FacetValueLabelHighlight","FacetValueLink","renderValuesContainer","children","FacetValuesGroup","class","part","renderValues","toggleSingleSelect","toggleSelect","renderNumberInput","type","filterState","renderHeader","headerFocus","isCollapsed","onToggleCollapse","FacetHeader","onClearFilters","focusAfterSearch","clear","deselectAll","headingLevel","headerRef","el","setTarget","render","hasError","firstSearchExecuted","Hidden","FacetPlaceholder","FacetContainer"],"sources":["src/components/common/facets/numeric-facet-common.tsx"],"sourcesContent":["import {Schema, StringValue} from '@coveo/bueno';\nimport {VNode, h} from '@stencil/core';\nimport {FocusTargetController} from '../../../utils/accessibility-utils';\nimport {getFieldValueCaption} from '../../../utils/field-utils';\nimport {randomID} from '../../../utils/utils';\nimport {initializePopover} from '../../search/facets/atomic-popover/popover-type';\nimport {NumberFormatter} from '../formats/format-common';\nimport {Hidden} from '../hidden';\nimport {AnyBindings} from '../interface/bindings';\nimport {\n  FacetConditionsManager,\n  NumericFacet,\n  NumericFacetValue,\n  NumericFilter,\n  NumericRangeOptions,\n  NumericRangeRequest,\n  SearchStatusState,\n} from '../types';\nimport {\n  shouldDisplayInputForFacetRange,\n  validateDependsOn,\n} from './facet-common';\nimport {FacetInfo} from './facet-common-store';\nimport {FacetContainer} from './facet-container/facet-container';\nimport {FacetHeader} from './facet-header/facet-header';\nimport {NumberInputType} from './facet-number-input/number-input-type';\nimport {FacetPlaceholder} from './facet-placeholder/facet-placeholder';\nimport {FacetValueCheckbox} from './facet-value-checkbox/facet-value-checkbox';\nimport {FacetValueLabelHighlight} from './facet-value-label-highlight/facet-value-label-highlight';\nimport {FacetValueLink} from './facet-value-link/facet-value-link';\nimport {FacetValuesGroup} from './facet-values-group/facet-values-group';\n\nexport interface NumericRangeWithLabel extends NumericRangeRequest {\n  label?: string;\n}\n\nexport type NumericFacetDisplayValues = 'checkbox' | 'link';\n\ninterface NumericFacetCommonOptions {\n  facetId?: string;\n  host: HTMLElement;\n  bindings: AnyBindings;\n  label: string;\n  field: string;\n  headingLevel: number;\n  displayValuesAs: NumericFacetDisplayValues;\n  dependsOn: Record<string, string>;\n  withInput?: NumberInputType;\n  numberOfValues: number;\n  setFacetId(id: string): string;\n  setManualRanges(\n    manualRanges: NumericRangeWithLabel[]\n  ): NumericRangeWithLabel[];\n  getFormatter(): NumberFormatter;\n  getSearchStatusState(): SearchStatusState;\n  buildDependenciesManager(): FacetConditionsManager;\n  buildNumericRange(config: NumericRangeOptions): NumericRangeRequest;\n  initializeFacetForInput(): NumericFacet;\n  initializeFacetForRange(): NumericFacet;\n  initializeFilter(): NumericFilter;\n}\n\ninterface NumericFacetCommonRenderProps {\n  hasError: boolean;\n  firstSearchExecuted: boolean;\n  isCollapsed: boolean;\n  headerFocus: FocusTargetController;\n  onToggleCollapse: () => boolean;\n}\n\nexport class NumericFacetCommon {\n  private facetId: string;\n  private filter?: NumericFilter;\n  private manualRanges: NumericRangeWithLabel[] = [];\n  private facetForRange?: NumericFacet;\n  private facetForInput?: NumericFacet;\n\n  private dependenciesManager: FacetConditionsManager;\n\n  constructor(private props: NumericFacetCommonOptions) {\n    this.validateProps();\n    this.facetId = this.determineFacetId;\n    this.props.setFacetId(this.facetId);\n\n    // Initialize two facets: One that is actually used to display values for end users, which only exists\n    // if we need to display something to the end user (ie: numberOfValues > 0)\n\n    // A second facet is initialized only to verify the results count. It is never used to display results to end user.\n    // It serves as a way to determine if the input should be rendered or not, independent of the ranges (manual or automatic) configured in the component\n    if (this.props.numberOfValues > 0) {\n      this.manualRanges = this.props.setManualRanges(\n        Array.from(\n          this.props.host.querySelectorAll('atomic-numeric-range')\n        ).map(({start, end, endInclusive, label}) => ({\n          ...this.props.buildNumericRange({start, end, endInclusive}),\n          label,\n        }))\n      );\n      this.facetForRange = this.props.initializeFacetForRange();\n    }\n\n    if (this.props.withInput) {\n      this.facetForInput = this.props.initializeFacetForInput();\n      this.filter = this.props.initializeFilter();\n    }\n\n    this.dependenciesManager = this.props.buildDependenciesManager();\n    this.registerFacetToStore();\n  }\n\n  private get determineFacetId() {\n    if (this.props.facetId) {\n      return this.props.facetId;\n    }\n\n    if (this.props.bindings.store.get('numericFacets')[this.props.field]) {\n      return randomID(`${this.props.field}_`);\n    }\n\n    return this.props.field;\n  }\n\n  private get formatter() {\n    return this.props.getFormatter();\n  }\n\n  private get enabled() {\n    return (\n      this.facetForRange?.state.enabled ?? this.filter?.state.enabled ?? true\n    );\n  }\n\n  private get hasValues() {\n    if (this.facetForInput?.state.values.length) {\n      return true;\n    }\n\n    return !!this.valuesToRender.length;\n  }\n\n  private get numberOfSelectedValues() {\n    if (this.filter?.state.range) {\n      return 1;\n    }\n\n    return (\n      this.facetForRange?.state.values.filter(({state}) => state === 'selected')\n        .length || 0\n    );\n  }\n\n  private get hasInputRange() {\n    return !!this.filter?.state.range;\n  }\n\n  private get shouldRenderFacet() {\n    return this.shouldRenderInput || this.shouldRenderValues;\n  }\n\n  private get searchStatusState() {\n    return this.props.getSearchStatusState();\n  }\n\n  private get shouldRenderInput() {\n    return shouldDisplayInputForFacetRange({\n      hasInputRange: this.hasInputRange,\n      searchStatusState: this.searchStatusState,\n      facetValues: this.facetForInput?.state.values || [],\n      hasInput: !!this.props.withInput,\n    });\n  }\n\n  private get shouldRenderValues() {\n    return (\n      !this.hasInputRange &&\n      this.props.numberOfValues > 0 &&\n      !!this.valuesToRender.length\n    );\n  }\n  private validateProps() {\n    new Schema({\n      displayValuesAs: new StringValue({constrainTo: ['checkbox', 'link']}),\n      withInput: new StringValue({constrainTo: ['integer', 'decimal']}),\n    }).validate({\n      displayValuesAs: this.props.displayValuesAs,\n      withInput: this.props.withInput,\n    });\n    validateDependsOn(this.props.dependsOn);\n  }\n\n  public disconnectedCallback() {\n    if (this.props.host.isConnected) {\n      return;\n    }\n    this.dependenciesManager?.stopWatching();\n  }\n\n  private get isHidden() {\n    return !this.shouldRenderFacet || !this.enabled;\n  }\n\n  private registerFacetToStore() {\n    const facetInfo: FacetInfo = {\n      label: () => this.props.bindings.i18n.t(this.props.label),\n      facetId: this.facetId!,\n      element: this.props.host,\n      isHidden: () => this.isHidden,\n    };\n\n    this.props.bindings.store.registerFacet('numericFacets', {\n      ...facetInfo,\n      format: (value) => this.formatFacetValue(value),\n    });\n\n    initializePopover(this.props.host, {\n      ...facetInfo,\n      hasValues: () => this.hasValues,\n      numberOfSelectedValues: () => this.numberOfSelectedValues,\n    });\n\n    if (this.filter) {\n      this.props.bindings.store.state.numericFacets[this.filter.state.facetId] =\n        this.props.bindings.store.state.numericFacets[this.facetId!];\n    }\n  }\n\n  private formatFacetValue(facetValue: NumericFacetValue) {\n    const manualRangeLabel = this.manualRanges.find((range) =>\n      this.areRangesEqual(range, facetValue)\n    )?.label;\n    return manualRangeLabel\n      ? getFieldValueCaption(\n          this.props.field,\n          manualRangeLabel,\n          this.props.bindings.i18n\n        )\n      : this.props.bindings.i18n.t('to', {\n          start: this.formatValue(facetValue.start),\n          end: this.formatValue(facetValue.end),\n        });\n  }\n\n  private formatValue(value: number) {\n    try {\n      return this.formatter(\n        value,\n        this.props.bindings.i18n.languages as string[]\n      );\n    } catch (error) {\n      this.props.bindings.engine.logger.error(\n        `atomic-numeric-facet facet value \"${value}\" could not be formatted correctly.`,\n        error\n      );\n      return value;\n    }\n  }\n\n  private areRangesEqual(\n    firstRange: NumericRangeRequest,\n    secondRange: NumericRangeRequest\n  ) {\n    return (\n      firstRange.start === secondRange.start &&\n      firstRange.end === secondRange.end &&\n      firstRange.endInclusive === secondRange.endInclusive\n    );\n  }\n\n  private renderValue(facetValue: NumericFacetValue, onClick: () => void) {\n    const displayValue = this.formatFacetValue(facetValue);\n    const isSelected = facetValue.state === 'selected';\n    switch (this.props.displayValuesAs) {\n      case 'checkbox':\n        return (\n          <FacetValueCheckbox\n            displayValue={displayValue}\n            numberOfResults={facetValue.numberOfResults}\n            isSelected={isSelected}\n            i18n={this.props.bindings.i18n}\n            onClick={onClick}\n          >\n            <FacetValueLabelHighlight\n              displayValue={displayValue}\n              isSelected={isSelected}\n            ></FacetValueLabelHighlight>\n          </FacetValueCheckbox>\n        );\n      case 'link':\n        return (\n          <FacetValueLink\n            displayValue={displayValue}\n            numberOfResults={facetValue.numberOfResults}\n            isSelected={isSelected}\n            i18n={this.props.bindings.i18n}\n            onClick={onClick}\n          >\n            <FacetValueLabelHighlight\n              displayValue={displayValue}\n              isSelected={isSelected}\n            ></FacetValueLabelHighlight>\n          </FacetValueLink>\n        );\n    }\n  }\n\n  private renderValuesContainer(children: VNode[]) {\n    return (\n      <FacetValuesGroup\n        i18n={this.props.bindings.i18n}\n        label={this.props.label}\n      >\n        <ul class=\"mt-3\" part=\"values\">\n          {children}\n        </ul>\n      </FacetValuesGroup>\n    );\n  }\n  private get valuesToRender() {\n    return (\n      this.facetForRange?.state.values.filter(\n        (value) => value.numberOfResults || value.state !== 'idle'\n      ) || []\n    );\n  }\n\n  private renderValues() {\n    return this.renderValuesContainer(\n      this.valuesToRender.map((value) =>\n        this.renderValue(value, () =>\n          this.props.displayValuesAs === 'link'\n            ? this.facetForRange!.toggleSingleSelect(value)\n            : this.facetForRange!.toggleSelect(value)\n        )\n      )\n    );\n  }\n\n  private renderNumberInput() {\n    return (\n      <atomic-facet-number-input\n        type={this.props.withInput!}\n        bindings={this.props.bindings}\n        label={this.props.label}\n        filter={this.filter!}\n        filterState={this.filter!.state}\n      ></atomic-facet-number-input>\n    );\n  }\n\n  private renderHeader(\n    headerFocus: FocusTargetController,\n    isCollapsed: boolean,\n    onToggleCollapse: () => void\n  ) {\n    return (\n      <FacetHeader\n        i18n={this.props.bindings.i18n}\n        label={this.props.label}\n        onClearFilters={() => {\n          headerFocus.focusAfterSearch();\n          if (this.filter?.state.range) {\n            this.filter?.clear();\n            return;\n          }\n          this.facetForRange?.deselectAll();\n        }}\n        numberOfSelectedValues={this.numberOfSelectedValues}\n        isCollapsed={isCollapsed}\n        headingLevel={this.props.headingLevel}\n        onToggleCollapse={onToggleCollapse}\n        headerRef={(el) => headerFocus.setTarget(el)}\n      ></FacetHeader>\n    );\n  }\n\n  public render({\n    hasError,\n    firstSearchExecuted,\n    isCollapsed,\n    headerFocus,\n    onToggleCollapse,\n  }: NumericFacetCommonRenderProps) {\n    if (hasError || !this.enabled) {\n      return <Hidden></Hidden>;\n    }\n\n    if (!firstSearchExecuted) {\n      return (\n        <FacetPlaceholder\n          numberOfValues={this.props.numberOfValues}\n          isCollapsed={isCollapsed}\n        ></FacetPlaceholder>\n      );\n    }\n\n    if (!this.shouldRenderFacet) {\n      return <Hidden></Hidden>;\n    }\n\n    return (\n      <FacetContainer>\n        {this.renderHeader(headerFocus, isCollapsed, onToggleCollapse)}\n        {!isCollapsed && [\n          this.shouldRenderValues && this.renderValues(),\n          this.shouldRenderInput && this.renderNumberInput(),\n        ]}\n      </FacetContainer>\n    );\n  }\n}\n"],"mappings":"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"}