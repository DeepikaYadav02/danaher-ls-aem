import{r as t,h as i,g as e}from"./p-591772f1.js";import{m as r}from"./p-d2151deb.js";import{I as s}from"./p-a096f4ab.js";import{f as a}from"./p-b0f98d39.js";import{R as o}from"./p-0c1fa2de.js";import"./p-92adf573.js";import"./p-a5540571.js";import"./p-eab67c09.js";const n="atomic-result-image{display:grid;place-items:center;grid-template-rows:100%;width:100%;height:100%}atomic-result-image img{width:100%;height:100%;-o-object-fit:contain;object-fit:contain}";var l=function(t,e,i,a){var r,s=arguments.length,l=s<3?e:null===a?a=Object.getOwnPropertyDescriptor(e,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(t,e,i,a);else for(var o=t.length-1;o>=0;o--)(r=t[o])&&(l=(s<3?r(l):s>3?r(e,i,l):r(e,i))||l);return s>3&&l&&Object.defineProperty(e,i,l),l};const h=class{constructor(e){t(this,e),this.useFallback=!1,this.useFallback=!1,this.field=void 0,this.fallback=void 0}get url(){const t=r.getResultProperty(this.result,this.field);return Array.isArray(t)?t[0]:t}logWarning(t){this.bindings.engine.logger.warn(t,this.host)}handleImageError(){const t=`The image url "${this.url}" is not valid or could not be loaded. You might want to add a "fallback" property.`;this.fallback?this.useFallback=!0:this.logWarning(t)}handleMissingFallback(t){return this.fallback?this.fallback:(this.logWarning(t),this.host.remove(),null)}validateUrl(t){if(!t){const t=`"${this.field}" is missing. Please review your indexation. You might want to add a "fallback" property.`;return this.handleMissingFallback(t)}if("string"!=typeof t){const t=`Expected "${this.field}" to be a text field. Please review your indexation. You might want to add a "fallback" property.`;return this.handleMissingFallback(t)}return t}render(){let t=this.useFallback?this.fallback:this.url;if(this.useFallback||(t=this.validateUrl(t),t))return i("img",{alt:`${this.field} image`,src:a(t),onError:()=>this.handleImageError(),loading:"lazy"})}get host(){return e(this)}};l([s()],h.prototype,"bindings",void 0),l([o()],h.prototype,"result",void 0),h.style=n;export{h as atomic_result_image};