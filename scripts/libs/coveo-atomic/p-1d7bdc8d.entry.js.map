{"version":3,"names":["atomicRatingRangeFacetCss","AtomicRatingRangeFacet","this","label","numberOfIntervals","maxValueInIndex","minValueInIndex","icon","Star","isCollapsed","headingLevel","filterFacetCount","injectionDepth","dependsOn","validateProps","validateDependsOn","focusTarget","headerFocus","FocusTargetController","initialize","searchStatus","buildSearchStatus","bindings","engine","initializeFacet","initializeDependenciesManager","disconnectedCallback","host","isConnected","_a","dependenciesManager","stopWatching","isHidden","valuesToRender","length","searchStatusState","hasError","facet","state","enabled","options","facetId","field","numberOfValues","currentValues","generateCurrentValues","sortCriteria","generateAutomaticRanges","buildNumericFacet","facetInfo","i18n","t","element","store","registerFacet","format","value","formatFacetValue","content","ratingContent","initializePopover","hasValues","numberOfSelectedValues","scaleFactor","facetState","values","filter","buildFacetConditionsManager","conditions","parseDependsOn","i","push","buildNumericRange","start","Math","round","end","endInclusive","facetValue","count","h","class","Rating","numberOfTotalIcons","numberOfActiveIcons","renderLabelText","renderHeader","FacetHeader","onClearFilters","focusAfterSearch","deselectAll","onToggleCollapse","headerRef","el","setTarget","part","renderValue","onClick","displayValue","isSelected","FacetValueLink","numberOfResults","renderValuesContainer","children","FacetValuesGroup","renderValues","map","toggleSingleSelect","render","Hidden","firstSearchExecuted","FacetPlaceholder","FacetContainer","__decorate","InitializeBindings","BindStateToController","MapProp"],"sources":["src/components/search/facets/atomic-rating-range-facet/atomic-rating-range-facet.pcss?tag=atomic-rating-range-facet&encapsulation=shadow","src/components/search/facets/atomic-rating-range-facet/atomic-rating-range-facet.tsx"],"sourcesContent":["@import '../../../common/facets/facet-common.pcss';\n@import '../../atomic-rating/atomic-rating.pcss';\n","import {\n  NumericFacet,\n  buildNumericFacet,\n  NumericFacetState,\n  NumericFacetOptions,\n  SearchStatus,\n  SearchStatusState,\n  buildSearchStatus,\n  NumericFacetValue,\n  NumericRangeRequest,\n  buildNumericRange,\n  buildFacetConditionsManager,\n  FacetConditionsManager,\n} from '@coveo/headless';\nimport {Component, h, State, Prop, VNode, Element} from '@stencil/core';\nimport Star from '../../../../images/star.svg';\nimport {FocusTargetController} from '../../../../utils/accessibility-utils';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../../utils/initialization-utils';\nimport {MapProp} from '../../../../utils/props-utils';\nimport {\n  parseDependsOn,\n  validateDependsOn,\n} from '../../../common/facets/facet-common';\nimport {BaseFacet} from '../../../common/facets/facet-common';\nimport {FacetInfo} from '../../../common/facets/facet-common-store';\nimport {FacetContainer} from '../../../common/facets/facet-container/facet-container';\nimport {FacetHeader} from '../../../common/facets/facet-header/facet-header';\nimport {FacetPlaceholder} from '../../../common/facets/facet-placeholder/facet-placeholder';\nimport {FacetValueLink} from '../../../common/facets/facet-value-link/facet-value-link';\nimport {FacetValuesGroup} from '../../../common/facets/facet-values-group/facet-values-group';\nimport {Hidden} from '../../../common/hidden';\nimport {Rating} from '../../atomic-rating/atomic-rating';\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\nimport {initializePopover} from '../atomic-popover/popover-type';\n\n/**\n * A facet is a list of values for a certain field occurring in the results, ordered using a configurable criteria (e.g., number of occurrences).\n * An `atomic-rating-range-facet` displays a facet of the results for the current query as ratings.\n * It only supports numeric fields.\n *\n * @part facet - The wrapper for the entire facet.\n * @part placeholder - The placeholder shown before the first search is executed.\n *\n * @part label-button - The button that displays the label and toggles to expand or collapse the facet.\n * @part label-button-icon - The label button icon.\n * @part clear-button - The button that resets the actively selected facet values.\n * @part clear-button-icon - The clear button icon.\n *\n * @part values - The facet values container.\n * @part value-label - The facet value label, common for all displays.\n * @part value-count - The facet value count, common for all displays.\n *\n * @part value-link - The facet value when display is 'link'.\n * @part value-link-selected - The selected facet value when display is 'link'.\n * @part value-box - The facet value when display is 'box'.\n * @part value-box-selected - The selected facet value when display is 'box'.\n */\n@Component({\n  tag: 'atomic-rating-range-facet',\n  styleUrl: 'atomic-rating-range-facet.pcss',\n  shadow: true,\n})\nexport class AtomicRatingRangeFacet\n  implements InitializableComponent, BaseFacet<NumericFacet>\n{\n  @InitializeBindings() public bindings!: Bindings;\n  public facet!: NumericFacet;\n  private dependenciesManager?: FacetConditionsManager;\n  public searchStatus!: SearchStatus;\n  @Element() private host!: HTMLElement;\n\n  @BindStateToController('facet')\n  @State()\n  public facetState!: NumericFacetState;\n  @BindStateToController('searchStatus')\n  @State()\n  public searchStatusState!: SearchStatusState;\n  @State() public error!: Error;\n\n  /**\n   * Specifies a unique identifier for the facet.\n   */\n  @Prop({mutable: true, reflect: true}) public facetId?: string;\n  /**\n   * The non-localized label for the facet.\n   * Used in the `atomic-breadbox` component through the bindings store.\n   */\n  @Prop({reflect: true}) public label = 'no-label';\n  /**\n   * The field whose values you want to display in the facet.\n   */\n  @Prop({reflect: true}) public field!: string;\n  /**\n   * The number of options to display in the facet. If `maxValueInIndex` isn't specified, it will be assumed that this is also the maximum number of rating icons.\n   */\n  @Prop({reflect: true}) public numberOfIntervals = 5;\n  /**\n   * The maximum value in the field's index and the number of rating icons to display in the facet. This property will default to the same value as `numberOfIntervals`, if not assigned a value.\n   */\n  @Prop({reflect: true}) public maxValueInIndex = this.numberOfIntervals;\n  /**\n   * The minimum value of the field.\n   */\n  @Prop({reflect: true}) public minValueInIndex = 1;\n  /**\n   * The SVG icon to use to display the rating.\n   *\n   * - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location.\n   * - Use a value that starts with `assets://`, to display an icon from the Atomic package.\n   * - Use a stringified SVG to display it directly.\n   *\n   * When using a custom icon, at least part of your icon should have the color set to `fill=\"currentColor\"`.\n   * This part of the SVG will take on the colors set in the following [variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties):\n   *\n   * - `--atomic-rating-icon-active-color`\n   * - `--atomic-rating-icon-inactive-color`\n   */\n  @Prop({reflect: true}) public icon = Star;\n  /**\n   * Specifies whether the facet is collapsed. When the facet is the child of an `atomic-facet-manager` component, the facet manager controls this property.\n   */\n  @Prop({reflect: true, mutable: true}) public isCollapsed = false;\n  /**\n   * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the heading over the facet, from 1 to 6.\n   */\n  @Prop({reflect: true}) public headingLevel = 0;\n  /**\n   * Whether to exclude the parents of folded results when estimating the result count for each facet value.\n   */\n  @Prop({reflect: true}) public filterFacetCount = true;\n  /**\n   * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values.\n   * Note: A high injectionDepth may negatively impact the facet request performance.\n   * Minimum: `0`\n   * Default: `1000`\n   */\n  @Prop({reflect: true}) public injectionDepth = 1000;\n\n  /**\n   * The required facets and values for this facet to be displayed.\n   * Examples:\n   * ```html\n   * <atomic-facet facet-id=\"abc\" field=\"objecttype\" ...></atomic-facet>\n   *\n   * <!-- To show the facet when any value is selected in the facet with id \"abc\": -->\n   * <atomic-rating-range-facet\n   *   depends-on-abc\n   *   ...\n   * ></atomic-rating-range-facet>\n   *\n   * <!-- To show the facet when value \"doc\" is selected in the facet with id \"abc\": -->\n   * <atomic-rating-range-facet\n   *   depends-on-abc=\"doc\"\n   *   ...\n   * ></atomic-rating-range-facet>\n   * ```\n   */\n  @MapProp() @Prop() public dependsOn: Record<string, string> = {};\n\n  private headerFocus?: FocusTargetController;\n\n  private validateProps() {\n    validateDependsOn(this.dependsOn);\n  }\n\n  private get focusTarget() {\n    if (!this.headerFocus) {\n      this.headerFocus = new FocusTargetController(this);\n    }\n    return this.headerFocus;\n  }\n\n  public initialize() {\n    this.validateProps();\n    this.searchStatus = buildSearchStatus(this.bindings.engine);\n    this.initializeFacet();\n    this.initializeDependenciesManager();\n  }\n\n  public disconnectedCallback() {\n    if (this.host.isConnected) {\n      return;\n    }\n    this.dependenciesManager?.stopWatching();\n  }\n\n  private get isHidden() {\n    return (\n      !this.valuesToRender.length ||\n      this.searchStatusState.hasError ||\n      !this.facet.state.enabled\n    );\n  }\n\n  private initializeFacet() {\n    const options: NumericFacetOptions = {\n      facetId: this.facetId,\n      field: this.field,\n      numberOfValues: this.numberOfIntervals,\n      currentValues: this.generateCurrentValues(),\n      sortCriteria: 'descending',\n      generateAutomaticRanges: false,\n      filterFacetCount: this.filterFacetCount,\n      injectionDepth: this.injectionDepth,\n    };\n    this.facet = buildNumericFacet(this.bindings.engine, {options});\n    this.facetId = this.facet.state.facetId;\n    const facetInfo: FacetInfo = {\n      label: () => this.bindings.i18n.t(this.label),\n      facetId: this.facetId!,\n      element: this.host,\n      isHidden: () => this.isHidden,\n    };\n    this.bindings.store.registerFacet('numericFacets', {\n      ...facetInfo,\n      format: (value) => this.formatFacetValue(value),\n      content: (value) => this.ratingContent(value),\n    });\n    initializePopover(this.host, {\n      ...facetInfo,\n      hasValues: () => !!this.valuesToRender.length,\n      numberOfSelectedValues: () => this.numberOfSelectedValues,\n    });\n  }\n\n  private get scaleFactor() {\n    return this.maxValueInIndex / this.numberOfIntervals;\n  }\n\n  private get numberOfSelectedValues() {\n    return this.facetState.values.filter(({state}) => state === 'selected')\n      .length;\n  }\n\n  private initializeDependenciesManager() {\n    this.dependenciesManager = buildFacetConditionsManager(\n      this.bindings.engine,\n      {\n        facetId: this.facetId!,\n        conditions: parseDependsOn(this.dependsOn),\n      }\n    );\n  }\n\n  private generateCurrentValues() {\n    const currentValues: NumericRangeRequest[] = [];\n    for (let i = this.minValueInIndex; i <= this.numberOfIntervals; i++) {\n      currentValues.push(\n        buildNumericRange({\n          start: Math.round(i * this.scaleFactor * 100) / 100,\n          end: Math.round(this.maxValueInIndex * 100) / 100,\n          endInclusive: true,\n        })\n      );\n    }\n    return currentValues;\n  }\n\n  private formatFacetValue(facetValue: NumericFacetValue) {\n    if (facetValue.start === this.maxValueInIndex) {\n      return this.bindings.i18n.t('stars-only', {\n        count: facetValue.start,\n      });\n    }\n    return this.bindings.i18n.t('stars-range', {\n      value: facetValue.start,\n      count: this.maxValueInIndex,\n    });\n  }\n\n  private ratingContent(facetValue: NumericFacetValue) {\n    return (\n      <div class=\"flex items-center\">\n        <Rating\n          i18n={this.bindings.i18n}\n          numberOfTotalIcons={this.maxValueInIndex}\n          numberOfActiveIcons={facetValue.start}\n          icon={this.icon}\n        ></Rating>\n        {this.renderLabelText(facetValue)}\n      </div>\n    );\n  }\n\n  private renderHeader() {\n    return (\n      <FacetHeader\n        i18n={this.bindings.i18n}\n        label={this.label}\n        onClearFilters={() => {\n          this.focusTarget.focusAfterSearch();\n          this.facet.deselectAll();\n        }}\n        numberOfSelectedValues={this.numberOfSelectedValues}\n        isCollapsed={this.isCollapsed}\n        headingLevel={this.headingLevel}\n        onToggleCollapse={() => (this.isCollapsed = !this.isCollapsed)}\n        headerRef={(el) => this.focusTarget.setTarget(el)}\n      ></FacetHeader>\n    );\n  }\n\n  private renderLabelText(facetValue: NumericFacetValue) {\n    return (\n      <span\n        part=\"value-label\"\n        class={`ml-1 flex items-center truncate group-focus:text-primary group-hover:text-primary ${\n          facetValue.state === 'selected' ? 'font-bold' : ''\n        }`}\n      >\n        {facetValue.start === this.maxValueInIndex ? (\n          <span>{this.bindings.i18n.t('only')}</span>\n        ) : (\n          this.bindings.i18n.t('and-up')\n        )}\n      </span>\n    );\n  }\n\n  private renderValue(facetValue: NumericFacetValue, onClick: () => void) {\n    const displayValue = this.formatFacetValue(facetValue);\n    const isSelected = facetValue.state === 'selected';\n    return (\n      <FacetValueLink\n        displayValue={displayValue}\n        numberOfResults={facetValue.numberOfResults}\n        isSelected={isSelected}\n        i18n={this.bindings.i18n}\n        onClick={onClick}\n      >\n        {this.ratingContent(facetValue)}\n      </FacetValueLink>\n    );\n  }\n\n  private renderValuesContainer(children: VNode[]) {\n    return (\n      <FacetValuesGroup i18n={this.bindings.i18n} label={this.label}>\n        <ul class=\"mt-3\" part=\"values\">\n          {children}\n        </ul>\n      </FacetValuesGroup>\n    );\n  }\n\n  private renderValues() {\n    return this.renderValuesContainer(\n      this.valuesToRender.map((value) =>\n        this.renderValue(value, () => this.facet.toggleSingleSelect(value))\n      )\n    );\n  }\n\n  private get valuesToRender() {\n    return this.facet.state.values.filter(\n      (value) => value.numberOfResults || value.state !== 'idle'\n    );\n  }\n\n  public render() {\n    if (this.searchStatusState.hasError || !this.facet.state.enabled) {\n      return <Hidden></Hidden>;\n    }\n\n    if (!this.searchStatusState.firstSearchExecuted) {\n      return (\n        <FacetPlaceholder\n          numberOfValues={this.numberOfIntervals}\n          isCollapsed={this.isCollapsed}\n        ></FacetPlaceholder>\n      );\n    }\n\n    if (!this.valuesToRender.length) {\n      return <Hidden></Hidden>;\n    }\n\n    return (\n      <FacetContainer>\n        {this.renderHeader()}\n        {!this.isCollapsed && this.renderValues()}\n      </FacetContainer>\n    );\n  }\n}\n"],"mappings":"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"}