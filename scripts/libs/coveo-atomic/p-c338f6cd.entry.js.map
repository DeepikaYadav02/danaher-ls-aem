{"version":3,"names":["atomicInsightNumericFacetCss","AtomicInsightNumericFacet","this","manualRanges","formatter","defaultNumberFormatter","label","numberOfValues","sortCriteria","rangeAlgorithm","displayValuesAs","isCollapsed","headingLevel","filterFacetCount","injectionDepth","dependsOn","initialize","numericFacetCommon","NumericFacetCommon","facetId","host","bindings","field","withInput","setFacetId","id","setManualRanges","getFormatter","getSearchStatusState","searchStatusState","buildDependenciesManager","buildInsightFacetConditionsManager","engine","_b","_a","facetForRange","state","filter","conditions","parseDependsOn","buildNumericRange","buildInsightNumericRange","initializeFacetForInput","initializeFacetForRange","initializeFilter","searchStatus","buildInsightSearchStatus","focusTarget","headerFocus","FocusTargetController","disconnectedCallback","facetForInput","buildInsightNumericFacet","options","generateAutomaticRanges","currentValues","length","buildInsightNumericFilter","setFormat","event","preventDefault","stopPropagation","detail","applyNumberInput","dispatch","loadInsightNumericFacetSetActions","deselectAllNumericFacetValues","render","h","FacetPlaceholder","hasError","firstSearchExecuted","onToggleCollapse","__decorate","InitializeBindings","BindStateToController","MapProp"],"sources":["src/components/insight/atomic-insight-numeric-facet/atomic-insight-numeric-facet.pcss?tag=atomic-insight-numeric-facet&encapsulation=shadow","src/components/insight/atomic-insight-numeric-facet/atomic-insight-numeric-facet.tsx"],"sourcesContent":["@import '../../common/facets/numeric-facet-common.pcss';\n","import {Component, Element, h, Listen, Prop, State} from '@stencil/core';\nimport {\n  buildInsightFacetConditionsManager,\n  buildInsightNumericFacet,\n  buildInsightNumericFilter,\n  buildInsightNumericRange,\n  buildInsightSearchStatus,\n  InsightNumericFacet,\n  InsightNumericFacetState,\n  InsightNumericFilter,\n  InsightNumericFilterState,\n  InsightRangeFacetRangeAlgorithm,\n  InsightRangeFacetSortCriterion,\n  InsightSearchStatus,\n  InsightSearchStatusState,\n  loadInsightNumericFacetSetActions,\n} from '..';\nimport {FocusTargetController} from '../../../utils/accessibility-utils';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../utils/initialization-utils';\nimport {MapProp} from '../../../utils/props-utils';\nimport {BaseFacet, parseDependsOn} from '../../common/facets/facet-common';\nimport {NumberInputType} from '../../common/facets/facet-number-input/number-input-type';\nimport {FacetPlaceholder} from '../../common/facets/facet-placeholder/facet-placeholder';\nimport {\n  NumericFacetCommon,\n  NumericFacetDisplayValues,\n  NumericRangeWithLabel,\n} from '../../common/facets/numeric-facet-common';\nimport {\n  defaultNumberFormatter,\n  NumberFormatter,\n} from '../../common/formats/format-common';\nimport {InsightBindings} from '../atomic-insight-interface/atomic-insight-interface';\n\n/**\n * @internal\n */\n@Component({\n  tag: 'atomic-insight-numeric-facet',\n  styleUrl: './atomic-insight-numeric-facet.pcss',\n  shadow: true,\n})\nexport class AtomicInsightNumericFacet\n  implements\n    InitializableComponent<InsightBindings>,\n    BaseFacet<InsightNumericFacet>\n{\n  @InitializeBindings() public bindings!: InsightBindings;\n  public facetForRange?: InsightNumericFacet;\n  public facetForInput?: InsightNumericFacet;\n  public filter?: InsightNumericFilter;\n  public searchStatus!: InsightSearchStatus;\n  private manualRanges: NumericRangeWithLabel[] = [];\n  @Element() private host!: HTMLElement;\n  private formatter: NumberFormatter = defaultNumberFormatter;\n  private numericFacetCommon?: NumericFacetCommon;\n  @BindStateToController('facetForRange')\n  @State()\n  public facetState!: InsightNumericFacetState;\n  @BindStateToController('filter')\n  @State()\n  public filterState?: InsightNumericFilterState;\n  @BindStateToController('searchStatus')\n  @State()\n  public searchStatusState!: InsightSearchStatusState;\n  @State() public error!: Error;\n  @BindStateToController('facetForInput')\n  @State()\n  public facetForInputState?: InsightNumericFacetState;\n\n  /**\n   * Specifies a unique identifier for the facet.\n   */\n  @Prop({mutable: true, reflect: true}) public facetId?: string;\n  /**\n   * The non-localized label for the facet.\n   * Used in the `atomic-breadbox` component through the bindings store.\n   */\n  @Prop({reflect: true}) public label = 'no-label';\n  /**\n   * The field whose values you want to display in the facet.\n   */\n  @Prop({reflect: true}) public field!: string;\n  /**\n   * The number of values to request for this facet, when there are no manual ranges.\n   * If the number of values is 0, no ranges will be displayed.\n   */\n  @Prop({reflect: true}) public numberOfValues = 8;\n  /**\n   * Whether this facet should contain an input allowing users to set custom ranges.\n   * Depending on the field, the input can allow either decimal or integer values.\n   */\n  @Prop({reflect: true}) public withInput?: NumberInputType;\n  /**\n   * The sort criterion to apply to the returned facet values.\n   * Possible values are 'ascending' and 'descending'.\n   */\n  @Prop({reflect: true}) public sortCriteria: InsightRangeFacetSortCriterion =\n    'ascending';\n  /**\n   * The algorithm that's used for generating the ranges of this facet when they aren't manually defined. The default value of `\"equiprobable\"` generates facet ranges which vary in size but have a more balanced number of results within each range. The value of `\"even\"` generates equally sized facet ranges across all of the results.\n   */\n  @Prop({reflect: true})\n  public rangeAlgorithm: InsightRangeFacetRangeAlgorithm = 'equiprobable';\n  /**\n   * Whether to display the facet values as checkboxes (multiple selection) or links (single selection).\n   * Possible values are 'checkbox' and 'link'.\n   */\n  @Prop({reflect: true}) public displayValuesAs: NumericFacetDisplayValues =\n    'checkbox';\n  /**\n   * Specifies if the facet is collapsed.\n   */\n  @Prop({reflect: true, mutable: true}) public isCollapsed = false;\n  /**\n   * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the heading over the facet, from 1 to 6.\n   */\n  @Prop({reflect: true}) public headingLevel = 0;\n  /**\n   * Whether to exclude the parents of folded results when estimating the result count for each facet value.\n   */\n  @Prop({reflect: true}) public filterFacetCount = true;\n  /**\n   * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values.\n   * Note: A high injectionDepth may negatively impact the facet request performance.\n   * Minimum: `0`\n   * Default: `1000`\n   */\n  @Prop({reflect: true}) public injectionDepth = 1000;\n\n  /**\n   * The required facets and values for this facet to be displayed.\n   * Examples:\n   * ```html\n   * <atomic-insight-facet facet-id=\"abc\" field=\"objecttype\" ...></atomic-insight-facet>\n   *\n   * <!-- To show the facet when any value is selected in the facet with id \"abc\": -->\n   * <atomic-insight-numeric-facet\n   *   depends-on-abc\n   *   ...\n   * ></atomic-insight-numeric-facet>\n   *\n   * <!-- To show the facet when value \"doc\" is selected in the facet with id \"abc\": -->\n   * <atomic-insight-numeric-facet\n   *   depends-on-abc=\"doc\"\n   *   ...\n   * ></atomic-insight-numeric-facet>\n   * ```\n   */\n  @MapProp() @Prop() public dependsOn: Record<string, string> = {};\n\n  private headerFocus?: FocusTargetController;\n\n  public initialize() {\n    this.numericFacetCommon = new NumericFacetCommon({\n      facetId: this.facetId,\n      host: this.host,\n      bindings: this.bindings,\n      label: this.label,\n      field: this.field,\n      headingLevel: this.headingLevel,\n      dependsOn: this.dependsOn,\n      displayValuesAs: this.displayValuesAs,\n      withInput: this.withInput,\n      numberOfValues: this.numberOfValues,\n      setFacetId: (id: string) => (this.facetId = id),\n      setManualRanges: (manualRanges) => (this.manualRanges = manualRanges),\n      getFormatter: () => this.formatter,\n      getSearchStatusState: () => this.searchStatusState,\n      buildDependenciesManager: () =>\n        buildInsightFacetConditionsManager(this.bindings.engine, {\n          facetId:\n            this.facetForRange?.state.facetId ?? this.filter!.state.facetId,\n          conditions: parseDependsOn(this.dependsOn),\n        }),\n      buildNumericRange: buildInsightNumericRange,\n      initializeFacetForInput: () => this.initializeFacetForInput(),\n      initializeFacetForRange: () => this.initializeFacetForRange(),\n      initializeFilter: () => this.initializeFilter(),\n    });\n    this.searchStatus = buildInsightSearchStatus(this.bindings.engine);\n  }\n\n  private get focusTarget(): FocusTargetController {\n    if (!this.headerFocus) {\n      this.headerFocus = new FocusTargetController(this);\n    }\n    return this.headerFocus;\n  }\n\n  public disconnectedCallback() {\n    this.numericFacetCommon?.disconnectedCallback();\n  }\n\n  private initializeFacetForInput() {\n    this.facetForInput = buildInsightNumericFacet(this.bindings.engine, {\n      options: {\n        facetId: `${this.facetId}_input_range`,\n        numberOfValues: 1,\n        generateAutomaticRanges: true,\n        field: this.field,\n        sortCriteria: this.sortCriteria,\n        rangeAlgorithm: this.rangeAlgorithm,\n        filterFacetCount: this.filterFacetCount,\n        injectionDepth: this.injectionDepth,\n      },\n    });\n\n    return this.facetForInput;\n  }\n\n  private initializeFacetForRange() {\n    this.facetForRange = buildInsightNumericFacet(this.bindings.engine, {\n      options: {\n        facetId: this.facetId,\n        field: this.field,\n        numberOfValues: this.numberOfValues,\n        sortCriteria: this.sortCriteria,\n        rangeAlgorithm: this.rangeAlgorithm,\n        currentValues: this.manualRanges,\n        generateAutomaticRanges: !this.manualRanges.length,\n        filterFacetCount: this.filterFacetCount,\n        injectionDepth: this.injectionDepth,\n      },\n    });\n\n    return this.facetForRange;\n  }\n\n  private initializeFilter() {\n    this.filter = buildInsightNumericFilter(this.bindings.engine, {\n      options: {\n        facetId: `${this.facetId}_input`,\n        field: this.field,\n      },\n    });\n\n    if (!this.facetId) {\n      this.facetId = this.filter.state.facetId;\n    }\n    return this.filter;\n  }\n\n  @Listen('atomic/numberFormat')\n  public setFormat(event: CustomEvent<NumberFormatter>) {\n    event.preventDefault();\n    event.stopPropagation();\n    this.formatter = event.detail;\n  }\n\n  @Listen('atomic/numberInputApply')\n  public applyNumberInput() {\n    this.facetId &&\n      this.bindings.engine.dispatch(\n        loadInsightNumericFacetSetActions(\n          this.bindings.engine\n        ).deselectAllNumericFacetValues(this.facetId)\n      );\n  }\n\n  public render() {\n    if (!this.numericFacetCommon) {\n      return (\n        <FacetPlaceholder\n          numberOfValues={this.numberOfValues}\n          isCollapsed={this.isCollapsed}\n        ></FacetPlaceholder>\n      );\n    }\n    return this.numericFacetCommon.render({\n      hasError: this.searchStatusState.hasError,\n      firstSearchExecuted: this.searchStatusState.firstSearchExecuted,\n      isCollapsed: this.isCollapsed,\n      headerFocus: this.focusTarget,\n      onToggleCollapse: () => (this.isCollapsed = !this.isCollapsed),\n    });\n  }\n}\n"],"mappings":"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"}