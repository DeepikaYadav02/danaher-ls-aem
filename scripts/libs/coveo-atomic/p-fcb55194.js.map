{"version":3,"names":["ResultTemplateProvider","constructor","props","this","registerResultTemplates","makeDefaultTemplate","content","document","createDocumentFragment","linkEl","createElement","appendChild","conditions","resultTemplatesManager","buildResultTemplatesManager","bindings","engine","customTemplates","Promise","all","templateElements","map","async","resultTemplateElement","template","getTemplate","setTemplateHasError","templates","length","includeDefaultTemplate","concat","filter","registerTemplates","setResultTemplateRegistered","getTemplateContent","result","selectTemplate","extractUnfoldedResult","templatesRegistered","getResultTemplateRegistered","hasError","getTemplateHasError"],"sources":["src/components/common/result-list/result-template-provider.ts"],"sourcesContent":["import {\n  ResultTemplate,\n  ResultTemplatesManager,\n  buildResultTemplatesManager,\n} from '@coveo/headless';\nimport {AnyBindings} from '../interface/bindings';\nimport {AnyResult, extractUnfoldedResult} from '../interface/result';\nimport {TemplateContent} from '../result-templates/result-template-common';\n\nexport interface TemplateElement extends HTMLElement {\n  getTemplate(): Promise<ResultTemplate<DocumentFragment> | null>;\n}\n\nexport interface ResultTemplateProviderProps {\n  bindings: AnyBindings;\n  getResultTemplateRegistered(): boolean;\n  setResultTemplateRegistered(value: boolean): void;\n  getTemplateHasError(): boolean;\n  setTemplateHasError(value: boolean): void;\n  templateElements: TemplateElement[];\n  includeDefaultTemplate: boolean;\n}\n\nexport class ResultTemplateProvider {\n  private resultTemplatesManager!: ResultTemplatesManager<TemplateContent>;\n\n  constructor(private props: ResultTemplateProviderProps) {\n    this.registerResultTemplates();\n  }\n\n  private makeDefaultTemplate(): ResultTemplate<DocumentFragment> {\n    const content = document.createDocumentFragment();\n    const linkEl = document.createElement('atomic-result-link');\n    content.appendChild(linkEl);\n    return {\n      content,\n      conditions: [],\n    };\n  }\n\n  private async registerResultTemplates() {\n    this.resultTemplatesManager = buildResultTemplatesManager(\n      this.props.bindings.engine\n    );\n\n    const customTemplates = await Promise.all(\n      this.props.templateElements.map(async (resultTemplateElement) => {\n        const template = await resultTemplateElement.getTemplate();\n        if (!template) {\n          this.props.setTemplateHasError(true);\n        }\n        return template;\n      })\n    );\n\n    const templates = (\n      !customTemplates.length && this.props.includeDefaultTemplate\n        ? [this.makeDefaultTemplate()]\n        : []\n    ).concat(\n      customTemplates.filter(\n        (template) => template\n      ) as ResultTemplate<DocumentFragment>[]\n    );\n\n    this.resultTemplatesManager.registerTemplates(...templates);\n    this.props.setResultTemplateRegistered(true);\n  }\n\n  public getTemplateContent(result: AnyResult) {\n    return this.resultTemplatesManager.selectTemplate(\n      extractUnfoldedResult(result)\n    )!;\n  }\n\n  public get templatesRegistered() {\n    return this.props.getResultTemplateRegistered();\n  }\n\n  public get hasError() {\n    return this.props.getTemplateHasError();\n  }\n}\n"],"mappings":"8EAuBaA,EAGX,WAAAC,CAAoBC,GAAAC,KAAAD,QAClBC,KAAKC,yB,CAGC,mBAAAC,GACN,MAAMC,EAAUC,SAASC,yBACzB,MAAMC,EAASF,SAASG,cAAc,sBACtCJ,EAAQK,YAAYF,GACpB,MAAO,CACLH,UACAM,WAAY,G,CAIR,6BAAMR,GACZD,KAAKU,uBAAyBC,EAC5BX,KAAKD,MAAMa,SAASC,QAGtB,MAAMC,QAAwBC,QAAQC,IACpChB,KAAKD,MAAMkB,iBAAiBC,KAAIC,MAAOC,IACrC,MAAMC,QAAiBD,EAAsBE,cAC7C,IAAKD,EAAU,CACbrB,KAAKD,MAAMwB,oBAAoB,K,CAEjC,OAAOF,CAAQ,KAInB,MAAMG,IACHV,EAAgBW,QAAUzB,KAAKD,MAAM2B,uBAClC,CAAC1B,KAAKE,uBACN,IACJyB,OACAb,EAAgBc,QACbP,GAAaA,KAIlBrB,KAAKU,uBAAuBmB,qBAAqBL,GACjDxB,KAAKD,MAAM+B,4BAA4B,K,CAGlC,kBAAAC,CAAmBC,GACxB,OAAOhC,KAAKU,uBAAuBuB,eACjCC,EAAsBF,G,CAI1B,uBAAWG,GACT,OAAOnC,KAAKD,MAAMqC,6B,CAGpB,YAAWC,GACT,OAAOrC,KAAKD,MAAMuC,qB"}