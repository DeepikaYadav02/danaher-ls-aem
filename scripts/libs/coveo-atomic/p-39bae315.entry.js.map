{"version":3,"names":["AtomicSearchBoxInstantResults","this","results","display","templateHasError","maxResultsPerQuery","density","imageSize","setRenderFunction","resultRenderingFunction","componentWillLoad","dispatchSearchBoxSuggestionsEvent","bindings","initialize","host","error","getLink","el","_b","_a","querySelector","shadowRoot","handleLinkClick","hasModifier","setTarget","value","setAttribute","initialTarget","getAttribute","click","renderItems","suggestedQuery","store","isMobile","instantResults","state","length","elements","map","result","key","encodeForDomAttribute","uniqueId","part","content","h","interactiveResult","buildInteractiveInstantResult","engine","options","resultTemplateProvider","getTemplateContent","stopPropagation","renderingFunction","ariaLabel","i18n","t","title","ariaLabelGenerator","call","interpolation","escapeValue","onSelect","e","link","target","ctrlKey","metaKey","showAllText","push","class","getClassNameForButtonStyle","clearSuggestions","searchBoxController","updateText","q","submit","buildInstantResults","ResultTemplateProvider","includeDefaultTemplate","templateElements","Array","from","querySelectorAll","getResultTemplateRegistered","setResultTemplateRegistered","getTemplateHasError","setTemplateHasError","position","parentNode","children","indexOf","panel","onSuggestedQueryChange","updateQuery","getSuggestionElements","console","warn","Promise","resolve","unsubscribe","subscribe","isLoading","render","element"],"sources":["src/components/search/search-box-suggestions/atomic-search-box-instant-results/atomic-search-box-instant-results.tsx"],"sourcesContent":["import {\n  buildInstantResults,\n  buildInteractiveInstantResult,\n  InstantResults,\n  Result,\n} from '@coveo/headless';\nimport {Component, Element, State, h, Prop, Method} from '@stencil/core';\nimport {InitializableComponent} from '../../../../utils/initialization-utils';\nimport {encodeForDomAttribute} from '../../../../utils/string-utils';\nimport {getClassNameForButtonStyle} from '../../../common/button-style';\nimport {\n  ResultDisplayDensity,\n  ResultDisplayImageSize,\n  ResultDisplayLayout,\n} from '../../../common/layout/display-options';\nimport {ResultRenderingFunction} from '../../../common/result-list/result-list-common-interface';\nimport {ResultTemplateProvider} from '../../../common/result-list/result-template-provider';\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\nimport {\n  dispatchSearchBoxSuggestionsEvent,\n  SearchBoxSuggestionElement,\n  SearchBoxSuggestions,\n  SearchBoxSuggestionsBindings,\n} from '../suggestions-common';\n\nexport type AriaLabelGenerator = (\n  bindings: Bindings,\n  result: Result\n) => string | undefined;\n\n/**\n * The `atomic-search-box-instant-results` component can be added as a child of an `atomic-search-box` component, allowing for the configuration of instant results behavior.\n *\n * This component does not support accessibility out-of-the-box. To do so, see [Instant Results Accessibility](https://docs.coveo.com/en/atomic/latest/usage/accessibility/#instant-results-accessibility).\n */\n@Component({\n  tag: 'atomic-search-box-instant-results',\n  shadow: true,\n})\nexport class AtomicSearchBoxInstantResults implements InitializableComponent {\n  public bindings!: SearchBoxSuggestionsBindings;\n  private resultRenderingFunction: ResultRenderingFunction;\n  private results: Result[] = [];\n  private resultTemplateProvider!: ResultTemplateProvider;\n  private instantResults!: InstantResults;\n  private display: ResultDisplayLayout = 'list';\n\n  @Element() public host!: HTMLElement;\n\n  @State() public error!: Error;\n  @State() private templateHasError = false;\n\n  /**\n   * Sets a rendering function to bypass the standard HTML template mechanism for rendering results.\n   * You can use this function while working with web frameworks that don't use plain HTML syntax, e.g., React, Angular or Vue.\n   *\n   * Do not use this method if you integrate Atomic in a plain HTML deployment.\n   *\n   * @param resultRenderingFunction\n   */\n  @Method() public async setRenderFunction(\n    resultRenderingFunction: ResultRenderingFunction\n  ) {\n    this.resultRenderingFunction = resultRenderingFunction;\n  }\n  /**\n   * The maximum number of results to show.\n   */\n  @Prop({reflect: true}) public maxResultsPerQuery = 4;\n  /**\n   * The spacing of various elements in the result list, including the gap between results, the gap between parts of a result, and the font sizes of different parts in a result.\n   */\n  @Prop({reflect: true}) public density: ResultDisplayDensity = 'normal';\n  /**\n   * The expected size of the image displayed in the results.\n   */\n  @Prop({reflect: true}) public imageSize: ResultDisplayImageSize = 'icon';\n  /**\n   * The callback to generate an [`aria-label`](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-label) for a given result so that accessibility tools can fully describe what's visually rendered by a result.\n   *\n   * By default, or if an empty string is returned, `result.title` is used.\n   */\n  @Prop() public ariaLabelGenerator?: AriaLabelGenerator;\n\n  public componentWillLoad() {\n    try {\n      dispatchSearchBoxSuggestionsEvent((bindings) => {\n        this.bindings = bindings;\n        return this.initialize();\n      }, this.host);\n    } catch (error) {\n      this.error = error as Error;\n    }\n  }\n\n  private getLink(el: HTMLElement): HTMLElement | null {\n    return (\n      el\n        ?.querySelector('atomic-result')\n        ?.shadowRoot?.querySelector('atomic-result-link a') || null\n    );\n  }\n\n  private handleLinkClick(el: HTMLElement, hasModifier: boolean) {\n    const setTarget = (value: string) => el.setAttribute('target', value);\n    const initialTarget = el.getAttribute('target');\n\n    hasModifier && setTarget('_blank');\n    el.click();\n    hasModifier && setTarget(initialTarget || '');\n\n    return true;\n  }\n\n  private renderItems(): SearchBoxSuggestionElement[] {\n    if (!this.bindings.suggestedQuery() || this.bindings.store.isMobile()) {\n      return [];\n    }\n    const results = this.instantResults.state.results.length\n      ? this.instantResults.state.results\n      : this.results;\n\n    const elements: SearchBoxSuggestionElement[] = results.map(\n      (result: Result) => ({\n        key: `instant-result-${encodeForDomAttribute(result.uniqueId)}`,\n        part: 'instant-results-item',\n        content: (\n          <atomic-result\n            key={`instant-result-${encodeForDomAttribute(result.uniqueId)}`}\n            part=\"outline\"\n            result={result}\n            interactiveResult={buildInteractiveInstantResult(\n              this.bindings.engine,\n              {\n                options: {result},\n              }\n            )}\n            display={this.display}\n            density={this.density}\n            imageSize={this.imageSize}\n            content={this.resultTemplateProvider.getTemplateContent(result)}\n            stopPropagation={false}\n            renderingFunction={this.resultRenderingFunction}\n          ></atomic-result>\n        ),\n        ariaLabel: this.bindings.i18n.t('instant-results-suggestion-label', {\n          title:\n            this.ariaLabelGenerator?.(this.bindings, result) || result.title,\n          interpolation: {escapeValue: false},\n        }),\n        onSelect: (e: MouseEvent) => {\n          const link = this.getLink(e.target as HTMLElement);\n\n          if (!link) {\n            return;\n          }\n          this.handleLinkClick(link, e.ctrlKey || e.metaKey);\n        },\n      })\n    );\n    if (elements.length) {\n      const showAllText = this.bindings.i18n.t('show-all-results');\n\n      elements.push({\n        key: 'instant-results-show-all-button',\n        content: (\n          <div\n            part=\"instant-results-show-all-button\"\n            class={getClassNameForButtonStyle('text-primary')}\n          >\n            {showAllText}\n          </div>\n        ),\n        part: 'instant-results-show-all',\n        ariaLabel: showAllText,\n        onSelect: () => {\n          this.bindings.clearSuggestions();\n          this.bindings.searchBoxController.updateText(\n            this.instantResults.state.q\n          );\n          this.bindings.searchBoxController.submit();\n        },\n      });\n    }\n    return elements;\n  }\n\n  public initialize(): SearchBoxSuggestions {\n    this.instantResults = buildInstantResults(this.bindings.engine, {\n      options: {\n        maxResultsPerQuery: this.maxResultsPerQuery,\n      },\n    });\n\n    this.resultTemplateProvider = new ResultTemplateProvider({\n      includeDefaultTemplate: true,\n      templateElements: Array.from(\n        this.host.querySelectorAll('atomic-result-template')\n      ),\n      getResultTemplateRegistered: () => true,\n      setResultTemplateRegistered: () => {},\n      getTemplateHasError: () => this.templateHasError,\n      setTemplateHasError: (value: boolean) => {\n        this.templateHasError = value;\n      },\n      bindings: this.bindings,\n    });\n\n    return {\n      position: Array.from(this.host.parentNode!.children).indexOf(this.host),\n      panel: 'right',\n      onSuggestedQueryChange: (q) => {\n        this.instantResults.updateQuery(q);\n        return this.onSuggestedQueryChange();\n      },\n      renderItems: () => this.renderItems(),\n    };\n  }\n\n  private onSuggestedQueryChange() {\n    if (\n      !this.bindings.getSuggestionElements().length &&\n      !this.bindings.searchBoxController.state.value\n    ) {\n      console.warn(\n        \"There doesn't seem to be any query suggestions configured. Make sure to include either an atomic-search-box-query-suggestions or atomic-search-box-recent-queries in your search box in order to see some instant results.\"\n      );\n    }\n\n    return new Promise<void>((resolve) => {\n      const unsubscribe = this.instantResults.subscribe(() => {\n        const state = this.instantResults.state;\n        if (!state.isLoading) {\n          if (state.results.length) {\n            this.results = state.results;\n          }\n          unsubscribe();\n          resolve();\n        }\n      });\n    });\n  }\n\n  public render() {\n    if (this.error) {\n      return (\n        <atomic-component-error\n          element={this.host}\n          error={this.error}\n        ></atomic-component-error>\n      );\n    }\n  }\n}\n"],"mappings":"mVAuCaA,EAA6B,M,yBAGhCC,KAAAC,QAAoB,GAGpBD,KAAAE,QAA+B,OAKtBF,KAAAG,iBAAmB,MAkBNH,KAAAI,mBAAqB,EAIrBJ,KAAAK,QAAgC,SAIhCL,KAAAM,UAAoC,O,2CA1B9B,M,wBAkBe,E,aAIW,S,eAII,O,kCAhBjD,uBAAMC,CACrBC,GAEAR,KAAKQ,wBAA0BA,C,CAqB1B,iBAAAC,GACL,IACEC,GAAmCC,IACjCX,KAAKW,SAAWA,EAChB,OAAOX,KAAKY,YAAY,GACvBZ,KAAKa,K,CACR,MAAOC,GACPd,KAAKc,MAAQA,C,EAIT,OAAAC,CAAQC,G,QACd,QACEC,GAAAC,EAAAF,IAAE,MAAFA,SAAE,SAAFA,EACIG,cAAc,oBAAgB,MAAAD,SAAA,SAAAA,EAC9BE,cAAU,MAAAH,SAAA,SAAAA,EAAEE,cAAc,0BAA2B,I,CAIrD,eAAAE,CAAgBL,EAAiBM,GACvC,MAAMC,EAAaC,GAAkBR,EAAGS,aAAa,SAAUD,GAC/D,MAAME,EAAgBV,EAAGW,aAAa,UAEtCL,GAAeC,EAAU,UACzBP,EAAGY,QACHN,GAAeC,EAAUG,GAAiB,IAE1C,OAAO,I,CAGD,WAAAG,GACN,IAAK7B,KAAKW,SAASmB,kBAAoB9B,KAAKW,SAASoB,MAAMC,WAAY,CACrE,MAAO,E,CAET,MAAM/B,EAAUD,KAAKiC,eAAeC,MAAMjC,QAAQkC,OAC9CnC,KAAKiC,eAAeC,MAAMjC,QAC1BD,KAAKC,QAET,MAAMmC,EAAyCnC,EAAQoC,KACpDC,I,MAAmB,OAClBC,IAAK,kBAAkBC,EAAsBF,EAAOG,YACpDC,KAAM,uBACNC,QACEC,EAAA,iBACEL,IAAK,kBAAkBC,EAAsBF,EAAOG,YACpDC,KAAK,UACLJ,OAAQA,EACRO,kBAAmBC,EACjB9C,KAAKW,SAASoC,OACd,CACEC,QAAS,CAACV,YAGdpC,QAASF,KAAKE,QACdG,QAASL,KAAKK,QACdC,UAAWN,KAAKM,UAChBqC,QAAS3C,KAAKiD,uBAAuBC,mBAAmBZ,GACxDa,gBAAiB,MACjBC,kBAAmBpD,KAAKQ,0BAG5B6C,UAAWrD,KAAKW,SAAS2C,KAAKC,EAAE,mCAAoC,CAClEC,QACEtC,EAAAlB,KAAKyD,sBAAkB,MAAAvC,SAAA,SAAAA,EAAAwC,KAAA1D,KAAGA,KAAKW,SAAU2B,KAAWA,EAAOkB,MAC7DG,cAAe,CAACC,YAAa,SAE/BC,SAAWC,IACT,MAAMC,EAAO/D,KAAKe,QAAQ+C,EAAEE,QAE5B,IAAKD,EAAM,CACT,M,CAEF/D,KAAKqB,gBAAgB0C,EAAMD,EAAEG,SAAWH,EAAEI,QAAQ,EAErD,IAEH,GAAI9B,EAASD,OAAQ,CACnB,MAAMgC,EAAcnE,KAAKW,SAAS2C,KAAKC,EAAE,oBAEzCnB,EAASgC,KAAK,CACZ7B,IAAK,kCACLI,QACEC,EAAA,OACEF,KAAK,kCACL2B,MAAOC,EAA2B,iBAEjCH,GAGLzB,KAAM,2BACNW,UAAWc,EACXN,SAAU,KACR7D,KAAKW,SAAS4D,mBACdvE,KAAKW,SAAS6D,oBAAoBC,WAChCzE,KAAKiC,eAAeC,MAAMwC,GAE5B1E,KAAKW,SAAS6D,oBAAoBG,QAAQ,G,CAIhD,OAAOvC,C,CAGF,UAAAxB,GACLZ,KAAKiC,eAAiB2C,EAAoB5E,KAAKW,SAASoC,OAAQ,CAC9DC,QAAS,CACP5C,mBAAoBJ,KAAKI,sBAI7BJ,KAAKiD,uBAAyB,IAAI4B,EAAuB,CACvDC,uBAAwB,KACxBC,iBAAkBC,MAAMC,KACtBjF,KAAKa,KAAKqE,iBAAiB,2BAE7BC,4BAA6B,IAAM,KACnCC,4BAA6B,OAC7BC,oBAAqB,IAAMrF,KAAKG,iBAChCmF,oBAAsB9D,IACpBxB,KAAKG,iBAAmBqB,CAAK,EAE/Bb,SAAUX,KAAKW,WAGjB,MAAO,CACL4E,SAAUP,MAAMC,KAAKjF,KAAKa,KAAK2E,WAAYC,UAAUC,QAAQ1F,KAAKa,MAClE8E,MAAO,QACPC,uBAAyBlB,IACvB1E,KAAKiC,eAAe4D,YAAYnB,GAChC,OAAO1E,KAAK4F,wBAAwB,EAEtC/D,YAAa,IAAM7B,KAAK6B,c,CAIpB,sBAAA+D,GACN,IACG5F,KAAKW,SAASmF,wBAAwB3D,SACtCnC,KAAKW,SAAS6D,oBAAoBtC,MAAMV,MACzC,CACAuE,QAAQC,KACN,6N,CAIJ,OAAO,IAAIC,SAAeC,IACxB,MAAMC,EAAcnG,KAAKiC,eAAemE,WAAU,KAChD,MAAMlE,EAAQlC,KAAKiC,eAAeC,MAClC,IAAKA,EAAMmE,UAAW,CACpB,GAAInE,EAAMjC,QAAQkC,OAAQ,CACxBnC,KAAKC,QAAUiC,EAAMjC,O,CAEvBkG,IACAD,G,IAEF,G,CAIC,MAAAI,GACL,GAAItG,KAAKc,MAAO,CACd,OACE8B,EAAA,0BACE2D,QAASvG,KAAKa,KACdC,MAAOd,KAAKc,O"}