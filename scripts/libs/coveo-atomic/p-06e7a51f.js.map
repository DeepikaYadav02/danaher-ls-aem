{"version":3,"names":["TimeframeFacetCommon","constructor","props","this","manualTimeframes","validateProps","facetId","determineFacetId","setFacetId","getManualTimeframes","length","facetForDateRange","initializeFacetForDateRange","currentValues","withDatePicker","facetForDatePicker","initializeFacetForDatePicker","filter","initializeFilter","dependenciesManager","buildDependenciesManager","registerFacetToStore","bindings","store","get","field","randomID","enabled","_d","_b","_a","state","_c","valuesToRender","values","value","numberOfResults","shouldRenderValues","hasInputRange","shouldRenderFacet","shouldRenderInput","shouldDisplayInputForFacetRange","hasInput","searchStatusState","getSearchStatusState","facetValues","hasValues","numberOfSelectedValues","range","map","period","amount","unit","buildDateRange","start","end","disconnectedCallback","host","isConnected","stopWatching","isHidden","validateDependsOn","dependsOn","facetInfo","label","i18n","t","element","registerFacet","format","formatFacetValue","initializePopover","dateFacets","Array","from","querySelectorAll","facetValue","startDate","deserializeRelativeDate","relativeDate","timeframe","find","getFieldValueCaption","count","error","parseDate","renderValues","renderValuesContainer","renderValue","displayValue","isSelected","h","FacetValueLink","onClick","toggleSingleSelect","FacetValueLabelHighlight","children","FacetValuesGroup","class","part","renderHeader","isCollapsed","headerFocus","onToggleCollapse","FacetHeader","onClearFilters","focusAfterSearch","clear","deselectAll","headingLevel","headerRef","el","setTarget","renderDateInput","min","max","filterState","render","hasError","firstSearchExecuted","Hidden","FacetPlaceholder","numberOfValues","FacetContainer"],"sources":["src/components/common/facets/timeframe-facet-common.tsx"],"sourcesContent":["import {h, VNode} from '@stencil/core';\nimport {FocusTargetController} from '../../../utils/accessibility-utils';\nimport {parseDate} from '../../../utils/date-utils';\nimport {getFieldValueCaption} from '../../../utils/field-utils';\nimport {randomID} from '../../../utils/utils';\nimport {initializePopover} from '../../search/facets/atomic-popover/popover-type';\nimport {Hidden} from '../hidden';\nimport {AnyBindings} from '../interface/bindings';\nimport {\n  DateFacet,\n  DateFacetValue,\n  DateFilter,\n  DateRangeOptions,\n  DateRangeRequest,\n  FacetConditionsManager,\n  RelativeDate,\n  RelativeDatePeriod,\n  RelativeDateUnit,\n  SearchStatusState,\n} from '../types';\nimport {\n  shouldDisplayInputForFacetRange,\n  validateDependsOn,\n} from './facet-common';\nimport {FacetInfo} from './facet-common-store';\nimport {FacetContainer} from './facet-container/facet-container';\nimport {FacetHeader} from './facet-header/facet-header';\nimport {FacetPlaceholder} from './facet-placeholder/facet-placeholder';\nimport {FacetValueLabelHighlight} from './facet-value-label-highlight/facet-value-label-highlight';\nimport {FacetValueLink} from './facet-value-link/facet-value-link';\nimport {FacetValuesGroup} from './facet-values-group/facet-values-group';\n\nexport interface Timeframe {\n  period: RelativeDatePeriod;\n  unit?: RelativeDateUnit;\n  amount?: number;\n  label?: string;\n}\n\ninterface TimeframeFacetCommonOptions {\n  facetId?: string;\n  host: HTMLElement;\n  bindings: AnyBindings;\n  label: string;\n  field: string;\n  headingLevel: number;\n  dependsOn: Record<string, string>;\n  withDatePicker: boolean;\n  setFacetId(id: string): string;\n  getSearchStatusState(): SearchStatusState;\n  buildDependenciesManager(): FacetConditionsManager;\n  deserializeRelativeDate(date: string): RelativeDate;\n  buildDateRange(config: DateRangeOptions): DateRangeRequest;\n  initializeFacetForDatePicker(): DateFacet;\n  initializeFacetForDateRange(values: DateRangeRequest[]): DateFacet;\n  initializeFilter(): DateFilter;\n  min?: string;\n  max?: string;\n}\n\ninterface TimeframeFacetCommonRenderProps {\n  hasError: boolean;\n  firstSearchExecuted: boolean;\n  isCollapsed: boolean;\n  headerFocus: FocusTargetController;\n  onToggleCollapse: () => boolean;\n}\n\nexport class TimeframeFacetCommon {\n  private facetId?: string;\n  private facetForDatePicker?: DateFacet;\n  private facetForDateRange?: DateFacet;\n  private filter?: DateFilter;\n  private manualTimeframes: Timeframe[] = [];\n  private dependenciesManager?: FacetConditionsManager;\n\n  constructor(private props: TimeframeFacetCommonOptions) {\n    this.validateProps();\n    this.facetId = this.determineFacetId;\n    this.props.setFacetId(this.facetId);\n\n    this.manualTimeframes = this.getManualTimeframes();\n\n    // Initialize two facets: One that is actually used to display values for end users, which only exists\n    // if we need to display something to the end user (ie: timeframes > 0)\n\n    // A second facet is initialized only to verify the results count. It is never used to display results to end user.\n    // It serves as a way to determine if the input should be rendered or not, independent of the ranges configured in the component\n    if (this.manualTimeframes.length > 0) {\n      this.facetForDateRange = this.props.initializeFacetForDateRange(\n        this.currentValues\n      );\n    }\n\n    if (this.props.withDatePicker) {\n      this.facetForDatePicker = this.props.initializeFacetForDatePicker();\n      this.filter = this.props.initializeFilter();\n    }\n\n    if (this.facetForDateRange || this.filter) {\n      this.dependenciesManager = this.props.buildDependenciesManager();\n    }\n    this.registerFacetToStore();\n  }\n\n  private get determineFacetId() {\n    if (this.props.facetId) {\n      return this.props.facetId;\n    }\n\n    if (this.props.bindings.store.get('dateFacets')[this.props.field]) {\n      return randomID(`${this.props.field}_`);\n    }\n\n    return this.props.field;\n  }\n\n  private get enabled() {\n    return (\n      this.facetForDateRange?.state.enabled ??\n      this.filter?.state.enabled ??\n      true\n    );\n  }\n\n  private get valuesToRender() {\n    return (\n      this.facetForDateRange?.state.values.filter(\n        (value) => value.numberOfResults || value.state !== 'idle'\n      ) || []\n    );\n  }\n\n  private get shouldRenderValues() {\n    return !this.hasInputRange && !!this.valuesToRender.length;\n  }\n\n  private get shouldRenderFacet() {\n    return this.shouldRenderInput || this.shouldRenderValues;\n  }\n\n  private get shouldRenderInput() {\n    return shouldDisplayInputForFacetRange({\n      hasInput: this.props.withDatePicker,\n      hasInputRange: this.hasInputRange,\n      searchStatusState: this.props.getSearchStatusState(),\n      facetValues: this.facetForDatePicker?.state?.values || [],\n    });\n  }\n\n  private get hasValues() {\n    if (this.facetForDatePicker?.state.values.length) {\n      return true;\n    }\n\n    return !!this.valuesToRender.length;\n  }\n\n  private get numberOfSelectedValues() {\n    if (this.filter?.state?.range) {\n      return 1;\n    }\n\n    return (\n      this.facetForDateRange?.state.values.filter(\n        ({state}) => state === 'selected'\n      ).length || 0\n    );\n  }\n\n  private get hasInputRange() {\n    return !!this.filter?.state.range;\n  }\n\n  public get currentValues(): DateRangeRequest[] {\n    return this.manualTimeframes.map(({period, amount, unit}) =>\n      period === 'past'\n        ? this.props.buildDateRange({\n            start: {period, unit, amount},\n            end: {period: 'now'},\n          })\n        : this.props.buildDateRange({\n            start: {period: 'now'},\n            end: {period, unit, amount},\n          })\n    );\n  }\n\n  public disconnectedCallback() {\n    if (this.props.host.isConnected) {\n      return;\n    }\n    this.dependenciesManager?.stopWatching();\n  }\n\n  private get isHidden() {\n    return !this.shouldRenderFacet || !this.enabled;\n  }\n\n  private validateProps() {\n    validateDependsOn(this.props.dependsOn);\n  }\n\n  private registerFacetToStore() {\n    const facetInfo: FacetInfo = {\n      label: () => this.props.bindings.i18n.t(this.props.label),\n      facetId: this.facetId!,\n      element: this.props.host,\n      isHidden: () => this.isHidden,\n    };\n\n    this.props.bindings.store.registerFacet('dateFacets', {\n      ...facetInfo,\n      format: (value) => this.formatFacetValue(value),\n    });\n\n    initializePopover(this.props.host, {\n      ...facetInfo,\n      hasValues: () => this.hasValues,\n      numberOfSelectedValues: () => this.numberOfSelectedValues,\n    });\n\n    if (this.filter) {\n      this.props.bindings.store.state.dateFacets[this.filter.state.facetId] =\n        this.props.bindings.store.state.dateFacets[this.facetId!];\n    }\n  }\n\n  private getManualTimeframes(): Timeframe[] {\n    return Array.from(this.props.host.querySelectorAll('atomic-timeframe')).map(\n      ({label, amount, unit, period}) => ({\n        label,\n        amount,\n        unit,\n        period,\n      })\n    );\n  }\n\n  private formatFacetValue(facetValue: DateFacetValue) {\n    try {\n      const startDate = this.props.deserializeRelativeDate(facetValue.start);\n      const relativeDate =\n        startDate.period === 'past'\n          ? startDate\n          : this.props.deserializeRelativeDate(facetValue.end);\n      const timeframe = this.getManualTimeframes().find(\n        (timeframe) =>\n          timeframe.period === relativeDate.period &&\n          timeframe.unit === relativeDate.unit &&\n          timeframe.amount === relativeDate.amount\n      );\n\n      if (timeframe?.label) {\n        return getFieldValueCaption(\n          this.props.field,\n          timeframe.label,\n          this.props.bindings.i18n\n        );\n      }\n      return this.props.bindings.i18n.t(\n        `${relativeDate.period}-${relativeDate.unit}`,\n        {\n          count: relativeDate.amount,\n        }\n      );\n    } catch (error) {\n      return this.props.bindings.i18n.t('to', {\n        start: parseDate(facetValue.start).format('YYYY-MM-DD'),\n        end: parseDate(facetValue.end).format('YYYY-MM-DD'),\n      });\n    }\n  }\n  private renderValues() {\n    return this.renderValuesContainer(\n      this.valuesToRender.map((value) => this.renderValue(value))\n    );\n  }\n  private renderValue(facetValue: DateFacetValue) {\n    const displayValue = this.formatFacetValue(facetValue);\n    const isSelected = facetValue.state === 'selected';\n    return (\n      <FacetValueLink\n        displayValue={displayValue}\n        isSelected={isSelected}\n        numberOfResults={facetValue.numberOfResults}\n        i18n={this.props.bindings.i18n}\n        onClick={() => this.facetForDateRange!.toggleSingleSelect(facetValue)}\n      >\n        <FacetValueLabelHighlight\n          displayValue={displayValue}\n          isSelected={isSelected}\n        ></FacetValueLabelHighlight>\n      </FacetValueLink>\n    );\n  }\n\n  private renderValuesContainer(children: VNode[]) {\n    return (\n      <FacetValuesGroup\n        i18n={this.props.bindings.i18n}\n        label={this.props.label}\n      >\n        <ul class=\"mt-3\" part=\"values\">\n          {children}\n        </ul>\n      </FacetValuesGroup>\n    );\n  }\n\n  private renderHeader(\n    isCollapsed: boolean,\n    headerFocus: FocusTargetController,\n    onToggleCollapse: () => void\n  ) {\n    return (\n      <FacetHeader\n        i18n={this.props.bindings.i18n}\n        label={this.props.label}\n        onClearFilters={() => {\n          headerFocus.focusAfterSearch();\n          if (this.filter?.state.range) {\n            this.filter?.clear();\n            return;\n          }\n          this.facetForDateRange?.deselectAll();\n        }}\n        numberOfSelectedValues={this.numberOfSelectedValues}\n        isCollapsed={isCollapsed}\n        headingLevel={this.props.headingLevel}\n        onToggleCollapse={onToggleCollapse}\n        headerRef={(el) => headerFocus.setTarget(el)}\n      ></FacetHeader>\n    );\n  }\n\n  private renderDateInput() {\n    return (\n      <atomic-facet-date-input\n        min={this.props.min}\n        max={this.props.max}\n        bindings={this.props.bindings}\n        label={this.props.label}\n        filter={this.filter!}\n        filterState={this.filter!.state!}\n      ></atomic-facet-date-input>\n    );\n  }\n\n  public render({\n    hasError,\n    firstSearchExecuted,\n    isCollapsed,\n    headerFocus,\n    onToggleCollapse,\n  }: TimeframeFacetCommonRenderProps) {\n    if (hasError || !this.enabled) {\n      return <Hidden></Hidden>;\n    }\n\n    if (!firstSearchExecuted) {\n      return (\n        <FacetPlaceholder\n          numberOfValues={this.currentValues.length}\n          isCollapsed={isCollapsed}\n        ></FacetPlaceholder>\n      );\n    }\n\n    if (!this.shouldRenderFacet) {\n      return <Hidden></Hidden>;\n    }\n\n    return (\n      <FacetContainer>\n        {this.renderHeader(isCollapsed, headerFocus, onToggleCollapse)}\n        {!isCollapsed && [\n          this.shouldRenderValues && this.renderValues(),\n          this.shouldRenderInput && this.renderDateInput(),\n        ]}\n      </FacetContainer>\n    );\n  }\n}\n"],"mappings":"2UAoEaA,EAQX,WAAAC,CAAoBC,GAAAC,KAAAD,QAHZC,KAAAC,iBAAgC,GAItCD,KAAKE,gBACLF,KAAKG,QAAUH,KAAKI,iBACpBJ,KAAKD,MAAMM,WAAWL,KAAKG,SAE3BH,KAAKC,iBAAmBD,KAAKM,sBAO7B,GAAIN,KAAKC,iBAAiBM,OAAS,EAAG,CACpCP,KAAKQ,kBAAoBR,KAAKD,MAAMU,4BAClCT,KAAKU,c,CAIT,GAAIV,KAAKD,MAAMY,eAAgB,CAC7BX,KAAKY,mBAAqBZ,KAAKD,MAAMc,+BACrCb,KAAKc,OAASd,KAAKD,MAAMgB,kB,CAG3B,GAAIf,KAAKQ,mBAAqBR,KAAKc,OAAQ,CACzCd,KAAKgB,oBAAsBhB,KAAKD,MAAMkB,0B,CAExCjB,KAAKkB,sB,CAGP,oBAAYd,GACV,GAAIJ,KAAKD,MAAMI,QAAS,CACtB,OAAOH,KAAKD,MAAMI,O,CAGpB,GAAIH,KAAKD,MAAMoB,SAASC,MAAMC,IAAI,cAAcrB,KAAKD,MAAMuB,OAAQ,CACjE,OAAOC,EAAS,GAAGvB,KAAKD,MAAMuB,S,CAGhC,OAAOtB,KAAKD,MAAMuB,K,CAGpB,WAAYE,G,YACV,OACEC,GAAAC,GAAAC,EAAA3B,KAAKQ,qBAAiB,MAAAmB,SAAA,SAAAA,EAAEC,MAAMJ,WAAO,MAAAE,SAAA,EAAAA,GACrCG,EAAA7B,KAAKc,UAAM,MAAAe,SAAA,SAAAA,EAAED,MAAMJ,WAAO,MAAAC,SAAA,EAAAA,EAC1B,I,CAIJ,kBAAYK,G,MACV,QACEH,EAAA3B,KAAKQ,qBAAiB,MAAAmB,SAAA,SAAAA,EAAEC,MAAMG,OAAOjB,QAClCkB,GAAUA,EAAMC,iBAAmBD,EAAMJ,QAAU,WACjD,E,CAIT,sBAAYM,GACV,OAAQlC,KAAKmC,iBAAmBnC,KAAK8B,eAAevB,M,CAGtD,qBAAY6B,GACV,OAAOpC,KAAKqC,mBAAqBrC,KAAKkC,kB,CAGxC,qBAAYG,G,QACV,OAAOC,EAAgC,CACrCC,SAAUvC,KAAKD,MAAMY,eACrBwB,cAAenC,KAAKmC,cACpBK,kBAAmBxC,KAAKD,MAAM0C,uBAC9BC,cAAahB,GAAAC,EAAA3B,KAAKY,sBAAkB,MAAAe,SAAA,SAAAA,EAAEC,SAAK,MAAAF,SAAA,SAAAA,EAAEK,SAAU,I,CAI3D,aAAYY,G,MACV,IAAIhB,EAAA3B,KAAKY,sBAAkB,MAAAe,SAAA,SAAAA,EAAEC,MAAMG,OAAOxB,OAAQ,CAChD,OAAO,I,CAGT,QAASP,KAAK8B,eAAevB,M,CAG/B,0BAAYqC,G,UACV,IAAIlB,GAAAC,EAAA3B,KAAKc,UAAM,MAAAa,SAAA,SAAAA,EAAEC,SAAK,MAAAF,SAAA,SAAAA,EAAEmB,MAAO,CAC7B,OAAO,C,CAGT,QACEhB,EAAA7B,KAAKQ,qBAAiB,MAAAqB,SAAA,SAAAA,EAAED,MAAMG,OAAOjB,QACnC,EAAEc,WAAWA,IAAU,aACvBrB,SAAU,C,CAIhB,iBAAY4B,G,MACV,UAASR,EAAA3B,KAAKc,UAAM,MAAAa,SAAA,SAAAA,EAAEC,MAAMiB,M,CAG9B,iBAAWnC,GACT,OAAOV,KAAKC,iBAAiB6C,KAAI,EAAEC,SAAQC,SAAQC,UACjDF,IAAW,OACP/C,KAAKD,MAAMmD,eAAe,CACxBC,MAAO,CAACJ,SAAQE,OAAMD,UACtBI,IAAK,CAACL,OAAQ,SAEhB/C,KAAKD,MAAMmD,eAAe,CACxBC,MAAO,CAACJ,OAAQ,OAChBK,IAAK,CAACL,SAAQE,OAAMD,a,CAKvB,oBAAAK,G,MACL,GAAIrD,KAAKD,MAAMuD,KAAKC,YAAa,CAC/B,M,EAEF5B,EAAA3B,KAAKgB,uBAAmB,MAAAW,SAAA,SAAAA,EAAE6B,c,CAG5B,YAAYC,GACV,OAAQzD,KAAKoC,oBAAsBpC,KAAKwB,O,CAGlC,aAAAtB,GACNwD,EAAkB1D,KAAKD,MAAM4D,U,CAGvB,oBAAAzC,GACN,MAAM0C,EAAuB,CAC3BC,MAAO,IAAM7D,KAAKD,MAAMoB,SAAS2C,KAAKC,EAAE/D,KAAKD,MAAM8D,OACnD1D,QAASH,KAAKG,QACd6D,QAAShE,KAAKD,MAAMuD,KACpBG,SAAU,IAAMzD,KAAKyD,UAGvBzD,KAAKD,MAAMoB,SAASC,MAAM6C,cAAc,aAAc,IACjDL,EACHM,OAASlC,GAAUhC,KAAKmE,iBAAiBnC,KAG3CoC,EAAkBpE,KAAKD,MAAMuD,KAAM,IAC9BM,EACHjB,UAAW,IAAM3C,KAAK2C,UACtBC,uBAAwB,IAAM5C,KAAK4C,yBAGrC,GAAI5C,KAAKc,OAAQ,CACfd,KAAKD,MAAMoB,SAASC,MAAMQ,MAAMyC,WAAWrE,KAAKc,OAAOc,MAAMzB,SAC3DH,KAAKD,MAAMoB,SAASC,MAAMQ,MAAMyC,WAAWrE,KAAKG,Q,EAI9C,mBAAAG,GACN,OAAOgE,MAAMC,KAAKvE,KAAKD,MAAMuD,KAAKkB,iBAAiB,qBAAqB1B,KACtE,EAAEe,QAAOb,SAAQC,OAAMF,aAAO,CAC5Bc,QACAb,SACAC,OACAF,Y,CAKE,gBAAAoB,CAAiBM,GACvB,IACE,MAAMC,EAAY1E,KAAKD,MAAM4E,wBAAwBF,EAAWtB,OAChE,MAAMyB,EACJF,EAAU3B,SAAW,OACjB2B,EACA1E,KAAKD,MAAM4E,wBAAwBF,EAAWrB,KACpD,MAAMyB,EAAY7E,KAAKM,sBAAsBwE,MAC1CD,GACCA,EAAU9B,SAAW6B,EAAa7B,QAClC8B,EAAU5B,OAAS2B,EAAa3B,MAChC4B,EAAU7B,SAAW4B,EAAa5B,SAGtC,GAAI6B,IAAS,MAATA,SAAS,SAATA,EAAWhB,MAAO,CACpB,OAAOkB,EACL/E,KAAKD,MAAMuB,MACXuD,EAAUhB,MACV7D,KAAKD,MAAMoB,SAAS2C,K,CAGxB,OAAO9D,KAAKD,MAAMoB,SAAS2C,KAAKC,EAC9B,GAAGa,EAAa7B,UAAU6B,EAAa3B,OACvC,CACE+B,MAAOJ,EAAa5B,Q,CAGxB,MAAOiC,GACP,OAAOjF,KAAKD,MAAMoB,SAAS2C,KAAKC,EAAE,KAAM,CACtCZ,MAAO+B,EAAUT,EAAWtB,OAAOe,OAAO,cAC1Cd,IAAK8B,EAAUT,EAAWrB,KAAKc,OAAO,e,EAIpC,YAAAiB,GACN,OAAOnF,KAAKoF,sBACVpF,KAAK8B,eAAegB,KAAKd,GAAUhC,KAAKqF,YAAYrD,K,CAGhD,WAAAqD,CAAYZ,GAClB,MAAMa,EAAetF,KAAKmE,iBAAiBM,GAC3C,MAAMc,EAAad,EAAW7C,QAAU,WACxC,OACE4D,EAACC,EAAc,CACbH,aAAcA,EACdC,WAAYA,EACZtD,gBAAiBwC,EAAWxC,gBAC5B6B,KAAM9D,KAAKD,MAAMoB,SAAS2C,KAC1B4B,QAAS,IAAM1F,KAAKQ,kBAAmBmF,mBAAmBlB,IAE1De,EAACI,EAAwB,CACvBN,aAAcA,EACdC,WAAYA,I,CAMZ,qBAAAH,CAAsBS,GAC5B,OACEL,EAACM,EAAgB,CACfhC,KAAM9D,KAAKD,MAAMoB,SAAS2C,KAC1BD,MAAO7D,KAAKD,MAAM8D,OAElB2B,EAAA,MAAIO,MAAM,OAAOC,KAAK,UACnBH,G,CAMD,YAAAI,CACNC,EACAC,EACAC,GAEA,OACEZ,EAACa,EAAW,CACVvC,KAAM9D,KAAKD,MAAMoB,SAAS2C,KAC1BD,MAAO7D,KAAKD,MAAM8D,MAClByC,eAAgB,K,UACdH,EAAYI,mBACZ,IAAI5E,EAAA3B,KAAKc,UAAM,MAAAa,SAAA,SAAAA,EAAEC,MAAMiB,MAAO,EAC5BnB,EAAA1B,KAAKc,UAAM,MAAAY,SAAA,SAAAA,EAAE8E,QACb,M,EAEF3E,EAAA7B,KAAKQ,qBAAiB,MAAAqB,SAAA,SAAAA,EAAE4E,aAAa,EAEvC7D,uBAAwB5C,KAAK4C,uBAC7BsD,YAAaA,EACbQ,aAAc1G,KAAKD,MAAM2G,aACzBN,iBAAkBA,EAClBO,UAAYC,GAAOT,EAAYU,UAAUD,I,CAKvC,eAAAE,GACN,OACEtB,EAAA,2BACEuB,IAAK/G,KAAKD,MAAMgH,IAChBC,IAAKhH,KAAKD,MAAMiH,IAChB7F,SAAUnB,KAAKD,MAAMoB,SACrB0C,MAAO7D,KAAKD,MAAM8D,MAClB/C,OAAQd,KAAKc,OACbmG,YAAajH,KAAKc,OAAQc,O,CAKzB,MAAAsF,EAAOC,SACZA,EAAQC,oBACRA,EAAmBlB,YACnBA,EAAWC,YACXA,EAAWC,iBACXA,IAEA,GAAIe,IAAanH,KAAKwB,QAAS,CAC7B,OAAOgE,EAAC6B,EAAM,K,CAGhB,IAAKD,EAAqB,CACxB,OACE5B,EAAC8B,EAAgB,CACfC,eAAgBvH,KAAKU,cAAcH,OACnC2F,YAAaA,G,CAKnB,IAAKlG,KAAKoC,kBAAmB,CAC3B,OAAOoD,EAAC6B,EAAM,K,CAGhB,OACE7B,EAACgC,EAAc,KACZxH,KAAKiG,aAAaC,EAAaC,EAAaC,IAC3CF,GAAe,CACflG,KAAKkC,oBAAsBlC,KAAKmF,eAChCnF,KAAKqC,mBAAqBrC,KAAK8G,mB"}