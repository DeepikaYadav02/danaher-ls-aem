{"version":3,"names":["atomicInsightFacetCss","AtomicInsightFacet","this","withSearch","dependsOn","label","numberOfValues","sortCriteria","resultsMustMatch","displayValuesAs","isCollapsed","headingLevel","filterFacetCount","injectionDepth","initialize","options","facetId","field","facetSearch","facet","buildInsightFacet","bindings","engine","state","facetCommon","FacetCommon","host","dependenciesManager","buildInsightFacetConditionsManager","conditions","parseDependsOn","searchStatus","buildInsightSearchStatus","focusTargets","showLessFocus","FocusTargetController","showMoreFocus","headerFocus","showLess","showMore","header","disconnectedCallback","_a","render","h","FacetPlaceholder","hasError","searchStatusState","firstSearchExecuted","onToggleCollapse","__decorate","InitializeBindings","BindStateToController"],"sources":["src/components/insight/atomic-insight-facet/atomic-insight-facet.pcss?tag=atomic-insight-facet&encapsulation=shadow","src/components/insight/atomic-insight-facet/atomic-insight-facet.tsx"],"sourcesContent":["@import '../../common/facets/facet-common.pcss';\n@import '../../common/facets/facet-search/facet-search.pcss';\n@import '../../common/facets/facet-value-checkbox/facet-value-checkbox.pcss';\n@import '../../common/facets/facet-value-box/facet-value-box.pcss';\n","import {FacetResultsMustMatch} from '@coveo/headless';\nimport {Component, h, State, Prop, Element} from '@stencil/core';\nimport {\n  buildInsightFacet,\n  buildInsightFacetConditionsManager,\n  buildInsightSearchStatus,\n  InsightFacet,\n  InsightFacetOptions,\n  InsightFacetSortCriterion,\n  InsightFacetState,\n  InsightSearchStatus,\n  InsightSearchStatusState,\n} from '..';\nimport {FocusTargetController} from '../../../utils/accessibility-utils';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../utils/initialization-utils';\nimport {\n  BaseFacet,\n  FacetCommon,\n  FacetDisplayValues,\n} from '../../common/facets/facet-common';\nimport {parseDependsOn} from '../../common/facets/facet-common';\nimport {FacetPlaceholder} from '../../common/facets/facet-placeholder/facet-placeholder';\nimport {InsightBindings} from '../atomic-insight-interface/atomic-insight-interface';\n\n/**\n * @internal\n */\n@Component({\n  tag: 'atomic-insight-facet',\n  styleUrl: 'atomic-insight-facet.pcss',\n  shadow: true,\n})\nexport class AtomicInsightFacet\n  implements InitializableComponent<InsightBindings>, BaseFacet<InsightFacet>\n{\n  @InitializeBindings() public bindings!: InsightBindings;\n  public facetCommon?: FacetCommon;\n  public facet!: InsightFacet;\n  public searchStatus!: InsightSearchStatus;\n  public withSearch = false;\n  public dependsOn = {};\n  @Element() private host!: HTMLElement;\n\n  @BindStateToController('facet')\n  @State()\n  public facetState!: InsightFacetState;\n  @BindStateToController('searchStatus')\n  @State()\n  public searchStatusState!: InsightSearchStatusState;\n  @State() public error!: Error;\n\n  /**\n   * Specifies a unique identifier for the facet.\n   */\n  @Prop({mutable: true, reflect: true}) public facetId?: string;\n  /**\n   * The non-localized label for the facet.\n   */\n  @Prop({reflect: true}) public label = 'no-label';\n  /**\n   * The field whose values you want to display in the facet.\n   */\n  @Prop({reflect: true}) public field!: string;\n  /**\n   * The number of values to request for this facet.\n   * Also determines the number of additional values to request each time more values are shown.\n   */\n  @Prop({reflect: true}) public numberOfValues = 8;\n  /**\n   * The sort criterion to apply to the returned facet values.\n   * Possible values are 'score', 'alphanumeric', 'occurrences', and 'automatic'.\n   */\n  @Prop({reflect: true}) public sortCriteria: InsightFacetSortCriterion =\n    'automatic';\n  /**\n   * Specifies how a result must match the selected facet values.\n   * Allowed values:\n   * - `atLeastOneValue`: A result will match if at least one of the corresponding facet values is selected.\n   * - `allValues`: A result will match if all corresponding facet values are selected.\n   */\n  @Prop({reflect: true}) public resultsMustMatch: FacetResultsMustMatch =\n    'atLeastOneValue';\n  /**\n   * Whether to display the facet values as checkboxes (multiple selection), links (single selection) or boxes (multiple selection).\n   * Possible values are 'checkbox', 'link', and 'box'.\n   */\n  @Prop({reflect: true}) public displayValuesAs: FacetDisplayValues =\n    'checkbox';\n  /**\n   * Specifies if the facet is collapsed.\n   */\n  @Prop({reflect: true, mutable: true}) public isCollapsed = false;\n  /**\n   * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the heading over the facet, from 1 to 6.\n   */\n  @Prop({reflect: true}) public headingLevel = 0;\n  /**\n   * Whether to exclude the parents of folded results when estimating the result count for each facet value.\n   */\n  @Prop({reflect: true}) public filterFacetCount = true;\n  /**\n   * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values.\n   * Note: A high injectionDepth may negatively impact the facet request performance.\n   * Minimum: `0`\n   * Default: `1000`\n   */\n  @Prop() public injectionDepth = 1000;\n\n  private showLessFocus?: FocusTargetController;\n\n  private showMoreFocus?: FocusTargetController;\n\n  private headerFocus?: FocusTargetController;\n\n  public initialize() {\n    const options: InsightFacetOptions = {\n      facetId: this.facetId,\n      field: this.field,\n      numberOfValues: this.numberOfValues,\n      sortCriteria: this.sortCriteria,\n      facetSearch: {numberOfValues: this.numberOfValues},\n      filterFacetCount: this.filterFacetCount,\n      injectionDepth: this.injectionDepth,\n    };\n\n    this.facet = buildInsightFacet(this.bindings.engine, {options});\n    this.facetId = this.facet.state.facetId;\n\n    this.facetCommon = new FacetCommon({\n      host: this.host,\n      bindings: this.bindings,\n      label: this.label,\n      field: this.field,\n      headingLevel: this.headingLevel,\n      displayValuesAs: this.displayValuesAs,\n      dependsOn: this.dependsOn,\n      dependenciesManager: buildInsightFacetConditionsManager(\n        this.bindings.engine,\n        {\n          facetId: this.facetId!,\n          conditions: parseDependsOn(this.dependsOn),\n        }\n      ),\n      facet: this.facet,\n      facetId: this.facetId,\n      withSearch: this.withSearch,\n      sortCriteria: this.sortCriteria,\n    });\n\n    this.searchStatus = buildInsightSearchStatus(this.bindings.engine);\n  }\n\n  private get focusTargets(): {\n    showLess: FocusTargetController;\n    showMore: FocusTargetController;\n    header: FocusTargetController;\n  } {\n    if (!this.showLessFocus) {\n      this.showLessFocus = new FocusTargetController(this);\n    }\n    if (!this.showMoreFocus) {\n      this.showMoreFocus = new FocusTargetController(this);\n    }\n    if (!this.headerFocus) {\n      this.headerFocus = new FocusTargetController(this);\n    }\n    return {\n      showLess: this.showLessFocus,\n      showMore: this.showMoreFocus,\n      header: this.headerFocus,\n    };\n  }\n\n  public disconnectedCallback() {\n    this.facetCommon?.disconnectedCallback();\n  }\n\n  public render() {\n    if (!this.facetCommon) {\n      return (\n        <FacetPlaceholder\n          numberOfValues={this.numberOfValues}\n          isCollapsed={this.isCollapsed}\n        ></FacetPlaceholder>\n      );\n    }\n    return this.facetCommon.render({\n      hasError: this.searchStatusState.hasError,\n      firstSearchExecuted: this.searchStatusState.firstSearchExecuted,\n      isCollapsed: this.isCollapsed,\n      numberOfValues: this.numberOfValues,\n      headerFocus: this.focusTargets.header,\n      showLessFocus: this.focusTargets.showLess,\n      showMoreFocus: this.focusTargets.showMore,\n      onToggleCollapse: () => (this.isCollapsed = !this.isCollapsed),\n    });\n  }\n}\n"],"mappings":"6nBAAA,MAAMA,EAAwB,wlmC,iXCoCjBC,EAAkB,M,yBAOtBC,KAAAC,WAAa,MACbD,KAAAE,UAAY,GAkBWF,KAAAG,MAAQ,WASRH,KAAAI,eAAiB,EAKjBJ,KAAAK,aAC5B,YAO4BL,KAAAM,iBAC5B,kBAK4BN,KAAAO,gBAC5B,WAI2CP,KAAAQ,YAAc,MAI7BR,KAAAS,aAAe,EAIfT,KAAAU,iBAAmB,KAOlCV,KAAAW,eAAiB,I,kHAhDM,W,yCASS,E,kBAM7C,Y,sBAQA,kB,qBAMA,W,iBAIyD,M,kBAId,E,sBAII,K,oBAOjB,G,CAQzB,UAAAC,GACL,MAAMC,EAA+B,CACnCC,QAASd,KAAKc,QACdC,MAAOf,KAAKe,MACZX,eAAgBJ,KAAKI,eACrBC,aAAcL,KAAKK,aACnBW,YAAa,CAACZ,eAAgBJ,KAAKI,gBACnCM,iBAAkBV,KAAKU,iBACvBC,eAAgBX,KAAKW,gBAGvBX,KAAKiB,MAAQC,EAAkBlB,KAAKmB,SAASC,OAAQ,CAACP,YACtDb,KAAKc,QAAUd,KAAKiB,MAAMI,MAAMP,QAEhCd,KAAKsB,YAAc,IAAIC,EAAY,CACjCC,KAAMxB,KAAKwB,KACXL,SAAUnB,KAAKmB,SACfhB,MAAOH,KAAKG,MACZY,MAAOf,KAAKe,MACZN,aAAcT,KAAKS,aACnBF,gBAAiBP,KAAKO,gBACtBL,UAAWF,KAAKE,UAChBuB,oBAAqBC,EACnB1B,KAAKmB,SAASC,OACd,CACEN,QAASd,KAAKc,QACda,WAAYC,EAAe5B,KAAKE,aAGpCe,MAAOjB,KAAKiB,MACZH,QAASd,KAAKc,QACdb,WAAYD,KAAKC,WACjBI,aAAcL,KAAKK,eAGrBL,KAAK6B,aAAeC,EAAyB9B,KAAKmB,SAASC,O,CAG7D,gBAAYW,GAKV,IAAK/B,KAAKgC,cAAe,CACvBhC,KAAKgC,cAAgB,IAAIC,EAAsBjC,K,CAEjD,IAAKA,KAAKkC,cAAe,CACvBlC,KAAKkC,cAAgB,IAAID,EAAsBjC,K,CAEjD,IAAKA,KAAKmC,YAAa,CACrBnC,KAAKmC,YAAc,IAAIF,EAAsBjC,K,CAE/C,MAAO,CACLoC,SAAUpC,KAAKgC,cACfK,SAAUrC,KAAKkC,cACfI,OAAQtC,KAAKmC,Y,CAIV,oBAAAI,G,OACLC,EAAAxC,KAAKsB,eAAW,MAAAkB,SAAA,SAAAA,EAAED,sB,CAGb,MAAAE,GACL,IAAKzC,KAAKsB,YAAa,CACrB,OACEoB,EAACC,EAAgB,CACfvC,eAAgBJ,KAAKI,eACrBI,YAAaR,KAAKQ,a,CAIxB,OAAOR,KAAKsB,YAAYmB,OAAO,CAC7BG,SAAU5C,KAAK6C,kBAAkBD,SACjCE,oBAAqB9C,KAAK6C,kBAAkBC,oBAC5CtC,YAAaR,KAAKQ,YAClBJ,eAAgBJ,KAAKI,eACrB+B,YAAanC,KAAK+B,aAAaO,OAC/BN,cAAehC,KAAK+B,aAAaK,SACjCF,cAAelC,KAAK+B,aAAaM,SACjCU,iBAAkB,IAAO/C,KAAKQ,aAAeR,KAAKQ,a,6BA/JzBwC,EAAA,CAA5BC,K,+BAUMD,EAAA,CAFNE,EAAsB,U,iCAKhBF,EAAA,CAFNE,EAAsB,iB"}