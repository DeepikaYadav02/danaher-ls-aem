{"version":3,"names":["atomicInsightFoldedResultListCss","AtomicInsightFoldedResultList","this","loadingFlag","randomID","display","resultTemplateRegistered","templateHasError","density","imageSize","setRenderFunction","resultRenderingFunction","resolveFoldedResultList","event","preventDefault","stopPropagation","detail","foldedResultList","loadCollection","initialize","initFolding","resultsPerPage","buildResultsPerPage","bindings","engine","e","error","resultTemplateProvider","ResultTemplateProvider","includeDefaultTemplate","templateElements","Array","from","host","querySelectorAll","getResultTemplateRegistered","getTemplateHasError","setResultTemplateRegistered","value","setTemplateHasError","resultListCommon","ResultListCommon","getNumberOfPlaceholders","resultsPerPageState","numberOfResults","getDensity","getResultDisplay","getLayoutDisplay","getImageSize","nextNewResultTarget","focusTarget","getResultListState","foldedResultListState","getResultRenderingFunction","renderResult","props","h","getInteractiveResult","result","buildInteractiveResult","options","FocusTargetController","buildFoldedResultList","folding","collectionField","parentField","childField","render","__decorate","InitializeBindings","BindStateToController"],"sources":["src/components/insight/result-lists/atomic-insight-folded-result-list/atomic-insight-folded-result-list.pcss?tag=atomic-insight-folded-result-list&encapsulation=shadow","src/components/insight/result-lists/atomic-insight-folded-result-list/atomic-insight-folded-result-list.tsx"],"sourcesContent":["@import '../../../common/result-list/styles/placeholders.pcss';\n@import '../styles/list-display.pcss';\n","import {\n  ResultsPerPageState,\n  ResultsPerPage,\n  buildFoldedResultList,\n  FoldedResultList,\n  FoldedResultListState,\n  buildResultsPerPage,\n  ResultListProps,\n  FoldedCollection,\n  Result,\n  buildInteractiveResult,\n} from '@coveo/headless/insight';\nimport {\n  Component,\n  Element,\n  State,\n  Prop,\n  Listen,\n  Method,\n  h,\n} from '@stencil/core';\nimport {FocusTargetController} from '../../../../utils/accessibility-utils';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../../utils/initialization-utils';\nimport {randomID} from '../../../../utils/utils';\nimport {\n  ResultDisplayDensity,\n  ResultDisplayImageSize,\n  ResultDisplayLayout,\n} from '../../../common/layout/display-options';\nimport {ResultListCommon} from '../../../common/result-list/result-list-common';\nimport {ResultRenderingFunction} from '../../../common/result-list/result-list-common-interface';\nimport {FoldedResultListStateContextEvent} from '../../../common/result-list/result-list-decorators';\nimport {ResultTemplateProvider} from '../../../common/result-list/result-template-provider';\nimport {InsightBindings} from '../../atomic-insight-interface/atomic-insight-interface';\n\n/**\n * @internal\n */\n@Component({\n  tag: 'atomic-insight-folded-result-list',\n  styleUrl: 'atomic-insight-folded-result-list.pcss',\n  shadow: true,\n})\nexport class AtomicInsightFoldedResultList\n  implements InitializableComponent<InsightBindings>\n{\n  @InitializeBindings() public bindings!: InsightBindings;\n  public foldedResultList!: FoldedResultList;\n  public resultsPerPage!: ResultsPerPage;\n  private resultListCommon!: ResultListCommon;\n  private resultRenderingFunction: ResultRenderingFunction;\n  private loadingFlag = randomID('firstResultLoaded-');\n  private display: ResultDisplayLayout = 'list';\n\n  @Element() public host!: HTMLDivElement;\n\n  @BindStateToController('foldedResultList')\n  @State()\n  public foldedResultListState!: FoldedResultListState;\n  @BindStateToController('resultsPerPage')\n  @State()\n  public resultsPerPageState!: ResultsPerPageState;\n  @State() private resultTemplateRegistered = false;\n  @State() public error!: Error;\n  @State() private templateHasError = false;\n\n  private nextNewResultTarget?: FocusTargetController;\n\n  /**\n   * The spacing of various elements in the result list, including the gap between results, the gap between parts of a result, and the font sizes of different parts in a result.\n   */\n  @Prop({reflect: true}) density: ResultDisplayDensity = 'normal';\n  /**\n   * The expected size of the image displayed in the results.\n   */\n  @Prop({reflect: true}) imageSize: ResultDisplayImageSize = 'icon';\n  /**\n   * The name of the field on which to do the folding. The folded result list component will use the values of this field to resolve the collections of result items.\n   *\n   * @defaultValue `foldingcollection`\n   */\n  @Prop({reflect: true}) public collectionField?: string;\n  /**\n   * The name of the field that determines whether a certain result is a top result containing other child results within a collection.\n   *\n   * @defaultValue `foldingparent`\n   */\n  @Prop({reflect: true}) public parentField?: string;\n  /**\n   * The name of the field that uniquely identifies a result within a collection.\n   *\n   * @defaultValue `foldingchild`\n   */\n  @Prop({reflect: true}) public childField?: string;\n\n  /**\n   * Sets a rendering function to bypass the standard HTML template mechanism for rendering results.\n   * You can use this function while working with web frameworks that don't use plain HTML syntax, e.g., React, Angular or Vue.\n   *\n   * Do not use this method if you integrate Atomic in a plain HTML deployment.\n   */\n  @Method() public async setRenderFunction(\n    resultRenderingFunction: ResultRenderingFunction\n  ) {\n    this.resultRenderingFunction = resultRenderingFunction;\n  }\n\n  @Listen('atomic/resolveFoldedResultList')\n  resolveFoldedResultList(event: FoldedResultListStateContextEvent) {\n    event.preventDefault();\n    event.stopPropagation();\n    event.detail(this.foldedResultList);\n  }\n\n  @Listen('atomic/loadCollection')\n  loadCollection(event: CustomEvent<FoldedCollection>) {\n    event.preventDefault();\n    event.stopPropagation();\n    this.foldedResultList.loadCollection(event.detail);\n  }\n\n  public initialize() {\n    try {\n      this.foldedResultList = this.initFolding();\n      this.resultsPerPage = buildResultsPerPage(this.bindings.engine);\n    } catch (e) {\n      this.error = e as Error;\n    }\n\n    const resultTemplateProvider = new ResultTemplateProvider({\n      includeDefaultTemplate: true,\n      templateElements: Array.from(\n        this.host.querySelectorAll('atomic-insight-result-template')\n      ),\n      getResultTemplateRegistered: () => this.resultTemplateRegistered,\n      getTemplateHasError: () => this.templateHasError,\n      setResultTemplateRegistered: (value: boolean) => {\n        this.resultTemplateRegistered = value;\n      },\n      setTemplateHasError: (value: boolean) => {\n        this.templateHasError = value;\n      },\n      bindings: this.bindings,\n    });\n    this.resultListCommon = new ResultListCommon({\n      resultTemplateProvider,\n      getNumberOfPlaceholders: () => this.resultsPerPageState.numberOfResults,\n      host: this.host,\n      bindings: this.bindings,\n      getDensity: () => this.density,\n      getResultDisplay: () => this.display,\n      getLayoutDisplay: () => this.display,\n      getImageSize: () => this.imageSize,\n      nextNewResultTarget: this.focusTarget,\n      loadingFlag: this.loadingFlag,\n      getResultListState: () => this.foldedResultListState,\n      getResultRenderingFunction: () => this.resultRenderingFunction,\n      renderResult: (props) => (\n        <atomic-insight-result {...props}></atomic-insight-result>\n      ),\n      getInteractiveResult: (result: Result) =>\n        buildInteractiveResult(this.bindings.engine, {\n          options: {result},\n        }),\n    });\n  }\n\n  private get focusTarget(): FocusTargetController {\n    if (!this.nextNewResultTarget) {\n      this.nextNewResultTarget = new FocusTargetController(this);\n    }\n    return this.nextNewResultTarget;\n  }\n\n  private initFolding(\n    props: ResultListProps = {options: {}}\n  ): FoldedResultList {\n    return buildFoldedResultList(this.bindings.engine, {\n      options: {\n        ...props.options,\n        folding: {\n          collectionField: this.collectionField,\n          parentField: this.parentField,\n          childField: this.childField,\n        },\n      },\n    });\n  }\n\n  public render() {\n    return this.resultListCommon.render();\n  }\n}\n"],"mappings":"uiBAAA,MAAMA,EAAmC,wnD,iXC+C5BC,EAA6B,M,yBAQhCC,KAAAC,YAAcC,EAAS,sBACvBF,KAAAG,QAA+B,OAUtBH,KAAAI,yBAA2B,MAE3BJ,KAAAK,iBAAmB,MAObL,KAAAM,QAAgC,SAIhCN,KAAAO,UAAoC,O,sGAbf,M,2CAER,M,aAOmB,S,eAII,O,oFA0B1C,uBAAMC,CACrBC,GAEAT,KAAKS,wBAA0BA,C,CAIjC,uBAAAC,CAAwBC,GACtBA,EAAMC,iBACND,EAAME,kBACNF,EAAMG,OAAOd,KAAKe,iB,CAIpB,cAAAC,CAAeL,GACbA,EAAMC,iBACND,EAAME,kBACNb,KAAKe,iBAAiBC,eAAeL,EAAMG,O,CAGtC,UAAAG,GACL,IACEjB,KAAKe,iBAAmBf,KAAKkB,cAC7BlB,KAAKmB,eAAiBC,EAAoBpB,KAAKqB,SAASC,O,CACxD,MAAOC,GACPvB,KAAKwB,MAAQD,C,CAGf,MAAME,EAAyB,IAAIC,EAAuB,CACxDC,uBAAwB,KACxBC,iBAAkBC,MAAMC,KACtB9B,KAAK+B,KAAKC,iBAAiB,mCAE7BC,4BAA6B,IAAMjC,KAAKI,yBACxC8B,oBAAqB,IAAMlC,KAAKK,iBAChC8B,4BAA8BC,IAC5BpC,KAAKI,yBAA2BgC,CAAK,EAEvCC,oBAAsBD,IACpBpC,KAAKK,iBAAmB+B,CAAK,EAE/Bf,SAAUrB,KAAKqB,WAEjBrB,KAAKsC,iBAAmB,IAAIC,EAAiB,CAC3Cd,yBACAe,wBAAyB,IAAMxC,KAAKyC,oBAAoBC,gBACxDX,KAAM/B,KAAK+B,KACXV,SAAUrB,KAAKqB,SACfsB,WAAY,IAAM3C,KAAKM,QACvBsC,iBAAkB,IAAM5C,KAAKG,QAC7B0C,iBAAkB,IAAM7C,KAAKG,QAC7B2C,aAAc,IAAM9C,KAAKO,UACzBwC,oBAAqB/C,KAAKgD,YAC1B/C,YAAaD,KAAKC,YAClBgD,mBAAoB,IAAMjD,KAAKkD,sBAC/BC,2BAA4B,IAAMnD,KAAKS,wBACvC2C,aAAeC,GACbC,EAAA,4BAA2BD,IAE7BE,qBAAuBC,GACrBC,EAAuBzD,KAAKqB,SAASC,OAAQ,CAC3CoC,QAAS,CAACF,a,CAKlB,eAAYR,GACV,IAAKhD,KAAK+C,oBAAqB,CAC7B/C,KAAK+C,oBAAsB,IAAIY,EAAsB3D,K,CAEvD,OAAOA,KAAK+C,mB,CAGN,WAAA7B,CACNmC,EAAyB,CAACK,QAAS,KAEnC,OAAOE,EAAsB5D,KAAKqB,SAASC,OAAQ,CACjDoC,QAAS,IACJL,EAAMK,QACTG,QAAS,CACPC,gBAAiB9D,KAAK8D,gBACtBC,YAAa/D,KAAK+D,YAClBC,WAAYhE,KAAKgE,c,CAMlB,MAAAC,GACL,OAAOjE,KAAKsC,iBAAiB2B,Q,6BAhJFC,EAAA,CAA5BC,K,+BAYMD,EAAA,CAFNE,EAAsB,qB,4CAKhBF,EAAA,CAFNE,EAAsB,mB"}