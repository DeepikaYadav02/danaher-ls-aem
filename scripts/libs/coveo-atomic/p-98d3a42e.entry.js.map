{"version":3,"names":["AtomicSearchBoxQuerySuggestions","componentWillLoad","dispatchSearchBoxSuggestionsEvent","bindings","this","initialize","host","error","renderIcon","icon","SearchIcon","engine","registerQuerySuggest","fetchQuerySuggestions","loadQuerySuggestActions","dispatch","id","count","numberOfQueries","position","Array","from","parentNode","children","indexOf","onInput","renderItems","hasQuery","searchBoxController","state","value","max","maxWithQuery","maxWithoutQuery","suggestions","slice","map","suggestion","renderItem","part","content","h","class","getSuggestions","length","innerHTML","highlightedValue","rawValue","key","encodeForDomAttribute","query","ariaLabel","i18n","t","interpolation","escapeValue","onSelect","selectSuggestion","render","element","AtomicSearchBoxRecentQueries","warnUser","once","logger","warn","Clock","storage","SafeStorage","recentQueriesList","buildRecentQueriesList","initialState","queries","retrieveLocalStorage","options","maxLength","clearFilters","subscribe","updateLocalStorage","getParsedJSON","StorageItems","RECENT_QUERIES","analyticsEnabled","disableFeature","setJSON","removeItem","filteredQueries","filter","recentQuery","toLowerCase","startsWith","suggestionElements","unshift","renderClear","clear","triggerSuggestions","hideIfLast","HighlightUtils","highlightString","openingDelimiter","closingDelimiter","highlights","offset","isStandalone","updateText","submit","executeRecentQuery"],"sources":["src/components/search/search-box-suggestions/atomic-search-box-query-suggestions/atomic-search-box-query-suggestions.tsx","src/components/search/search-box-suggestions/atomic-search-box-recent-queries/atomic-search-box-recent-queries.tsx"],"sourcesContent":["import {\n  loadQuerySuggestActions,\n  SearchEngine,\n  Suggestion,\n} from '@coveo/headless';\nimport {\n  QuerySetSection,\n  QuerySuggestionSection,\n} from '@coveo/headless/dist/definitions/state/state-sections';\nimport {Component, Element, Prop, State, h} from '@stencil/core';\nimport SearchIcon from '../../../../images/search.svg';\nimport {encodeForDomAttribute} from '../../../../utils/string-utils';\nimport {\n  dispatchSearchBoxSuggestionsEvent,\n  SearchBoxSuggestionElement,\n  SearchBoxSuggestions,\n  SearchBoxSuggestionsBindings,\n} from '../suggestions-common';\n\n/**\n * The `atomic-search-box-query-suggestions` component can be added as a child of an `atomic-search-box` component, allowing for the configuration of query suggestion behavior.\n */\n@Component({\n  tag: 'atomic-search-box-query-suggestions',\n  shadow: true,\n})\nexport class AtomicSearchBoxQuerySuggestions {\n  private bindings!: SearchBoxSuggestionsBindings;\n  @Element() private host!: HTMLElement;\n\n  @State() public error!: Error;\n\n  /**\n   * The SVG icon to display.\n   *\n   * - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location.\n   * - Use a value that starts with `assets://`, to display an icon from the Atomic package.\n   * - Use a stringified SVG to display it directly.\n   */\n  @Prop() public icon?: string;\n\n  /**\n   * The maximum number of suggestions that will be displayed if the user has typed something into the input field.\n   */\n  @Prop({reflect: true}) public maxWithQuery?: number;\n  /**\n   * The maximum number of suggestions that will be displayed initially when the input field is empty.\n   */\n  @Prop({reflect: true}) public maxWithoutQuery?: number;\n\n  componentWillLoad() {\n    try {\n      dispatchSearchBoxSuggestionsEvent((bindings) => {\n        this.bindings = bindings;\n        return this.initialize();\n      }, this.host);\n    } catch (error) {\n      this.error = error as Error;\n    }\n  }\n\n  private renderIcon() {\n    return this.icon || SearchIcon;\n  }\n\n  private initialize(): SearchBoxSuggestions {\n    const engine = this.bindings.engine as SearchEngine<\n      QuerySuggestionSection & QuerySetSection\n    >;\n    const {registerQuerySuggest, fetchQuerySuggestions} =\n      loadQuerySuggestActions(engine);\n\n    engine.dispatch(\n      registerQuerySuggest({\n        id: this.bindings.id,\n        count: this.bindings.numberOfQueries,\n      })\n    );\n\n    return {\n      position: Array.from(this.host.parentNode!.children).indexOf(this.host),\n      onInput: () =>\n        engine.dispatch(\n          fetchQuerySuggestions({\n            id: this.bindings.id,\n          })\n        ),\n      renderItems: () => this.renderItems(),\n    };\n  }\n\n  private renderItems(): SearchBoxSuggestionElement[] {\n    const hasQuery = this.bindings.searchBoxController.state.value !== '';\n    const max = hasQuery ? this.maxWithQuery : this.maxWithoutQuery;\n    return this.bindings.searchBoxController.state.suggestions\n      .slice(0, max)\n      .map((suggestion) => this.renderItem(suggestion));\n  }\n\n  private renderItem(suggestion: Suggestion) {\n    const hasQuery = this.bindings.searchBoxController.state.value !== '';\n    return {\n      part: 'query-suggestion-item',\n      content: (\n        <div part=\"query-suggestion-content\" class=\"flex items-center\">\n          {this.bindings.getSuggestions().length > 1 && (\n            <atomic-icon\n              part=\"query-suggestion-icon\"\n              icon={this.renderIcon()}\n              class=\"w-4 h-4 mr-2 shrink-0\"\n            ></atomic-icon>\n          )}\n          {hasQuery ? (\n            <span\n              part=\"query-suggestion-text\"\n              class=\"break-all line-clamp-2\"\n              innerHTML={suggestion.highlightedValue}\n            ></span>\n          ) : (\n            <span part=\"query-suggestion-text\" class=\"break-all line-clamp-2\">\n              {suggestion.rawValue}\n            </span>\n          )}\n        </div>\n      ),\n      key: `qs-${encodeForDomAttribute(suggestion.rawValue)}`,\n      query: suggestion.rawValue,\n      ariaLabel: this.bindings.i18n.t('query-suggestion-label', {\n        query: suggestion.rawValue,\n        interpolation: {escapeValue: false},\n      }),\n      onSelect: () => {\n        this.bindings.searchBoxController.selectSuggestion(suggestion.rawValue);\n      },\n    };\n  }\n\n  public render() {\n    if (this.error) {\n      return (\n        <atomic-component-error\n          element={this.host}\n          error={this.error}\n        ></atomic-component-error>\n      );\n    }\n  }\n}\n","import {\n  buildRecentQueriesList,\n  HighlightUtils,\n  RecentQueriesList,\n} from '@coveo/headless';\nimport {Component, Element, Prop, State, h} from '@stencil/core';\nimport Clock from '../../../../images/clock.svg';\nimport {SafeStorage, StorageItems} from '../../../../utils/local-storage-utils';\nimport {encodeForDomAttribute} from '../../../../utils/string-utils';\nimport {once} from '../../../../utils/utils';\nimport {\n  dispatchSearchBoxSuggestionsEvent,\n  SearchBoxSuggestionElement,\n  SearchBoxSuggestions,\n  SearchBoxSuggestionsBindings,\n} from '../suggestions-common';\n\n/**\n * The `atomic-search-box-recent-queries` component can be added as a child of an `atomic-search-box` component, allowing for the configuration of recent query suggestions.\n *\n * @part recent-query-title - The 'Recent queries' title.\n * @part recent-query-clear - The 'Clear' button for clearing recent queries    .\n */\n@Component({\n  tag: 'atomic-search-box-recent-queries',\n  shadow: true,\n})\nexport class AtomicSearchBoxRecentQueries {\n  private bindings!: SearchBoxSuggestionsBindings;\n  private recentQueriesList!: RecentQueriesList;\n  private storage!: SafeStorage;\n\n  @Element() private host!: HTMLElement;\n\n  @State() public error!: Error;\n\n  /**\n   * The SVG icon to display.\n   *\n   * - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location.\n   * - Use a value that starts with `assets://`, to display an icon from the Atomic package.\n   * - Use a stringified SVG to display it directly.\n   */\n  @Prop() public icon?: string;\n\n  /**\n   * The maximum number of suggestions that will be displayed if the user has typed something into the input field.\n   */\n  @Prop({reflect: true}) public maxWithQuery = 3;\n  /**\n   * The maximum number of suggestions that will be displayed initially when the input field is empty.\n   */\n  @Prop({reflect: true}) public maxWithoutQuery?: number;\n\n  componentWillLoad() {\n    try {\n      dispatchSearchBoxSuggestionsEvent((bindings) => {\n        this.bindings = bindings;\n        return this.initialize();\n      }, this.host);\n    } catch (error) {\n      this.error = error as Error;\n    }\n  }\n\n  private renderIcon() {\n    return this.icon || Clock;\n  }\n\n  private initialize(): SearchBoxSuggestions {\n    this.storage = new SafeStorage();\n    this.recentQueriesList = buildRecentQueriesList(this.bindings.engine, {\n      initialState: {queries: this.retrieveLocalStorage()},\n      options: {maxLength: 1000, clearFilters: this.bindings.clearFilters},\n    });\n\n    this.recentQueriesList.subscribe(() => this.updateLocalStorage());\n\n    return {\n      position: Array.from(this.host.parentNode!.children).indexOf(this.host),\n      renderItems: () => this.renderItems(),\n    };\n  }\n\n  private retrieveLocalStorage() {\n    return this.storage.getParsedJSON(StorageItems.RECENT_QUERIES, []);\n  }\n\n  private updateLocalStorage() {\n    if (!this.recentQueriesList.state.analyticsEnabled) {\n      return this.disableFeature();\n    }\n\n    return this.storage.setJSON(\n      StorageItems.RECENT_QUERIES,\n      this.recentQueriesList.state.queries\n    );\n  }\n\n  private warnUser = once(() =>\n    this.bindings.engine.logger.warn(\n      'Because analytics are disabled, the recent queries feature is deactivated.'\n    )\n  );\n\n  private disableFeature() {\n    this.warnUser();\n    this.storage.removeItem(StorageItems.RECENT_QUERIES);\n  }\n\n  private renderItems(): SearchBoxSuggestionElement[] {\n    if (!this.recentQueriesList.state.analyticsEnabled) {\n      return [];\n    }\n\n    const query = this.bindings.searchBoxController.state.value;\n    const hasQuery = query !== '';\n    const max = hasQuery ? this.maxWithQuery : this.maxWithoutQuery;\n    const filteredQueries = this.recentQueriesList.state.queries\n      .filter(\n        (recentQuery) =>\n          recentQuery !== query &&\n          recentQuery.toLowerCase().startsWith(query.toLowerCase())\n      )\n      .slice(0, max);\n\n    const suggestionElements: SearchBoxSuggestionElement[] =\n      filteredQueries.map((value) => this.renderItem(value));\n    if (suggestionElements.length) {\n      suggestionElements.unshift(this.renderClear());\n    }\n\n    return suggestionElements;\n  }\n\n  private renderClear(): SearchBoxSuggestionElement {\n    return {\n      key: 'recent-query-clear',\n      content: (\n        <div\n          part=\"recent-query-title-content\"\n          class=\"flex justify-between w-full\"\n        >\n          <span class=\"font-bold\" part=\"recent-query-title\">\n            {this.bindings.i18n.t('recent-searches')}\n          </span>\n          <span part=\"recent-query-clear\">{this.bindings.i18n.t('clear')}</span>\n        </div>\n      ),\n      ariaLabel: this.bindings.i18n.t('clear-recent-searches', {\n        interpolation: {escapeValue: false},\n      }),\n      onSelect: () => {\n        this.recentQueriesList.clear();\n        this.bindings.triggerSuggestions();\n      },\n      part: 'recent-query-title-item suggestion-divider',\n      hideIfLast: true,\n    };\n  }\n\n  private renderItem(value: string): SearchBoxSuggestionElement {\n    const query = this.bindings.searchBoxController.state.value;\n    return {\n      key: `recent-${encodeForDomAttribute(value)}`,\n      query: value,\n      part: 'recent-query-item',\n      content: (\n        <div\n          part=\"recent-query-content\"\n          class=\"flex items-center break-all text-left\"\n        >\n          <atomic-icon\n            part=\"recent-query-icon\"\n            icon={this.renderIcon()}\n            class=\"w-4 h-4 mr-2 shrink-0\"\n          ></atomic-icon>\n          {query === '' ? (\n            <span part=\"recent-query-text\" class=\"break-all line-clamp-2\">\n              {value}\n            </span>\n          ) : (\n            <span\n              part=\"recent-query-text\"\n              class=\"break-all line-clamp-2\"\n              innerHTML={HighlightUtils.highlightString({\n                content: value,\n                openingDelimiter:\n                  '<span part=\"recent-query-text-highlight\" class=\"font-bold\">',\n                closingDelimiter: '</span>',\n                highlights: [\n                  {\n                    offset: query.length,\n                    length: value.length - query.length,\n                  },\n                ],\n              })}\n            ></span>\n          )}\n        </div>\n      ),\n      ariaLabel: this.bindings.i18n.t('recent-query-suggestion-label', {\n        query: value,\n        interpolation: {escapeValue: false},\n      }),\n      onSelect: () => {\n        if (this.bindings.isStandalone) {\n          this.bindings.searchBoxController.updateText(value);\n          this.bindings.searchBoxController.submit();\n          return;\n        }\n\n        this.recentQueriesList.executeRecentQuery(\n          this.recentQueriesList.state.queries.indexOf(value)\n        );\n      },\n    };\n  }\n\n  public render() {\n    if (this.error) {\n      return (\n        <atomic-component-error\n          element={this.host}\n          error={this.error}\n        ></atomic-component-error>\n      );\n    }\n  }\n}\n"],"mappings":"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"}