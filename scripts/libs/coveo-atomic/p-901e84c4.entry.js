import{r as t,f as s,h as i,g as e,H as o}from"./p-591772f1.js";import{v as r,p as n}from"./p-a5540571.js";import{I as a}from"./p-a096f4ab.js";import"./p-eab67c09.js";import"./p-92adf573.js";const c="atomic-icon{display:inline-block;fill:currentColor;aspect-ratio:1 / 1;height:auto}@supports not (aspect-ratio: 1 / 1){atomic-icon{height:auto}}atomic-icon>svg{width:100%;max-height:100%;aspect-ratio:1 / 1;height:auto}@supports not (aspect-ratio: 1 / 1){atomic-icon>svg{height:auto}}";var h=function(t,s,e,r){var o,i=arguments.length,n=i<3?s:null===r?r=Object.getOwnPropertyDescriptor(s,e):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)n=Reflect.decorate(t,s,e,r);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(n=(i<3?o(n):i>3?o(s,e,n):o(s,e))||n);return i>3&&n&&Object.defineProperty(s,e,n),n};class u extends Error{static fromStatusCode(t,s,e){return new u(t,`status code ${s} (${e})`)}static fromError(t,s){return new u(t,"an error",s)}constructor(t,s,e){super(`Could not fetch icon from ${t}, got ${s}.`),this.url=t,this.errorObject=e}}const f=class{constructor(s){t(this,s),this.svg=null,this.icon=void 0,this.svg=null}async fetchIcon(t){try{const s=await fetch(t).catch((s=>{throw u.fromError(t,s)}));if(200!==s.status&&304!==s.status)throw u.fromStatusCode(t,s.status,s.statusText);return await s.text()}catch(t){return this.error=t,s(this),null}}validateSVG(t){/^<svg[\s\S]+<\/svg>$/gm.test(t)||this.bindings.engine.logger.warn('The inline "icon" prop is not an svg element. You may encounter rendering issues.',this.icon)}async getIcon(){const t=r(this.icon,this.bindings.store.getIconAssetsPath()),s=t?await this.fetchIcon(t):this.icon;return s&&this.validateSVG(s),s?n.sanitize(s,{USE_PROFILES:{svg:!0,svgFilters:!0}}):null}async updateIcon(){const t=this.getIcon();this.svg=await t}initialize(){this.updateIcon()}render(){return this.error?(console.error(this.error,this.host),void this.host.remove()):i(o,{innerHTML:this.svg,"aria-hidden":"true"})}static get assetsDirs(){return["assets"]}get host(){return e(this)}static get watchers(){return{icon:["updateIcon"]}}};h([a()],f.prototype,"bindings",void 0),f.style=c;export{f as atomic_icon};