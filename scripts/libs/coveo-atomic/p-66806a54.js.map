{"version":3,"names":["GridDisplayResults","props","getResultListState","results","map","result","index","unfoldedResult","extractUnfoldedResult","interactiveResult","getInteractiveResult","h","part","ref","element","setNewResultRef","onClick","event","preventDefault","select","window","open","clickUri","ctrlKey","metaKey","gridCellLinkTarget","LinkWithResultAnalytics","onSelect","onBeginDelayedSelect","beginDelayedSelect","onCancelPendingSelect","cancelPendingSelect","href","title","target","rel","renderResult","key","getResultId","store","bindings","content","resultTemplateProvider","getTemplateContent","loadingFlag","display","getResultDisplay","density","getDensity","imageSize","getImageSize","renderingFunction","getResultRenderingFunction","ListDisplayResults","TableDisplayResults","fieldColumns","getFieldTableColumns","length","engine","logger","error","host","class","listClasses","column","value","getAttribute","rowIndex","getFieldTableColumnsFromRenderingFunction","getFieldTableColumnsFromHTMLTemplate","contentOfRenderingFunction","document","createElement","resultRenderingFunction","contentOfRenderingFunctionAsString","innerHTML","Array","from","querySelectorAll","tableElementTagName","resultComponentClass","ResultListCommon","constructor","this","setLoadingFlag","registerResultList","addUpdateBreakpointOnce","updateBreakpoints","once","uniqueId","searchResponseId","resultIndex","firstResultEl","indexOfResultToFocus","children","_a","shadowRoot","undefined","elementToFocus","_b","getFirstFocusableDescendant","nextNewResultTarget","setTarget","focusOnNextNewResult","focusOnNextTarget","focusOnFirstResultAfterNextSearch","defer","Promise","resolve","isLoading","unsub","subscribe","async","focus","displayPlaceholders","isAppLoaded","classes","getResultDisplayClasses","getLayoutDisplay","firstSearchExecuted","push","join","render","call","templatesRegistered","hasError","hasResults","Fragment","ResultDisplayWrapper","DisplayResultsPlaceholder","numberOfPlaceholders","getNumberOfPlaceholders","ResultListDisplay","args","TableDisplayResultsPlaceholder","ResultsPlaceholder"],"sources":["src/components/common/result-list/grid-display-results.tsx","src/components/common/result-list/list-display-results.tsx","src/components/common/result-list/table-display-results.tsx","src/components/common/result-list/result-list-common.tsx"],"sourcesContent":["import {FunctionalComponent, h} from '@stencil/core';\nimport {extractUnfoldedResult} from '../interface/result';\nimport {LinkWithResultAnalytics} from '../result-link/result-link';\nimport {ResultListDisplayProps} from './result-list-common-interface';\n\nexport const GridDisplayResults: FunctionalComponent<ResultListDisplayProps> = (\n  props\n) =>\n  props.getResultListState().results.map((result, index) => {\n    const unfoldedResult = extractUnfoldedResult(result);\n    const interactiveResult = props.getInteractiveResult(unfoldedResult);\n\n    return (\n      <div\n        part=\"result-list-grid-clickable-container outline\"\n        ref={(element) => props.setNewResultRef(element!, index)}\n        onClick={(event) => {\n          event.preventDefault();\n          interactiveResult.select();\n          window.open(\n            unfoldedResult.clickUri,\n            event.ctrlKey || event.metaKey\n              ? '_blank'\n              : props.gridCellLinkTarget,\n            'noopener'\n          );\n        }}\n      >\n        <LinkWithResultAnalytics\n          part=\"result-list-grid-clickable\"\n          onSelect={() => interactiveResult.select()}\n          onBeginDelayedSelect={() => interactiveResult.beginDelayedSelect()}\n          onCancelPendingSelect={() => interactiveResult.cancelPendingSelect()}\n          href={unfoldedResult.clickUri}\n          title={unfoldedResult.title}\n          target={props.gridCellLinkTarget}\n          rel=\"noopener\"\n        >\n          {unfoldedResult.title}\n        </LinkWithResultAnalytics>\n        {props.renderResult({\n          key: props.getResultId(result),\n          result: result,\n          interactiveResult: props.getInteractiveResult(unfoldedResult),\n          store: props.bindings.store,\n          content: props.resultTemplateProvider.getTemplateContent(result),\n          loadingFlag: props.loadingFlag,\n          display: props.getResultDisplay(),\n          density: props.getDensity(),\n          imageSize: props.getImageSize(),\n          renderingFunction: props.getResultRenderingFunction(),\n        })}\n      </div>\n    );\n  });\n","import {FunctionalComponent} from '@stencil/core';\nimport {extractUnfoldedResult} from '../interface/result';\nimport {ResultListDisplayProps} from './result-list-common-interface';\n\nexport const ListDisplayResults: FunctionalComponent<ResultListDisplayProps> = (\n  props\n) =>\n  props.getResultListState().results.map((result, index) =>\n    props.renderResult({\n      key: props.getResultId(result),\n      part: 'outline',\n      result: result,\n      interactiveResult: props.getInteractiveResult(\n        extractUnfoldedResult(result)\n      ),\n      store: props.bindings.store,\n      content: props.resultTemplateProvider.getTemplateContent(result),\n      loadingFlag: props.loadingFlag,\n      display: props.getResultDisplay(),\n      density: props.getDensity(),\n      imageSize: props.getImageSize(),\n      ref: (element) => props.setNewResultRef(element!, index),\n      renderingFunction: props.getResultRenderingFunction(),\n    })\n  );\n","import {FunctionalComponent, h} from '@stencil/core';\nimport {tableElementTagName} from '../../search/atomic-table-result/table-element-utils';\nimport {extractUnfoldedResult} from '../interface/result';\nimport {ResultListDisplayProps} from './result-list-common-interface';\n\nexport const TableDisplayResults: FunctionalComponent<\n  ResultListDisplayProps\n> = (props) => {\n  const fieldColumns = getFieldTableColumns(props);\n\n  if (!fieldColumns.length) {\n    props.bindings.engine.logger.error(\n      'atomic-table-element elements missing in the result template to display columns.',\n      props.host\n    );\n  }\n\n  return (\n    <table class={`list-root ${props.listClasses}`} part=\"result-table\">\n      <thead part=\"result-table-heading\">\n        <tr part=\"result-table-heading-row\">\n          {fieldColumns.map((column) => (\n            <th part=\"result-table-heading-cell\">\n              <atomic-text value={column.getAttribute('label')!}></atomic-text>\n            </th>\n          ))}\n        </tr>\n      </thead>\n      <tbody part=\"result-table-body\">\n        {props.getResultListState().results.map((result, rowIndex) => (\n          <tr\n            key={props.getResultId(result)}\n            part={\n              'result-table-row ' +\n              (rowIndex % 2 === 1\n                ? 'result-table-row-even'\n                : 'result-table-row-odd') /* Offset by 1 since the index starts at 0 */\n            }\n            ref={(element) => props.setNewResultRef(element!, rowIndex)}\n          >\n            {fieldColumns.map((column) => {\n              const key =\n                column.getAttribute('label')! + props.getResultId(result);\n              return (\n                <td key={key} part=\"result-table-cell\">\n                  {props.renderResult({\n                    result: result,\n                    interactiveResult: props.getInteractiveResult(\n                      extractUnfoldedResult(result)\n                    ),\n                    store: props.bindings.store,\n                    content: column,\n                    loadingFlag: props.loadingFlag,\n                    display: props.getResultDisplay(),\n                    density: props.getDensity(),\n                    imageSize: props.getImageSize(),\n                  })}\n                </td>\n              );\n            })}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nconst getFieldTableColumns = (props: ResultListDisplayProps) => {\n  if (props.getResultRenderingFunction()) {\n    return getFieldTableColumnsFromRenderingFunction(props);\n  }\n  return getFieldTableColumnsFromHTMLTemplate(props);\n};\n\nconst getFieldTableColumnsFromRenderingFunction = (\n  props: ResultListDisplayProps\n): HTMLAtomicTableElementElement[] => {\n  const contentOfRenderingFunction = document.createElement('div');\n  const resultRenderingFunction = props.getResultRenderingFunction()!;\n\n  const contentOfRenderingFunctionAsString = resultRenderingFunction(\n    props.getResultListState().results[0],\n    document.createElement('div')\n  );\n  contentOfRenderingFunction.innerHTML = contentOfRenderingFunctionAsString;\n\n  return Array.from(\n    contentOfRenderingFunction.querySelectorAll(tableElementTagName)\n  );\n};\n\nconst getFieldTableColumnsFromHTMLTemplate = (\n  props: ResultListDisplayProps\n): HTMLAtomicTableElementElement[] =>\n  Array.from(\n    props.resultTemplateProvider\n      .getTemplateContent(props.getResultListState().results[0])\n      .querySelectorAll(tableElementTagName)\n  );\n","import {h, FunctionalComponent, Fragment} from '@stencil/core';\nimport {getFirstFocusableDescendant} from '../../../utils/accessibility-utils';\nimport {updateBreakpoints} from '../../../utils/replace-breakpoint';\nimport {defer, once} from '../../../utils/utils';\nimport {\n  ResultsPlaceholder,\n  ResultPlaceholderProps,\n  TableDisplayResultsPlaceholder,\n} from '../atomic-result-placeholder/placeholders';\nimport {AnyResult, extractUnfoldedResult} from '../interface/result';\nimport {ResultListInfo} from '../interface/store';\nimport {\n  getResultDisplayClasses,\n  ResultDisplayLayout,\n} from '../layout/display-options';\nimport {GridDisplayResults} from './grid-display-results';\nimport {ListDisplayResults} from './list-display-results';\nimport {\n  ResultListCommonProps,\n  ResultListDisplayProps,\n  ResultListRenderer,\n} from './result-list-common-interface';\nimport {TableDisplayResults} from './table-display-results';\n\nexport const resultComponentClass = 'result-component';\n\nexport class ResultListCommon<SpecificResult extends AnyResult = AnyResult>\n  implements ResultListRenderer, ResultListInfo\n{\n  private updateBreakpoints?: (host: HTMLElement) => void;\n  private indexOfResultToFocus?: number;\n  private firstResultEl?: HTMLElement;\n\n  constructor(private props: ResultListCommonProps<SpecificResult>) {\n    this.props.bindings.store.setLoadingFlag(this.props.loadingFlag);\n    this.props.bindings.store.registerResultList(this);\n    this.addUpdateBreakpointOnce();\n  }\n\n  private addUpdateBreakpointOnce() {\n    this.updateBreakpoints = once((host: HTMLElement) => {\n      updateBreakpoints(host);\n    });\n  }\n\n  public getResultId(result: AnyResult) {\n    return `${extractUnfoldedResult(result).uniqueId}${\n      this.props.getResultListState().searchResponseId\n    }${this.props.getDensity()}${this.props.getImageSize()}`;\n  }\n\n  public setNewResultRef(element: HTMLElement, resultIndex: number) {\n    if (resultIndex === 0) {\n      this.firstResultEl = element;\n    }\n    if (resultIndex !== this.indexOfResultToFocus) {\n      return;\n    }\n\n    if (!element.children.length && !element.shadowRoot?.children.length) {\n      return;\n    }\n\n    this.indexOfResultToFocus = undefined;\n    const elementToFocus = getFirstFocusableDescendant(element) ?? element;\n    this.props.nextNewResultTarget.setTarget(elementToFocus);\n  }\n\n  public focusOnNextNewResult() {\n    this.indexOfResultToFocus = this.props.getResultListState().results.length;\n    this.props.nextNewResultTarget.focusOnNextTarget();\n  }\n\n  public async focusOnFirstResultAfterNextSearch() {\n    await defer();\n    return new Promise<void>((resolve) => {\n      if (this.props.getResultListState().isLoading) {\n        this.firstResultEl = undefined;\n      }\n\n      const unsub = this.props.bindings.engine.subscribe(async () => {\n        await defer();\n        if (!this.props.getResultListState().isLoading && this.firstResultEl) {\n          const elementToFocus =\n            getFirstFocusableDescendant(this.firstResultEl) ??\n            this.firstResultEl;\n          this.props.nextNewResultTarget.setTarget(elementToFocus);\n          this.props.nextNewResultTarget.focus();\n          this.firstResultEl = undefined;\n          unsub();\n          resolve();\n        }\n      });\n    });\n  }\n\n  private get displayPlaceholders() {\n    return !this.props.bindings.store.isAppLoaded();\n  }\n\n  public get listClasses() {\n    const classes = getResultDisplayClasses(\n      this.props.getLayoutDisplay(),\n      this.props.getDensity(),\n      this.props.getImageSize()\n    );\n\n    if (\n      this.props.getResultListState().firstSearchExecuted &&\n      this.props.getResultListState().isLoading\n    ) {\n      classes.push('loading');\n    }\n\n    if (this.displayPlaceholders) {\n      classes.push('placeholder');\n    }\n\n    return classes.join(' ');\n  }\n\n  public render() {\n    this.updateBreakpoints?.(this.props.host);\n\n    if (!this.props.resultTemplateProvider.templatesRegistered) {\n      return;\n    }\n\n    if (this.props.getResultListState().hasError) {\n      return;\n    }\n\n    if (\n      this.props.getResultListState().firstSearchExecuted &&\n      !this.props.getResultListState().hasResults\n    ) {\n      return;\n    }\n\n    return (\n      <Fragment>\n        {this.props.resultTemplateProvider.hasError && <slot></slot>}\n        <div class={`list-wrapper ${this.listClasses}`}>\n          <ResultDisplayWrapper\n            listClasses={this.listClasses}\n            display={this.props.getLayoutDisplay()}\n          >\n            {this.displayPlaceholders && (\n              <DisplayResultsPlaceholder\n                numberOfPlaceholders={this.props.getNumberOfPlaceholders()}\n                density={this.props.getDensity()}\n                display={this.props.getResultDisplay()}\n                imageSize={this.props.getImageSize()}\n              />\n            )}\n            {this.props.getResultListState().firstSearchExecuted && (\n              <ResultListDisplay\n                getResultId={(result: AnyResult) => this.getResultId(result)}\n                listClasses={this.listClasses}\n                setNewResultRef={(...args) => this.setNewResultRef(...args)}\n                {...this.props}\n              />\n            )}\n          </ResultDisplayWrapper>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nconst ResultDisplayWrapper: FunctionalComponent<{\n  display?: ResultDisplayLayout;\n  listClasses: string;\n}> = (props, children) => {\n  if (props.display === 'table') {\n    return children;\n  }\n\n  return (\n    <div class={`list-root ${props.listClasses}`} part=\"result-list\">\n      {children}\n    </div>\n  );\n};\n\nconst DisplayResultsPlaceholder: FunctionalComponent<ResultPlaceholderProps> = (\n  props\n) => {\n  switch (props.display) {\n    case 'table':\n      return <TableDisplayResultsPlaceholder {...props} />;\n    default:\n      return <ResultsPlaceholder {...props} />;\n  }\n};\n\nconst ResultListDisplay: FunctionalComponent<ResultListDisplayProps> = (\n  props\n) => {\n  if (!props.getResultListState().results.length) {\n    return null;\n  }\n\n  switch (props.getLayoutDisplay()) {\n    case 'table':\n      return <TableDisplayResults {...props} />;\n    case 'grid':\n      return <GridDisplayResults {...props} />;\n    default:\n      return <ListDisplayResults {...props} />;\n  }\n};\n"],"mappings":"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"}