{"version":3,"names":["atomicInsightResultListCss","AtomicInsightResultList","this","loadingFlag","randomID","display","templateHasError","resultTemplateRegistered","density","imageSize","setRenderFunction","resultRenderingFunction","initialize","resultList","buildInsightResultList","bindings","engine","options","fieldsToInclude","store","state","undefined","resultsPerPage","buildResultsPerPage","resultTemplateProvider","ResultTemplateProvider","includeDefaultTemplate","templateElements","Array","from","host","querySelectorAll","getResultTemplateRegistered","getTemplateHasError","setResultTemplateRegistered","value","setTemplateHasError","resultListCommon","ResultListCommon","getNumberOfPlaceholders","resultsPerPageState","numberOfResults","getDensity","getResultDisplay","getLayoutDisplay","getImageSize","nextNewResultTarget","focusTarget","getResultListState","resultListState","getResultRenderingFunction","renderResult","props","h","getInteractiveResult","result","buildInsightInteractiveResult","FocusTargetController","render","__decorate","InitializeBindings","BindStateToController"],"sources":["src/components/insight/result-lists/atomic-insight-result-list/atomic-insight-result-list.pcss?tag=atomic-insight-result-list&encapsulation=shadow","src/components/insight/result-lists/atomic-insight-result-list/atomic-insight-result-list.tsx"],"sourcesContent":["@import '../../../common/result-list/styles/placeholders.pcss';\n@import '../styles/list-display.pcss';\n","import {\n  buildResultsPerPage,\n  ResultsPerPage,\n  ResultsPerPageState,\n} from '@coveo/headless/insight';\nimport {Component, h, Element, State, Prop, Method} from '@stencil/core';\nimport {\n  InsightResultList,\n  InsightResultListState,\n  buildInsightResultList,\n  InsightResult,\n  buildInsightInteractiveResult,\n} from '../..';\nimport {FocusTargetController} from '../../../../utils/accessibility-utils';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../../utils/initialization-utils';\nimport {randomID} from '../../../../utils/utils';\nimport {\n  ResultDisplayDensity,\n  ResultDisplayImageSize,\n  ResultDisplayLayout,\n} from '../../../common/layout/display-options';\nimport {ResultListCommon} from '../../../common/result-list/result-list-common';\nimport {ResultRenderingFunction} from '../../../common/result-list/result-list-common-interface';\nimport {ResultTemplateProvider} from '../../../common/result-list/result-template-provider';\nimport {InsightBindings} from '../../atomic-insight-interface/atomic-insight-interface';\n\n/**\n * @internal\n */\n@Component({\n  tag: 'atomic-insight-result-list',\n  styleUrl: 'atomic-insight-result-list.pcss',\n  shadow: true,\n})\nexport class AtomicInsightResultList\n  implements InitializableComponent<InsightBindings>\n{\n  @InitializeBindings() public bindings!: InsightBindings;\n  public resultList!: InsightResultList;\n  public resultsPerPage!: ResultsPerPage;\n  private resultListCommon!: ResultListCommon;\n  private loadingFlag = randomID('firstInsightResultLoaded-');\n  private display: ResultDisplayLayout = 'list';\n  private resultRenderingFunction: ResultRenderingFunction;\n\n  @Element() public host!: HTMLDivElement;\n\n  @BindStateToController('resultsPerPage')\n  @State()\n  public resultsPerPageState!: ResultsPerPageState;\n  @BindStateToController('resultList')\n  @State()\n  public resultListState!: InsightResultListState;\n  @State() private templateHasError = false;\n  @State() private resultTemplateRegistered = false;\n  @State() public error!: Error;\n\n  private nextNewResultTarget?: FocusTargetController;\n\n  /**\n   * The spacing of various elements in the result list, including the gap between results, the gap between parts of a result, and the font sizes of different parts in a result.\n   */\n  @Prop({reflect: true}) density: ResultDisplayDensity = 'normal';\n  /**\n   * The expected size of the image displayed in the results.\n   */\n  @Prop({reflect: true}) imageSize: ResultDisplayImageSize = 'icon';\n  /**\n   * Sets a rendering function to bypass the standard HTML template mechanism for rendering results.\n   * You can use this function while working with web frameworks that don't use plain HTML syntax, e.g., React, Angular or Vue.\n   *\n   * Do not use this method if you integrate Atomic in a plain HTML deployment.\n   *\n   * @param resultRenderingFunction\n   */\n  @Method() public async setRenderFunction(\n    resultRenderingFunction: ResultRenderingFunction\n  ) {\n    this.resultRenderingFunction = resultRenderingFunction;\n  }\n\n  public initialize() {\n    this.resultList = buildInsightResultList(this.bindings.engine, {\n      options: {\n        fieldsToInclude: this.bindings.store.state.fieldsToInclude || undefined,\n      },\n    });\n    this.resultsPerPage = buildResultsPerPage(this.bindings.engine);\n\n    const resultTemplateProvider = new ResultTemplateProvider({\n      includeDefaultTemplate: true,\n      templateElements: Array.from(\n        this.host.querySelectorAll('atomic-insight-result-template')\n      ),\n      getResultTemplateRegistered: () => this.resultTemplateRegistered,\n      getTemplateHasError: () => this.templateHasError,\n      setResultTemplateRegistered: (value: boolean) => {\n        this.resultTemplateRegistered = value;\n      },\n      setTemplateHasError: (value: boolean) => {\n        this.templateHasError = value;\n      },\n      bindings: this.bindings,\n    });\n\n    this.resultListCommon = new ResultListCommon<InsightResult>({\n      resultTemplateProvider,\n      getNumberOfPlaceholders: () => this.resultsPerPageState.numberOfResults,\n      host: this.host,\n      bindings: this.bindings,\n      getDensity: () => this.density,\n      getResultDisplay: () => this.display,\n      getLayoutDisplay: () => this.display,\n      getImageSize: () => this.imageSize,\n      nextNewResultTarget: this.focusTarget,\n      loadingFlag: this.loadingFlag,\n      getResultListState: () => this.resultListState,\n      getResultRenderingFunction: () => this.resultRenderingFunction,\n      renderResult: (props) => (\n        <atomic-insight-result {...props}></atomic-insight-result>\n      ),\n      getInteractiveResult: (result: InsightResult) =>\n        buildInsightInteractiveResult(this.bindings.engine, {\n          options: {result},\n        }),\n    });\n  }\n\n  private get focusTarget(): FocusTargetController {\n    if (!this.nextNewResultTarget) {\n      this.nextNewResultTarget = new FocusTargetController(this);\n    }\n    return this.nextNewResultTarget;\n  }\n\n  public render() {\n    return this.resultListCommon.render();\n  }\n}\n"],"mappings":"uiBAAA,MAAMA,EAA6B,wnD,iXCsCtBC,EAAuB,M,yBAO1BC,KAAAC,YAAcC,EAAS,6BACvBF,KAAAG,QAA+B,OAWtBH,KAAAI,iBAAmB,MACnBJ,KAAAK,yBAA2B,MAQrBL,KAAAM,QAAgC,SAIhCN,KAAAO,UAAoC,O,wFAbvB,M,8BACQ,M,kCAQW,S,eAII,M,CAS1C,uBAAMC,CACrBC,GAEAT,KAAKS,wBAA0BA,C,CAG1B,UAAAC,GACLV,KAAKW,WAAaC,EAAuBZ,KAAKa,SAASC,OAAQ,CAC7DC,QAAS,CACPC,gBAAiBhB,KAAKa,SAASI,MAAMC,MAAMF,iBAAmBG,aAGlEnB,KAAKoB,eAAiBC,EAAoBrB,KAAKa,SAASC,QAExD,MAAMQ,EAAyB,IAAIC,EAAuB,CACxDC,uBAAwB,KACxBC,iBAAkBC,MAAMC,KACtB3B,KAAK4B,KAAKC,iBAAiB,mCAE7BC,4BAA6B,IAAM9B,KAAKK,yBACxC0B,oBAAqB,IAAM/B,KAAKI,iBAChC4B,4BAA8BC,IAC5BjC,KAAKK,yBAA2B4B,CAAK,EAEvCC,oBAAsBD,IACpBjC,KAAKI,iBAAmB6B,CAAK,EAE/BpB,SAAUb,KAAKa,WAGjBb,KAAKmC,iBAAmB,IAAIC,EAAgC,CAC1Dd,yBACAe,wBAAyB,IAAMrC,KAAKsC,oBAAoBC,gBACxDX,KAAM5B,KAAK4B,KACXf,SAAUb,KAAKa,SACf2B,WAAY,IAAMxC,KAAKM,QACvBmC,iBAAkB,IAAMzC,KAAKG,QAC7BuC,iBAAkB,IAAM1C,KAAKG,QAC7BwC,aAAc,IAAM3C,KAAKO,UACzBqC,oBAAqB5C,KAAK6C,YAC1B5C,YAAaD,KAAKC,YAClB6C,mBAAoB,IAAM9C,KAAK+C,gBAC/BC,2BAA4B,IAAMhD,KAAKS,wBACvCwC,aAAeC,GACbC,EAAA,4BAA2BD,IAE7BE,qBAAuBC,GACrBC,EAA8BtD,KAAKa,SAASC,OAAQ,CAClDC,QAAS,CAACsC,a,CAKlB,eAAYR,GACV,IAAK7C,KAAK4C,oBAAqB,CAC7B5C,KAAK4C,oBAAsB,IAAIW,EAAsBvD,K,CAEvD,OAAOA,KAAK4C,mB,CAGP,MAAAY,GACL,OAAOxD,KAAKmC,iBAAiBqB,Q,6BAnGFC,EAAA,CAA5BC,K,+BAYMD,EAAA,CAFNE,EAAsB,mB,0CAKhBF,EAAA,CAFNE,EAAsB,e"}