{"version":3,"names":["atomicTimeframeFacetCss","AtomicTimeframeFacet","this","label","field","withDatePicker","isCollapsed","headingLevel","filterFacetCount","injectionDepth","dependsOn","focusTarget","headerFocus","FocusTargetController","initialize","timeframeFacetCommon","TimeframeFacetCommon","facetId","host","bindings","setFacetId","id","buildDependenciesManager","buildFacetConditionsManager","engine","_b","_a","facetForDateRange","state","filter","conditions","parseDependsOn","buildDateRange","getSearchStatusState","searchStatusState","deserializeRelativeDate","initializeFacetForDatePicker","initializeFacetForDateRange","values","initializeFilter","min","max","searchStatus","buildSearchStatus","disconnectedCallback","facetForDatePicker","buildDateFacet","options","numberOfValues","generateAutomaticRanges","currentValues","sortCriteria","buildDateFilter","applyDateInput","dispatch","loadDateFacetSetActions","deselectAllDateFacetValues","render","h","FacetPlaceholder","hasError","firstSearchExecuted","onToggleCollapse","__decorate","InitializeBindings","BindStateToController","MapProp"],"sources":["src/components/search/facets/atomic-timeframe-facet/atomic-timeframe-facet.pcss?tag=atomic-timeframe-facet&encapsulation=shadow","src/components/search/facets/atomic-timeframe-facet/atomic-timeframe-facet.tsx"],"sourcesContent":["@import '../../../common/facets/facet-common.pcss';\n","import {\n  buildDateFacet,\n  buildDateFilter,\n  buildDateRange,\n  buildFacetConditionsManager,\n  buildSearchStatus,\n  DateFacet,\n  DateFacetState,\n  DateFilter,\n  DateFilterState,\n  DateRangeRequest,\n  deserializeRelativeDate,\n  loadDateFacetSetActions,\n  SearchStatus,\n  SearchStatusState,\n} from '@coveo/headless';\nimport {Component, Element, h, Listen, Prop, State} from '@stencil/core';\nimport {FocusTargetController} from '../../../../utils/accessibility-utils';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../../utils/initialization-utils';\nimport {MapProp} from '../../../../utils/props-utils';\nimport {BaseFacet, parseDependsOn} from '../../../common/facets/facet-common';\nimport {FacetPlaceholder} from '../../../common/facets/facet-placeholder/facet-placeholder';\nimport {TimeframeFacetCommon} from '../../../common/facets/timeframe-facet-common';\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\n\n/**\n * A facet is a list of values for a certain field occurring in the results.\n * An `atomic-timeframe-facet` displays a facet of the results for the current query as date intervals.\n *\n * @part facet - The wrapper for the entire facet.\n * @part placeholder - The placeholder shown before the first search is executed.\n *\n * @part label-button - The button that displays the label and allows to expand/collapse the facet.\n * @part label-button-icon - The label button icon.\n * @part clear-button - The button that resets the actively selected facet values.\n * @part clear-button-icon - The clear button icon.\n *\n * @part values - The facet values container.\n * @part value-label - The facet value label, common for all displays.\n * @part value-count - The facet value count, common for all displays.\n * @part value-link - The facet value when display is 'link'.\n * @part value-link-selected - The selected facet value when display is 'link'.\n *\n * @part input-start - The input for the starting value of the custom date range.\n * @part input-end - The input for the ending value of the custom date range.\n * @part input-label - The label for both the start and end input.\n * @part input-apply-button - The apply button for the custom range.\n */\n@Component({\n  tag: 'atomic-timeframe-facet',\n  styleUrl: './atomic-timeframe-facet.pcss',\n  shadow: true,\n})\nexport class AtomicTimeframeFacet\n  implements InitializableComponent, BaseFacet<DateFacet>\n{\n  @InitializeBindings() public bindings!: Bindings;\n  public facetForDateRange?: DateFacet;\n  public facetForDatePicker?: DateFacet;\n\n  private timeframeFacetCommon?: TimeframeFacetCommon;\n  public filter?: DateFilter;\n  public searchStatus!: SearchStatus;\n  @Element() private host!: HTMLElement;\n\n  @BindStateToController('facetForDateRange')\n  @State()\n  public facetState!: DateFacetState;\n  @BindStateToController('facetForDatePicker')\n  @State()\n  public facetForDatePickerState?: DateFacetState;\n  @BindStateToController('filter')\n  @State()\n  public filterState?: DateFilterState;\n  @BindStateToController('searchStatus')\n  @State()\n  public searchStatusState!: SearchStatusState;\n  @State() public error!: Error;\n\n  /**\n   * Specifies a unique identifier for the facet.\n   */\n  @Prop({mutable: true, reflect: true}) public facetId?: string;\n  /**\n   * The non-localized label for the facet.\n   * Used in the atomic-breadbox component through the bindings store.\n   */\n  @Prop({reflect: true}) public label = 'no-label';\n  /**\n   * The field whose values you want to display in the facet.\n   */\n  @Prop({reflect: true}) public field = 'date';\n  /**\n   * Whether this facet should contain an datepicker allowing users to set custom ranges.\n   */\n  @Prop({reflect: true}) public withDatePicker = false;\n  /**\n   * Specifies whether the facet is collapsed. When the facet is the child of an `atomic-facet-manager` component, the facet manager controls this property.\n   */\n  @Prop({reflect: true, mutable: true}) public isCollapsed = false;\n  /**\n   * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the heading over the facet, from 1 to 6.\n   */\n  @Prop({reflect: true}) public headingLevel = 0;\n  /**\n   * Whether to exclude the parents of folded results when estimating the result count for each facet value.\n   */\n  @Prop({reflect: true}) public filterFacetCount = true;\n  /**\n   * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values.\n   * Note: A high injectionDepth may negatively impact the facet request performance.\n   * Minimum: `0`\n   * Default: `1000`\n   */\n  @Prop({reflect: true}) public injectionDepth = 1000;\n\n  /**\n   * The required facets and values for this facet to be displayed.\n   * Examples:\n   * ```html\n   * <atomic-facet facet-id=\"abc\" field=\"objecttype\" ...></atomic-facet>\n   *\n   * <!-- To show the facet when any value is selected in the facet with id \"abc\": -->\n   * <atomic-timeframe-facet\n   *   depends-on-abc\n   *   ...\n   * ></atomic-timeframe-facet>\n   *\n   * <!-- To show the facet when value \"doc\" is selected in the facet with id \"abc\": -->\n   * <atomic-timeframe-facet\n   *   depends-on-abc=\"doc\"\n   *   ...\n   * ></atomic-timeframe-facet>\n   * ```\n   */\n  @MapProp() @Prop() public dependsOn: Record<string, string> = {};\n\n  /**\n   * The earliest date to accept from user input when the `withDatepicker` option is enabled.\n   *\n   * This value must be a valid date string in the format `YYYY-MM-DD`.\n   *\n   * If this format is not respected, the date picker ignores this property, behaving as if no `min` value had been set.\n   *\n   * See also [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date#min).\n   */\n  @Prop({reflect: true}) public min?: string;\n\n  /**\n   * The latest date to accept from user input when the `withDatepicker` option is enabled.\n   *\n   * This value must be a valid date string in the format `YYYY-MM-DD`.\n   *\n   * If this format is not respected, the date picker ignores this property, behaving as if no `max` value had been set.\n   *\n   * See also [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date#max).\n   */\n  @Prop({reflect: true}) public max?: string;\n\n  private headerFocus?: FocusTargetController;\n\n  private get focusTarget(): FocusTargetController {\n    if (!this.headerFocus) {\n      this.headerFocus = new FocusTargetController(this);\n    }\n    return this.headerFocus;\n  }\n\n  public initialize() {\n    this.timeframeFacetCommon = new TimeframeFacetCommon({\n      facetId: this.facetId,\n      host: this.host,\n      bindings: this.bindings,\n      label: this.label,\n      field: this.field,\n      headingLevel: this.headingLevel,\n      dependsOn: this.dependsOn,\n      withDatePicker: this.withDatePicker,\n      setFacetId: (id: string) => (this.facetId = id),\n      buildDependenciesManager: () =>\n        buildFacetConditionsManager(this.bindings.engine, {\n          facetId:\n            this.facetForDateRange?.state.facetId ?? this.filter!.state.facetId,\n          conditions: parseDependsOn(this.dependsOn),\n        }),\n      buildDateRange,\n      getSearchStatusState: () => this.searchStatusState,\n      deserializeRelativeDate,\n      initializeFacetForDatePicker: () => this.initializeFacetForDatePicker(),\n      initializeFacetForDateRange: (values: DateRangeRequest[]) =>\n        this.initializeFacetForDateRange(values),\n      initializeFilter: () => this.initializeFilter(),\n      min: this.min,\n      max: this.max,\n    });\n    this.searchStatus = buildSearchStatus(this.bindings.engine);\n  }\n\n  public disconnectedCallback() {\n    this.timeframeFacetCommon?.disconnectedCallback();\n  }\n\n  private initializeFacetForDatePicker() {\n    this.facetForDatePicker = buildDateFacet(this.bindings.engine, {\n      options: {\n        facetId: `${this.facetId}_input_range`,\n        numberOfValues: 1,\n        generateAutomaticRanges: true,\n        field: this.field,\n        filterFacetCount: this.filterFacetCount,\n        injectionDepth: this.injectionDepth,\n      },\n    });\n    return this.facetForDatePicker;\n  }\n\n  private initializeFacetForDateRange(values: DateRangeRequest[]) {\n    this.facetForDateRange = buildDateFacet(this.bindings.engine, {\n      options: {\n        facetId: this.facetId,\n        field: this.field,\n        currentValues: values,\n        generateAutomaticRanges: false,\n        sortCriteria: 'descending',\n        filterFacetCount: this.filterFacetCount,\n        injectionDepth: this.injectionDepth,\n      },\n    });\n    return this.facetForDateRange;\n  }\n\n  private initializeFilter() {\n    this.filter = buildDateFilter(this.bindings.engine, {\n      options: {\n        facetId: `${this.facetId}_input`,\n        field: this.field,\n      },\n    });\n\n    return this.filter;\n  }\n\n  @Listen('atomic/dateInputApply')\n  public applyDateInput() {\n    this.facetId &&\n      this.bindings.engine.dispatch(\n        loadDateFacetSetActions(\n          this.bindings.engine\n        ).deselectAllDateFacetValues(this.facetId)\n      );\n  }\n\n  public render() {\n    if (!this.timeframeFacetCommon) {\n      return (\n        <FacetPlaceholder\n          numberOfValues={5}\n          isCollapsed={this.isCollapsed}\n        ></FacetPlaceholder>\n      );\n    }\n    return this.timeframeFacetCommon.render({\n      hasError: this.searchStatusState.hasError,\n      firstSearchExecuted: this.searchStatusState.firstSearchExecuted,\n      isCollapsed: this.isCollapsed,\n      headerFocus: this.focusTarget,\n      onToggleCollapse: () => (this.isCollapsed = !this.isCollapsed),\n    });\n  }\n}\n"],"mappings":"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"}