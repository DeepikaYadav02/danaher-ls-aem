{"version":3,"names":["atomicFacetCss","AtomicFacet","this","label","numberOfValues","withSearch","sortCriteria","resultsMustMatch","displayValuesAs","isCollapsed","headingLevel","filterFacetCount","injectionDepth","dependsOn","allowedValues","customSort","initialize","facet","buildFacet","bindings","engine","options","facetOptions","announceFacetSearchResultsWithAriaLive","msg","facetSearchAriaMessage","i18n","facetId","state","facetCommon","FacetCommon","host","field","dependenciesManager","buildFacetConditionsManager","conditions","parseDependsOn","searchStatus","buildSearchStatus","focusTargets","showLessFocus","FocusTargetController","showMoreFocus","headerFocus","showLess","showMore","header","disconnectedCallback","_a","componentShouldUpdate","next","prev","propName","facetSearch","render","h","FacetPlaceholder","hasError","searchStatusState","firstSearchExecuted","onToggleCollapse","length","undefined","__decorate","InitializeBindings","BindStateToController","MapProp","ArrayProp","AriaLiveRegion"],"sources":["src/components/search/facets/atomic-facet/atomic-facet.pcss?tag=atomic-facet&encapsulation=shadow","src/components/search/facets/atomic-facet/atomic-facet.tsx"],"sourcesContent":["@import '../../../../global/global.pcss';\n@import '../../../common/facets/facet-search/facet-search.pcss';\n@import '../../../common/facets/facet-common.pcss';\n@import '../../../common/facets/facet-value-checkbox/facet-value-checkbox.pcss';\n@import '../../../common/facets/facet-value-box/facet-value-box.pcss';\n","import {\n  Facet,\n  buildFacet,\n  FacetState,\n  FacetOptions,\n  FacetSortCriterion,\n  SearchStatus,\n  SearchStatusState,\n  buildSearchStatus,\n  buildFacetConditionsManager,\n  FacetResultsMustMatch,\n} from '@coveo/headless';\nimport {Component, h, State, Prop, Element} from '@stencil/core';\nimport {\n  AriaLiveRegion,\n  FocusTargetController,\n} from '../../../../utils/accessibility-utils';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../../utils/initialization-utils';\nimport {ArrayProp, MapProp} from '../../../../utils/props-utils';\nimport {\n  BaseFacet,\n  FacetCommon,\n  parseDependsOn,\n} from '../../../common/facets/facet-common';\nimport {FacetPlaceholder} from '../../../common/facets/facet-placeholder/facet-placeholder';\nimport {announceFacetSearchResultsWithAriaLive} from '../../../common/facets/facet-search/facet-search-aria-live';\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\n\n/**\n * A facet is a list of values for a certain field occurring in the results, ordered using a configurable criteria (e.g., number of occurrences).\n * An `atomic-facet` displays a facet of the results for the current query.\n *\n * @part facet - The wrapper for the entire facet.\n * @part placeholder - The placeholder shown before the first search is executed.\n *\n * @part label-button - The button that displays the label and allows to expand/collapse the facet.\n * @part label-button-icon - The label button icon.\n * @part clear-button - The button that resets the actively selected facet values.\n * @part clear-button-icon - The clear button icon.\n *\n * @part search-wrapper - The search box wrapper.\n * @part search-input - The search box input.\n * @part search-icon - The search box submit button.\n * @part search-clear-button - The button to clear the search box of input.\n * @part more-matches - The label indicating there are more matches for the current facet search query.\n * @part no-matches - The label indicating there are no matches for the current facet search query.\n * @part matches-query - The highlighted query inside the matches labels.\n * @part search-highlight - The highlighted query inside the facet values.\n *\n * @part values - The facet values container.\n * @part value-label - The facet value label, common for all displays.\n * @part value-count - The facet value count, common for all displays.\n *\n * @part value-checkbox - The facet value checkbox, available when display is 'checkbox'.\n * @part value-checkbox-checked - The checked facet value checkbox, available when display is 'checkbox'.\n * @part value-checkbox-label - The facet value checkbox clickable label, available when display is 'checkbox'.\n * @part value-checkbox-icon - The facet value checkbox icon, available when display is 'checkbox'.\n * @part value-link - The facet value when display is 'link'.\n * @part value-link-selected - The selected facet value when display is 'link'.\n * @part value-box - The facet value when display is 'box'.\n * @part value-box-selected - The selected facet value when display is 'box'.\n *\n * @part show-more - The show more results button.\n * @part show-less - The show less results button.\n * @part show-more-less-icon - The icons of the show more & show less buttons.\n */\n@Component({\n  tag: 'atomic-facet',\n  styleUrl: 'atomic-facet.pcss',\n  shadow: true,\n})\nexport class AtomicFacet implements InitializableComponent, BaseFacet<Facet> {\n  @InitializeBindings() public bindings!: Bindings;\n  public facetCommon?: FacetCommon;\n  public facet!: Facet;\n  public searchStatus!: SearchStatus;\n  @Element() private host!: HTMLElement;\n\n  @BindStateToController('facet')\n  @State()\n  public facetState!: FacetState;\n  @BindStateToController('searchStatus')\n  @State()\n  public searchStatusState!: SearchStatusState;\n  @State() public error!: Error;\n\n  /**\n   * Specifies a unique identifier for the facet.\n   */\n  @Prop({mutable: true, reflect: true}) public facetId?: string;\n  /**\n   * The non-localized label for the facet.\n   * Used in the `atomic-breadbox` component through the bindings store.\n   */\n  @Prop({reflect: true}) public label = 'no-label';\n  /**\n   * The field whose values you want to display in the facet.\n   */\n  @Prop({reflect: true}) public field!: string;\n  /**\n   * The number of values to request for this facet.\n   * Also determines the number of additional values to request each time more values are shown.\n   */\n  @Prop({reflect: true}) public numberOfValues = 8;\n  /**\n   * Whether this facet should contain a search box.\n   * When \"true\", the search is only enabled when more facet values are available.\n   */\n  @Prop({reflect: true}) public withSearch = true;\n  /**\n   * The sort criterion to apply to the returned facet values.\n   * Possible values are 'score', 'alphanumeric', 'alphanumericDescending', 'occurrences', and 'automatic'.\n   */\n  @Prop({reflect: true}) public sortCriteria: FacetSortCriterion = 'automatic';\n  /**\n   * Specifies how a result must match the selected facet values.\n   * Allowed values:\n   * - `atLeastOneValue`: A result will match if at least one of the corresponding facet values is selected.\n   * - `allValues`: A result will match if all corresponding facet values are selected.\n   */\n  @Prop({reflect: true}) public resultsMustMatch: FacetResultsMustMatch =\n    'atLeastOneValue';\n  /**\n   * Whether to display the facet values as checkboxes (multiple selection), links (single selection) or boxes (multiple selection).\n   * Possible values are 'checkbox', 'link', and 'box'.\n   */\n  @Prop({reflect: true}) public displayValuesAs: 'checkbox' | 'link' | 'box' =\n    'checkbox';\n  /**\n   * Specifies whether the facet is collapsed. When the facet is the child of an `atomic-facet-manager` component, the facet manager controls this property.\n   */\n  @Prop({reflect: true, mutable: true}) public isCollapsed = false;\n  /**\n   * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the heading over the facet, from 1 to 6.\n   */\n  @Prop({reflect: true}) public headingLevel = 0;\n  /**\n   * Whether to exclude the parents of folded results when estimating the result count for each facet value.\n   */\n  @Prop({reflect: true}) public filterFacetCount = true;\n  /**\n   * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values.\n   * Note: A high injectionDepth may negatively impact the facet request performance.\n   * Minimum: `0`\n   * Default: `1000`\n   */\n  @Prop() public injectionDepth = 1000;\n\n  /**\n   * The required facets and values for this facet to be displayed.\n   * Examples:\n   * ```html\n   * <atomic-facet facet-id=\"abc\" field=\"objecttype\" ...></atomic-facet>\n   *\n   * <!-- To show the facet when any value is selected in the facet with id \"abc\": -->\n   * <atomic-facet\n   *   depends-on-abc\n   *   ...\n   * ></atomic-facet>\n   *\n   * <!-- To show the facet when value \"doc\" is selected in the facet with id \"abc\": -->\n   * <atomic-facet\n   *   depends-on-abc=\"doc\"\n   *   ...\n   * ></atomic-facet>\n   * ```\n   */\n  @MapProp() @Prop() public dependsOn: Record<string, string> = {};\n  /**\n   * Specifies an explicit list of `allowedValues` in the Search API request, as a JSON string representation.\n   *\n   * If you specify a list of values for this option, the facet uses only these values (if they are available in\n   * the current result set).\n   *\n   * Example:\n   *\n   * The following facet only uses the `Contact`, `Account`, and `File` values of the `objecttype` field. Even if the\n   * current result set contains other `objecttype` values, such as `Message`, or `Product`, the facet does not use\n   * those other values.\n   *\n   * ```html\n   * <atomic-facet field=\"objecttype\" allowed-values='[\"Contact\",\"Account\",\"File\"]'></atomic-facet>\n   * ```\n   *\n   * The maximum amount of allowed values is 25.\n   *\n   * Default value is `undefined`, and the facet uses all available values for its `field` in the current result set.\n   */\n  @ArrayProp()\n  @Prop({mutable: true})\n  public allowedValues: string[] | string = '[]';\n\n  /**\n   * Identifies the facet values that must appear at the top, in this order.\n   * This parameter can be used in conjunction with the `sortCriteria` parameter.\n   *\n   * Facet values not part of the `customSort` list will be sorted according to the `sortCriteria`.\n   *\n   * Example:\n   *\n   * The following facet will sort the `Contact`, `Account`, and `File` values at the top of the list for the `objecttype` field.\n   *\n   * If there are more than these 3 values available, the rest of the list will be sorted using `occurrences`.\n   *\n   * ```html\n   * <atomic-facet field=\"objecttype\" custom-sort='[\"Contact\",\"Account\",\"File\"]' sort-criteria='occurrences'></atomic-facet>\n   * ```\n   * The maximum amount of custom sort values is 25.\n   *\n   * The default value is `undefined`, and the facet values will be sorted using only the `sortCriteria`.\n   */\n  @ArrayProp()\n  @Prop({mutable: true})\n  public customSort: string[] | string = '[]';\n\n  private showLessFocus?: FocusTargetController;\n\n  private showMoreFocus?: FocusTargetController;\n\n  private headerFocus?: FocusTargetController;\n\n  @AriaLiveRegion('facet-search')\n  protected facetSearchAriaMessage!: string;\n\n  public initialize() {\n    this.facet = buildFacet(this.bindings.engine, {options: this.facetOptions});\n    announceFacetSearchResultsWithAriaLive(\n      this.facet,\n      this.label,\n      (msg) => (this.facetSearchAriaMessage = msg),\n      this.bindings.i18n\n    );\n    this.facetId = this.facet.state.facetId;\n\n    this.facetCommon = new FacetCommon({\n      host: this.host,\n      bindings: this.bindings,\n      label: this.label,\n      field: this.field,\n      headingLevel: this.headingLevel,\n      displayValuesAs: this.displayValuesAs,\n      dependsOn: this.dependsOn,\n      dependenciesManager: buildFacetConditionsManager(this.bindings.engine, {\n        facetId: this.facetId!,\n        conditions: parseDependsOn(this.dependsOn),\n      }),\n      facet: this.facet,\n      facetId: this.facetId,\n      withSearch: this.withSearch,\n      sortCriteria: this.sortCriteria,\n    });\n\n    this.searchStatus = buildSearchStatus(this.bindings.engine);\n  }\n\n  private get focusTargets(): {\n    showLess: FocusTargetController;\n    showMore: FocusTargetController;\n    header: FocusTargetController;\n  } {\n    if (!this.showLessFocus) {\n      this.showLessFocus = new FocusTargetController(this);\n    }\n    if (!this.showMoreFocus) {\n      this.showMoreFocus = new FocusTargetController(this);\n    }\n    if (!this.headerFocus) {\n      this.headerFocus = new FocusTargetController(this);\n    }\n\n    return {\n      showLess: this.showLessFocus,\n      showMore: this.showMoreFocus,\n      header: this.headerFocus,\n    };\n  }\n\n  public disconnectedCallback() {\n    this.facetCommon?.disconnectedCallback();\n  }\n\n  public componentShouldUpdate(\n    next: unknown,\n    prev: unknown,\n    propName: keyof AtomicFacet\n  ) {\n    return (\n      !this.facetCommon ||\n      this.facetCommon?.componentShouldUpdate(\n        (next as FacetState)?.facetSearch,\n        (prev as FacetState)?.facetSearch,\n        propName\n      )\n    );\n  }\n\n  public render() {\n    if (!this.facetCommon) {\n      return (\n        <FacetPlaceholder\n          numberOfValues={this.numberOfValues}\n          isCollapsed={this.isCollapsed}\n        ></FacetPlaceholder>\n      );\n    }\n    return this.facetCommon.render({\n      hasError: this.searchStatusState.hasError,\n      firstSearchExecuted: this.searchStatusState.firstSearchExecuted,\n      isCollapsed: this.isCollapsed,\n      numberOfValues: this.numberOfValues,\n      onToggleCollapse: () => (this.isCollapsed = !this.isCollapsed),\n      headerFocus: this.focusTargets.header,\n      showLessFocus: this.focusTargets.showLess,\n      showMoreFocus: this.focusTargets.showMore,\n    });\n  }\n\n  private get facetOptions(): FacetOptions {\n    return {\n      facetId: this.facetId,\n      field: this.field,\n      numberOfValues: this.numberOfValues,\n      sortCriteria: this.sortCriteria,\n      resultsMustMatch: this.resultsMustMatch,\n      facetSearch: {numberOfValues: this.numberOfValues},\n      filterFacetCount: this.filterFacetCount,\n      injectionDepth: this.injectionDepth,\n      allowedValues: this.allowedValues.length\n        ? [...this.allowedValues]\n        : undefined,\n      customSort: this.customSort.length ? [...this.customSort] : undefined,\n    };\n  }\n}\n"],"mappings":"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"}