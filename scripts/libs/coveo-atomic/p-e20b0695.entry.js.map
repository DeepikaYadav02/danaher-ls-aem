{"version":3,"names":["atomicNumericFacetCss","AtomicNumericFacet","this","manualRanges","formatter","defaultNumberFormatter","label","numberOfValues","sortCriteria","rangeAlgorithm","displayValuesAs","isCollapsed","headingLevel","filterFacetCount","injectionDepth","dependsOn","focusTarget","headerFocus","FocusTargetController","initialize","numericFacetCommon","NumericFacetCommon","facetId","host","bindings","field","withInput","setFacetId","id","setManualRanges","getFormatter","getSearchStatusState","searchStatusState","buildDependenciesManager","buildFacetConditionsManager","engine","_b","_a","facetForRange","state","filter","conditions","parseDependsOn","buildNumericRange","initializeFacetForInput","initializeFacetForRange","initializeFilter","searchStatus","buildSearchStatus","disconnectedCallback","facetForInput","buildNumericFacet","options","generateAutomaticRanges","currentValues","length","buildNumericFilter","setFormat","event","preventDefault","stopPropagation","detail","applyNumberInput","dispatch","loadNumericFacetSetActions","deselectAllNumericFacetValues","render","h","FacetPlaceholder","hasError","firstSearchExecuted","onToggleCollapse","__decorate","InitializeBindings","BindStateToController","MapProp"],"sources":["src/components/search/facets/atomic-numeric-facet/atomic-numeric-facet.pcss?tag=atomic-numeric-facet&encapsulation=shadow","src/components/search/facets/atomic-numeric-facet/atomic-numeric-facet.tsx"],"sourcesContent":["@import '../../../common/facets/numeric-facet-common.pcss';\n","import {\n  buildFacetConditionsManager,\n  buildNumericFacet,\n  buildNumericFilter,\n  buildNumericRange,\n  buildSearchStatus,\n  loadNumericFacetSetActions,\n  NumericFacet,\n  NumericFacetState,\n  NumericFilter,\n  NumericFilterState,\n  RangeFacetRangeAlgorithm,\n  RangeFacetSortCriterion,\n  SearchStatus,\n  SearchStatusState,\n} from '@coveo/headless';\nimport {Component, Element, h, Listen, Prop, State} from '@stencil/core';\nimport {FocusTargetController} from '../../../../utils/accessibility-utils';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../../utils/initialization-utils';\nimport {MapProp} from '../../../../utils/props-utils';\nimport {BaseFacet, parseDependsOn} from '../../../common/facets/facet-common';\nimport {NumberInputType} from '../../../common/facets/facet-number-input/number-input-type';\nimport {FacetPlaceholder} from '../../../common/facets/facet-placeholder/facet-placeholder';\nimport {\n  NumericFacetCommon,\n  NumericRangeWithLabel,\n} from '../../../common/facets/numeric-facet-common';\nimport {\n  defaultNumberFormatter,\n  NumberFormatter,\n} from '../../../common/formats/format-common';\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\n\n/**\n * A facet is a list of values for a certain field occurring in the results, ordered using a configurable criteria (e.g., ascending, descending).\n * An `atomic-numeric-facet` displays a facet of the results for the current query as numeric ranges.\n *\n * @part facet - The wrapper for the entire facet.\n * @part placeholder - The placeholder shown before the first search is executed.\n *\n * @part label-button - The button that displays the label and allows to expand/collapse the facet.\n * @part label-button-icon - The label button icon.\n * @part clear-button - The button that resets the actively selected facet values.\n * @part clear-button-icon - The clear button icon.\n *\n * @part values - The facet values container.\n * @part value-label - The facet value label, common for all displays.\n * @part value-count - The facet value count, common for all displays.\n *\n * @part value-checkbox - The facet value checkbox, available when display is 'checkbox'.\n * @part value-checkbox-checked - The checked facet value checkbox, available when display is 'checkbox'.\n * @part value-checkbox-label - The facet value checkbox clickable label, available when display is 'checkbox'.\n * @part value-checkbox-icon - The facet value checkbox icon, available when display is 'checkbox'.\n * @part value-link - The facet value when display is 'link'.\n * @part value-link-selected - The selected facet value when display is 'link'.\n\n * @part input-form - The form that comprises the labels, inputs, and 'apply' button for the custom numeric range.\n * @part label-start - The label for the starting value of the custom numeric range.\n * @part label-end - The label for the ending value of the custom numeric range.\n * @part input-start - The input for the starting value of the custom numeric range.\n * @part input-end - The input for the ending value of the custom numeric range.\n * @part input-apply-button - The apply button for the custom range.\n */\n@Component({\n  tag: 'atomic-numeric-facet',\n  styleUrl: './atomic-numeric-facet.pcss',\n  shadow: true,\n})\nexport class AtomicNumericFacet\n  implements InitializableComponent, BaseFacet<NumericFacet>\n{\n  @InitializeBindings() public bindings!: Bindings;\n  public facetForRange?: NumericFacet;\n  public facetForInput?: NumericFacet;\n  public filter?: NumericFilter;\n  public searchStatus!: SearchStatus;\n  @Element() private host!: HTMLElement;\n  private manualRanges: NumericRangeWithLabel[] = [];\n  private formatter: NumberFormatter = defaultNumberFormatter;\n  private numericFacetCommon?: NumericFacetCommon;\n\n  @BindStateToController('facetForRange')\n  @State()\n  public facetState!: NumericFacetState;\n  @BindStateToController('filter')\n  @State()\n  public filterState?: NumericFilterState;\n  @BindStateToController('searchStatus')\n  @State()\n  public searchStatusState!: SearchStatusState;\n  @State() public error!: Error;\n  @BindStateToController('facetForInput')\n  @State()\n  public facetForInputState?: NumericFacetState;\n\n  /**\n   * Specifies a unique identifier for the facet.\n   */\n  @Prop({mutable: true, reflect: true}) public facetId?: string;\n  /**\n   * The non-localized label for the facet.\n   * Used in the `atomic-breadbox` component through the bindings store.\n   */\n  @Prop({reflect: true}) public label = 'no-label';\n  /**\n   * The field whose values you want to display in the facet.\n   */\n  @Prop({reflect: true}) public field!: string;\n  /**\n   * The number of values to request for this facet, when there are no manual ranges.\n   * If the number of values is 0, no ranges will be displayed.\n   */\n  @Prop({reflect: true}) public numberOfValues = 8;\n  /**\n   * Whether this facet should contain an input allowing users to set custom ranges.\n   * Depending on the field, the input can allow either decimal or integer values.\n   */\n  @Prop({reflect: true}) public withInput?: NumberInputType;\n  /**\n   * The sort criterion to apply to the returned facet values.\n   * Possible values are 'ascending' and 'descending'.\n   */\n  @Prop({reflect: true}) public sortCriteria: RangeFacetSortCriterion =\n    'ascending';\n  /**\n   * The algorithm that's used for generating the ranges of this facet when they aren't manually defined. The default value of `\"equiprobable\"` generates facet ranges which vary in size but have a more balanced number of results within each range. The value of `\"even\"` generates equally sized facet ranges across all of the results.\n   */\n  @Prop({reflect: true}) public rangeAlgorithm: RangeFacetRangeAlgorithm =\n    'equiprobable';\n  /**\n   * Whether to display the facet values as checkboxes (multiple selection) or links (single selection).\n   * Possible values are 'checkbox' and 'link'.\n   */\n  @Prop({reflect: true}) public displayValuesAs: 'checkbox' | 'link' =\n    'checkbox';\n  /**\n   * Specifies whether the facet is collapsed. When the facet is the child of an `atomic-facet-manager` component, the facet manager controls this property.\n   */\n  @Prop({reflect: true, mutable: true}) public isCollapsed = false;\n  /**\n   * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the heading over the facet, from 1 to 6.\n   */\n  @Prop({reflect: true}) public headingLevel = 0;\n  /**\n   * Whether to exclude the parents of folded results when estimating the result count for each facet value.\n   */\n  @Prop({reflect: true}) public filterFacetCount = true;\n  /**\n   * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values.\n   * Note: A high injectionDepth may negatively impact the facet request performance.\n   * Minimum: `0`\n   * Default: `1000`\n   */\n  @Prop({reflect: true}) public injectionDepth = 1000;\n\n  /**\n   * The required facets and values for this facet to be displayed.\n   * Examples:\n   * ```html\n   * <atomic-facet facet-id=\"abc\" field=\"objecttype\" ...></atomic-facet>\n   *\n   * <!-- To show the facet when any value is selected in the facet with id \"abc\": -->\n   * <atomic-numeric-facet\n   *   depends-on-abc\n   *   ...\n   * ></atomic-numeric-facet>\n   *\n   * <!-- To show the facet when value \"doc\" is selected in the facet with id \"abc\": -->\n   * <atomic-numeric-facet\n   *   depends-on-abc=\"doc\"\n   *   ...\n   * ></atomic-numeric-facet>\n   * ```\n   */\n  @MapProp() @Prop() public dependsOn: Record<string, string> = {};\n\n  private headerFocus?: FocusTargetController;\n\n  private get focusTarget(): FocusTargetController {\n    if (!this.headerFocus) {\n      this.headerFocus = new FocusTargetController(this);\n    }\n    return this.headerFocus;\n  }\n\n  public initialize() {\n    this.numericFacetCommon = new NumericFacetCommon({\n      facetId: this.facetId,\n      host: this.host,\n      bindings: this.bindings,\n      label: this.label,\n      field: this.field,\n      headingLevel: this.headingLevel,\n      dependsOn: this.dependsOn,\n      displayValuesAs: this.displayValuesAs,\n      withInput: this.withInput,\n      numberOfValues: this.numberOfValues,\n      setFacetId: (id: string) => (this.facetId = id),\n      setManualRanges: (manualRanges) => (this.manualRanges = manualRanges),\n      getFormatter: () => this.formatter,\n      getSearchStatusState: () => this.searchStatusState,\n      buildDependenciesManager: () =>\n        buildFacetConditionsManager(this.bindings.engine, {\n          facetId:\n            this.facetForRange?.state.facetId ?? this.filter!.state.facetId,\n          conditions: parseDependsOn(this.dependsOn),\n        }),\n      buildNumericRange: buildNumericRange,\n      initializeFacetForInput: () => this.initializeFacetForInput(),\n      initializeFacetForRange: () => this.initializeFacetForRange(),\n      initializeFilter: () => this.initializeFilter(),\n    });\n    this.searchStatus = buildSearchStatus(this.bindings.engine);\n  }\n\n  public disconnectedCallback() {\n    this.numericFacetCommon?.disconnectedCallback();\n  }\n\n  private initializeFacetForInput() {\n    this.facetForInput = buildNumericFacet(this.bindings.engine, {\n      options: {\n        numberOfValues: 1,\n        generateAutomaticRanges: true,\n        facetId: `${this.facetId}_input_range`,\n        field: this.field,\n        sortCriteria: this.sortCriteria,\n        rangeAlgorithm: this.rangeAlgorithm,\n        filterFacetCount: this.filterFacetCount,\n        injectionDepth: this.injectionDepth,\n      },\n    });\n\n    return this.facetForInput;\n  }\n\n  private initializeFacetForRange() {\n    this.facetForRange = buildNumericFacet(this.bindings.engine, {\n      options: {\n        facetId: this.facetId,\n        field: this.field,\n        numberOfValues: this.numberOfValues,\n        sortCriteria: this.sortCriteria,\n        rangeAlgorithm: this.rangeAlgorithm,\n        currentValues: this.manualRanges,\n        generateAutomaticRanges: !this.manualRanges.length,\n        filterFacetCount: this.filterFacetCount,\n        injectionDepth: this.injectionDepth,\n      },\n    });\n\n    return this.facetForRange;\n  }\n\n  private initializeFilter() {\n    this.filter = buildNumericFilter(this.bindings.engine, {\n      options: {\n        facetId: `${this.facetId}_input`,\n        field: this.field,\n      },\n    });\n\n    return this.filter;\n  }\n\n  @Listen('atomic/numberFormat')\n  public setFormat(event: CustomEvent<NumberFormatter>) {\n    event.preventDefault();\n    event.stopPropagation();\n    this.formatter = event.detail;\n  }\n\n  @Listen('atomic/numberInputApply')\n  public applyNumberInput() {\n    this.facetId &&\n      this.bindings.engine.dispatch(\n        loadNumericFacetSetActions(\n          this.bindings.engine\n        ).deselectAllNumericFacetValues(this.facetId)\n      );\n  }\n\n  public render() {\n    if (!this.numericFacetCommon) {\n      return (\n        <FacetPlaceholder\n          numberOfValues={this.numberOfValues}\n          isCollapsed={this.isCollapsed}\n        ></FacetPlaceholder>\n      );\n    }\n    return this.numericFacetCommon.render({\n      hasError: this.searchStatusState.hasError,\n      firstSearchExecuted: this.searchStatusState.firstSearchExecuted,\n      isCollapsed: this.isCollapsed,\n      headerFocus: this.focusTarget,\n      onToggleCollapse: () => (this.isCollapsed = !this.isCollapsed),\n    });\n  }\n}\n"],"mappings":"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"}