{"version":3,"names":["atomicPagerCss","AtomicPager","this","numberOfPages","previousButtonIcon","ArrowLeftIcon","nextButtonIcon","ArrowRightIcon","initialize","searchStatus","buildSearchStatus","bindings","engine","pager","buildPager","options","render","h","PagerCommon","activePage","focusTarget","eventEmitter","scrollToTopEvent","pagerState","searchStatusState","FocusTargetController","__decorate","InitializeBindings","BindStateToController"],"sources":["src/components/search/atomic-pager/atomic-pager.pcss?tag=atomic-pager&encapsulation=shadow","src/components/search/atomic-pager/atomic-pager.tsx"],"sourcesContent":["@import '../../../global/global.pcss';\n","import {\n  buildPager,\n  buildSearchStatus,\n  Pager,\n  PagerState,\n  SearchStatus,\n  SearchStatusState,\n} from '@coveo/headless';\nimport {Component, Event, EventEmitter, h, Prop, State} from '@stencil/core';\nimport ArrowLeftIcon from '../../../images/arrow-left-rounded.svg';\nimport ArrowRightIcon from '../../../images/arrow-right-rounded.svg';\nimport {FocusTargetController} from '../../../utils/accessibility-utils';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../utils/initialization-utils';\nimport {PagerCommon} from '../../common/pager/pager-common';\nimport {Bindings} from '../atomic-search-interface/atomic-search-interface';\n\n/**\n * The `atomic-pager` provides buttons that allow the end user to navigate through the different result pages.\n *\n * @part buttons - The list of the next/previous buttons and page-buttons.\n * @part page-buttons - The list of page buttons.\n * @part page-button - The page button.\n * @part active-page-button - The active page button.\n * @part previous-button - The previous button.\n * @part next-button - The next button.\n * @part previous-button-icon - Icon of the previous button.\n * @part next-button-icon - Icon of the next button.\n */\n@Component({\n  tag: 'atomic-pager',\n  styleUrl: 'atomic-pager.pcss',\n  shadow: true,\n})\nexport class AtomicPager implements InitializableComponent {\n  @InitializeBindings() public bindings!: Bindings;\n  public pager!: Pager;\n  public searchStatus!: SearchStatus;\n\n  @BindStateToController('pager')\n  @State()\n  public pagerState!: PagerState;\n  @BindStateToController('searchStatus')\n  @State()\n  public searchStatusState!: SearchStatusState;\n  @State() error!: Error;\n\n  @Event({\n    eventName: 'atomic/scrollToTop',\n  })\n  private scrollToTopEvent!: EventEmitter;\n\n  /**\n   * Specifies how many page buttons to display in the pager.\n   */\n  @Prop({reflect: true}) numberOfPages = 5;\n\n  /**\n   * The SVG icon to use to display the Previous button.\n   *\n   * - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location.\n   * - Use a value that starts with `assets://`, to display an icon from the Atomic package.\n   * - Use a stringified SVG to display it directly.\n   */\n  @Prop({reflect: true}) previousButtonIcon = ArrowLeftIcon;\n\n  /**\n   * The SVG icon to use to display the Next button.\n   *\n   * - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location.\n   * - Use a value that starts with `assets://`, to display an icon from the Atomic package.\n   * - Use a stringified SVG to display it directly.\n   */\n  @Prop({reflect: true}) nextButtonIcon = ArrowRightIcon;\n\n  private activePage?: FocusTargetController;\n\n  public initialize() {\n    this.searchStatus = buildSearchStatus(this.bindings.engine);\n    this.pager = buildPager(this.bindings.engine, {\n      options: {numberOfPages: this.numberOfPages},\n    });\n  }\n\n  public render() {\n    return (\n      <PagerCommon\n        activePage={this.focusTarget}\n        bindings={this.bindings}\n        eventEmitter={this.scrollToTopEvent}\n        pager={this.pager}\n        previousButtonIcon={this.previousButtonIcon}\n        nextButtonIcon={this.nextButtonIcon}\n        pagerState={this.pagerState}\n        searchStatusState={this.searchStatusState}\n      />\n    );\n  }\n\n  private get focusTarget() {\n    if (!this.activePage) {\n      this.activePage = new FocusTargetController(this);\n    }\n    return this.activePage;\n  }\n}\n"],"mappings":"2bAAA,MAAMA,EAAiB,k1gC,iXCqCVC,EAAW,M,8EAqBCC,KAAAC,cAAgB,EAShBD,KAAAE,mBAAqBC,EASrBH,KAAAI,eAAiBC,E,mGAlBD,E,wBASKF,E,oBASJE,C,CAIjC,UAAAC,GACLN,KAAKO,aAAeC,EAAkBR,KAAKS,SAASC,QACpDV,KAAKW,MAAQC,EAAWZ,KAAKS,SAASC,OAAQ,CAC5CG,QAAS,CAACZ,cAAeD,KAAKC,gB,CAI3B,MAAAa,GACL,OACEC,EAACC,EAAW,CACVC,WAAYjB,KAAKkB,YACjBT,SAAUT,KAAKS,SACfU,aAAcnB,KAAKoB,iBACnBT,MAAOX,KAAKW,MACZT,mBAAoBF,KAAKE,mBACzBE,eAAgBJ,KAAKI,eACrBiB,WAAYrB,KAAKqB,WACjBC,kBAAmBtB,KAAKsB,mB,CAK9B,eAAYJ,GACV,IAAKlB,KAAKiB,WAAY,CACpBjB,KAAKiB,WAAa,IAAIM,EAAsBvB,K,CAE9C,OAAOA,KAAKiB,U,GApEeO,EAAA,CAA5BC,K,+BAMMD,EAAA,CAFNE,EAAsB,U,iCAKhBF,EAAA,CAFNE,EAAsB,iB"}